
ADC_TemperatureSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dec  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08005f00  08005f00  00006f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062cc  080062cc  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080062cc  080062cc  000072cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062d4  080062d4  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062d4  080062d4  000072d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062d8  080062d8  000072d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080062dc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001d4  080064b0  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  080064b0  000083bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e09  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b5d  00000000  00000000  00011006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  00012b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000674  00000000  00000000  000133e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018473  00000000  00000000  00013a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a1c5  00000000  00000000  0002becf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088fea  00000000  00000000  00036094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf07e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031ec  00000000  00000000  000bf0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000c22b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ee4 	.word	0x08005ee4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005ee4 	.word	0x08005ee4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if(ch == '\n') {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b0a      	cmp	r3, #10
 8000f50:	d106      	bne.n	8000f60 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 8000f52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f56:	2201      	movs	r2, #1
 8000f58:	4907      	ldr	r1, [pc, #28]	@ (8000f78 <__io_putchar+0x34>)
 8000f5a:	4808      	ldr	r0, [pc, #32]	@ (8000f7c <__io_putchar+0x38>)
 8000f5c:	f002 f94c 	bl	80031f8 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000f60:	1d39      	adds	r1, r7, #4
 8000f62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f66:	2201      	movs	r2, #1
 8000f68:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <__io_putchar+0x38>)
 8000f6a:	f002 f945 	bl	80031f8 <HAL_UART_Transmit>

	return ch;
 8000f6e:	687b      	ldr	r3, [r7, #4]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	08005f00 	.word	0x08005f00
 8000f7c:	20000220 	.word	0x20000220

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f86:	f000 fb3f 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8a:	f000 f859 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8e:	f000 f917 	bl	80011c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f92:	f000 f8eb 	bl	800116c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f96:	f000 f8ab 	bl	80010f0 <MX_ADC1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* Start calibration */
  if(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK) {
 8000f9a:	4823      	ldr	r0, [pc, #140]	@ (8001028 <main+0xa8>)
 8000f9c:	f000 ffe6 	bl	8001f6c <HAL_ADCEx_Calibration_Start>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <main+0x2a>
	  Error_Handler();
 8000fa6:	f000 f979 	bl	800129c <Error_Handler>
  }

  /* Start the conversion process */
  if(HAL_ADC_Start(&hadc1) != HAL_OK) {
 8000faa:	481f      	ldr	r0, [pc, #124]	@ (8001028 <main+0xa8>)
 8000fac:	f000 fc8a 	bl	80018c4 <HAL_ADC_Start>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <main+0x3a>
	  Error_Handler();
 8000fb6:	f000 f971 	bl	800129c <Error_Handler>
  float vSense;
  float temp;

  while (1)
  {
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000fba:	2164      	movs	r1, #100	@ 0x64
 8000fbc:	481a      	ldr	r0, [pc, #104]	@ (8001028 <main+0xa8>)
 8000fbe:	f000 fd2f 	bl	8001a20 <HAL_ADC_PollForConversion>
	  adc1 = HAL_ADC_GetValue(&hadc1);
 8000fc2:	4819      	ldr	r0, [pc, #100]	@ (8001028 <main+0xa8>)
 8000fc4:	f000 fe32 	bl	8001c2c <HAL_ADC_GetValue>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	81fb      	strh	r3, [r7, #14]
	  //printf("ADC1_temperature: %d\n", adc1);

	  vSense = adc1 * ADC_TO_VOLT;
 8000fcc:	89fb      	ldrh	r3, [r7, #14]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fe14 	bl	8000bfc <__aeabi_i2f>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4a15      	ldr	r2, [pc, #84]	@ (800102c <main+0xac>)
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fe62 	bl	8000ca4 <__aeabi_fmul>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60bb      	str	r3, [r7, #8]
	  temp = (V25 - vSense) / AVG_SLOPE + 25.0;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <main+0xb0>)
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fd51 	bl	8000a90 <__aeabi_fsub>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <main+0xb4>)
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	f7ff ff08 	bl	8000e0c <__aeabi_fdiv>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	490e      	ldr	r1, [pc, #56]	@ (8001038 <main+0xb8>)
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fd47 	bl	8000a94 <__addsf3>
 8001006:	4603      	mov	r3, r0
 8001008:	607b      	str	r3, [r7, #4]
	  printf("temperature: %d, %f\n", adc1, temp);
 800100a:	89fc      	ldrh	r4, [r7, #14]
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff fa0b 	bl	8000428 <__aeabi_f2d>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	4621      	mov	r1, r4
 8001018:	4808      	ldr	r0, [pc, #32]	@ (800103c <main+0xbc>)
 800101a:	f002 ffdd 	bl	8003fd8 <iprintf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 800101e:	2064      	movs	r0, #100	@ 0x64
 8001020:	f000 fb54 	bl	80016cc <HAL_Delay>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8001024:	bf00      	nop
 8001026:	e7c8      	b.n	8000fba <main+0x3a>
 8001028:	200001f0 	.word	0x200001f0
 800102c:	3a533333 	.word	0x3a533333
 8001030:	3fb70a3d 	.word	0x3fb70a3d
 8001034:	3b8ce704 	.word	0x3b8ce704
 8001038:	41c80000 	.word	0x41c80000
 800103c:	08005f04 	.word	0x08005f04

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	@ 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800104a:	2228      	movs	r2, #40	@ 0x28
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f002 ffd4 	bl	8003ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001070:	2302      	movs	r3, #2
 8001072:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001078:	2310      	movs	r3, #16
 800107a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107c:	2302      	movs	r3, #2
 800107e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001080:	2300      	movs	r3, #0
 8001082:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001084:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001088:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fae6 	bl	8002660 <HAL_RCC_OscConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800109a:	f000 f8ff 	bl	800129c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109e:	230f      	movs	r3, #15
 80010a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2102      	movs	r1, #2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 fd52 	bl	8002b64 <HAL_RCC_ClockConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80010c6:	f000 f8e9 	bl	800129c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010ca:	2302      	movs	r3, #2
 80010cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80010ce:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80010d2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 fed2 	bl	8002e80 <HAL_RCCEx_PeriphCLKConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010e2:	f000 f8db 	bl	800129c <Error_Handler>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3750      	adds	r7, #80	@ 0x50
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001100:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <MX_ADC1_Init+0x74>)
 8001102:	4a19      	ldr	r2, [pc, #100]	@ (8001168 <MX_ADC1_Init+0x78>)
 8001104:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001106:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <MX_ADC1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800110c:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <MX_ADC1_Init+0x74>)
 800110e:	2201      	movs	r2, #1
 8001110:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001112:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <MX_ADC1_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <MX_ADC1_Init+0x74>)
 800111a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800111e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001120:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <MX_ADC1_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001126:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <MX_ADC1_Init+0x74>)
 8001128:	2201      	movs	r2, #1
 800112a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800112c:	480d      	ldr	r0, [pc, #52]	@ (8001164 <MX_ADC1_Init+0x74>)
 800112e:	f000 faf1 	bl	8001714 <HAL_ADC_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001138:	f000 f8b0 	bl	800129c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800113c:	2310      	movs	r3, #16
 800113e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001140:	2301      	movs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001144:	2302      	movs	r3, #2
 8001146:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	@ (8001164 <MX_ADC1_Init+0x74>)
 800114e:	f000 fd79 	bl	8001c44 <HAL_ADC_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001158:	f000 f8a0 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200001f0 	.word	0x200001f0
 8001168:	40012400 	.word	0x40012400

0800116c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001172:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <MX_USART2_UART_Init+0x50>)
 8001174:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001178:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800117c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001192:	220c      	movs	r2, #12
 8001194:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001196:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_USART2_UART_Init+0x4c>)
 80011a4:	f001 ffd8 	bl	8003158 <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ae:	f000 f875 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000220 	.word	0x20000220
 80011bc:	40004400 	.word	0x40004400

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d4:	4b2d      	ldr	r3, [pc, #180]	@ (800128c <MX_GPIO_Init+0xcc>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a2c      	ldr	r2, [pc, #176]	@ (800128c <MX_GPIO_Init+0xcc>)
 80011da:	f043 0310 	orr.w	r3, r3, #16
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b2a      	ldr	r3, [pc, #168]	@ (800128c <MX_GPIO_Init+0xcc>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ec:	4b27      	ldr	r3, [pc, #156]	@ (800128c <MX_GPIO_Init+0xcc>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a26      	ldr	r2, [pc, #152]	@ (800128c <MX_GPIO_Init+0xcc>)
 80011f2:	f043 0320 	orr.w	r3, r3, #32
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b24      	ldr	r3, [pc, #144]	@ (800128c <MX_GPIO_Init+0xcc>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0320 	and.w	r3, r3, #32
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b21      	ldr	r3, [pc, #132]	@ (800128c <MX_GPIO_Init+0xcc>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a20      	ldr	r2, [pc, #128]	@ (800128c <MX_GPIO_Init+0xcc>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <MX_GPIO_Init+0xcc>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <MX_GPIO_Init+0xcc>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a1a      	ldr	r2, [pc, #104]	@ (800128c <MX_GPIO_Init+0xcc>)
 8001222:	f043 0308 	orr.w	r3, r3, #8
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b18      	ldr	r3, [pc, #96]	@ (800128c <MX_GPIO_Init+0xcc>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	2120      	movs	r1, #32
 8001238:	4815      	ldr	r0, [pc, #84]	@ (8001290 <MX_GPIO_Init+0xd0>)
 800123a:	f001 f9d7 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800123e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001244:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <MX_GPIO_Init+0xd4>)
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	4619      	mov	r1, r3
 8001252:	4811      	ldr	r0, [pc, #68]	@ (8001298 <MX_GPIO_Init+0xd8>)
 8001254:	f001 f846 	bl	80022e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001258:	2320      	movs	r3, #32
 800125a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2302      	movs	r3, #2
 8001266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4619      	mov	r1, r3
 800126e:	4808      	ldr	r0, [pc, #32]	@ (8001290 <MX_GPIO_Init+0xd0>)
 8001270:	f001 f838 	bl	80022e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2028      	movs	r0, #40	@ 0x28
 800127a:	f000 fffc 	bl	8002276 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800127e:	2028      	movs	r0, #40	@ 0x28
 8001280:	f001 f815 	bl	80022ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000
 8001290:	40010800 	.word	0x40010800
 8001294:	10110000 	.word	0x10110000
 8001298:	40011000 	.word	0x40011000

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <Error_Handler+0x8>

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <HAL_MspInit+0x5c>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	4a14      	ldr	r2, [pc, #80]	@ (8001304 <HAL_MspInit+0x5c>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6193      	str	r3, [r2, #24]
 80012ba:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <HAL_MspInit+0x5c>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <HAL_MspInit+0x5c>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001304 <HAL_MspInit+0x5c>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d0:	61d3      	str	r3, [r2, #28]
 80012d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <HAL_MspInit+0x5c>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012de:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <HAL_MspInit+0x60>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	4a04      	ldr	r2, [pc, #16]	@ (8001308 <HAL_MspInit+0x60>)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000

0800130c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a09      	ldr	r2, [pc, #36]	@ (8001340 <HAL_ADC_MspInit+0x34>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d10b      	bne.n	8001336 <HAL_ADC_MspInit+0x2a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <HAL_ADC_MspInit+0x38>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	4a08      	ldr	r2, [pc, #32]	@ (8001344 <HAL_ADC_MspInit+0x38>)
 8001324:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001328:	6193      	str	r3, [r2, #24]
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_ADC_MspInit+0x38>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	40012400 	.word	0x40012400
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a15      	ldr	r2, [pc, #84]	@ (80013b8 <HAL_UART_MspInit+0x70>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d123      	bne.n	80013b0 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001368:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <HAL_UART_MspInit+0x74>)
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	4a13      	ldr	r2, [pc, #76]	@ (80013bc <HAL_UART_MspInit+0x74>)
 800136e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001372:	61d3      	str	r3, [r2, #28]
 8001374:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <HAL_UART_MspInit+0x74>)
 8001376:	69db      	ldr	r3, [r3, #28]
 8001378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <HAL_UART_MspInit+0x74>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a0d      	ldr	r2, [pc, #52]	@ (80013bc <HAL_UART_MspInit+0x74>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <HAL_UART_MspInit+0x74>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001398:	230c      	movs	r3, #12
 800139a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	4619      	mov	r1, r3
 80013aa:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <HAL_UART_MspInit+0x78>)
 80013ac:	f000 ff9a 	bl	80022e4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40004400 	.word	0x40004400
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010800 	.word	0x40010800

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <NMI_Handler+0x4>

080013cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <MemManage_Handler+0x4>

080013dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001414:	f000 f93e 	bl	8001694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}

0800141c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001420:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001424:	f001 f8fa 	bl	800261c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return 1;
 8001430:	2301      	movs	r3, #1
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <_kill>:

int _kill(int pid, int sig)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001444:	f002 fde2 	bl	800400c <__errno>
 8001448:	4603      	mov	r3, r0
 800144a:	2216      	movs	r2, #22
 800144c:	601a      	str	r2, [r3, #0]
  return -1;
 800144e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <_exit>:

void _exit (int status)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001462:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ffe7 	bl	800143a <_kill>
  while (1) {}    /* Make sure we hang here */
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <_exit+0x12>

08001470 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e00a      	b.n	8001498 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001482:	f3af 8000 	nop.w
 8001486:	4601      	mov	r1, r0
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	b2ca      	uxtb	r2, r1
 8001490:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	dbf0      	blt.n	8001482 <_read+0x12>
  }

  return len;
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e009      	b.n	80014d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	60ba      	str	r2, [r7, #8]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fd3d 	bl	8000f44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf1      	blt.n	80014bc <_write+0x12>
  }
  return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_close>:

int _close(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001508:	605a      	str	r2, [r3, #4]
  return 0;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <_isatty>:

int _isatty(int file)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800152a:	b480      	push	{r7}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
	...

08001544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800154c:	4a14      	ldr	r2, [pc, #80]	@ (80015a0 <_sbrk+0x5c>)
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <_sbrk+0x60>)
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001558:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <_sbrk+0x64>)
 8001562:	4a12      	ldr	r2, [pc, #72]	@ (80015ac <_sbrk+0x68>)
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	429a      	cmp	r2, r3
 8001572:	d207      	bcs.n	8001584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001574:	f002 fd4a 	bl	800400c <__errno>
 8001578:	4603      	mov	r3, r0
 800157a:	220c      	movs	r2, #12
 800157c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001582:	e009      	b.n	8001598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158a:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	4a05      	ldr	r2, [pc, #20]	@ (80015a8 <_sbrk+0x64>)
 8001594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20005000 	.word	0x20005000
 80015a4:	00000400 	.word	0x00000400
 80015a8:	20000268 	.word	0x20000268
 80015ac:	200003c0 	.word	0x200003c0

080015b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015bc:	f7ff fff8 	bl	80015b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c0:	480b      	ldr	r0, [pc, #44]	@ (80015f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015c2:	490c      	ldr	r1, [pc, #48]	@ (80015f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015c4:	4a0c      	ldr	r2, [pc, #48]	@ (80015f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a09      	ldr	r2, [pc, #36]	@ (80015fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015d8:	4c09      	ldr	r4, [pc, #36]	@ (8001600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e6:	f002 fd17 	bl	8004018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ea:	f7ff fcc9 	bl	8000f80 <main>
  bx lr
 80015ee:	4770      	bx	lr
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80015f8:	080062dc 	.word	0x080062dc
  ldr r2, =_sbss
 80015fc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001600:	200003bc 	.word	0x200003bc

08001604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC1_2_IRQHandler>
	...

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <HAL_Init+0x28>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a07      	ldr	r2, [pc, #28]	@ (8001630 <HAL_Init+0x28>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001618:	2003      	movs	r0, #3
 800161a:	f000 fe21 	bl	8002260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161e:	2000      	movs	r0, #0
 8001620:	f000 f808 	bl	8001634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001624:	f7ff fe40 	bl	80012a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40022000 	.word	0x40022000

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800163c:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <HAL_InitTick+0x54>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <HAL_InitTick+0x58>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800164a:	fbb3 f3f1 	udiv	r3, r3, r1
 800164e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fe39 	bl	80022ca <HAL_SYSTICK_Config>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e00e      	b.n	8001680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b0f      	cmp	r3, #15
 8001666:	d80a      	bhi.n	800167e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001668:	2200      	movs	r2, #0
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001670:	f000 fe01 	bl	8002276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001674:	4a06      	ldr	r2, [pc, #24]	@ (8001690 <HAL_InitTick+0x5c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000000 	.word	0x20000000
 800168c:	20000008 	.word	0x20000008
 8001690:	20000004 	.word	0x20000004

08001694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001698:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <HAL_IncTick+0x1c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <HAL_IncTick+0x20>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a03      	ldr	r2, [pc, #12]	@ (80016b4 <HAL_IncTick+0x20>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	20000008 	.word	0x20000008
 80016b4:	2000026c 	.word	0x2000026c

080016b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b02      	ldr	r3, [pc, #8]	@ (80016c8 <HAL_GetTick+0x10>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr
 80016c8:	2000026c 	.word	0x2000026c

080016cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff fff0 	bl	80016b8 <HAL_GetTick>
 80016d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016e4:	d005      	beq.n	80016f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <HAL_Delay+0x44>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016f2:	bf00      	nop
 80016f4:	f7ff ffe0 	bl	80016b8 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	d8f7      	bhi.n	80016f4 <HAL_Delay+0x28>
  {
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000008 	.word	0x20000008

08001714 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0be      	b.n	80018b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001740:	2b00      	cmp	r3, #0
 8001742:	d109      	bne.n	8001758 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fdda 	bl	800130c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 fbc5 	bl	8001ee8 <ADC_ConversionStop_Disable>
 800175e:	4603      	mov	r3, r0
 8001760:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 8099 	bne.w	80018a2 <HAL_ADC_Init+0x18e>
 8001770:	7dfb      	ldrb	r3, [r7, #23]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f040 8095 	bne.w	80018a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001780:	f023 0302 	bic.w	r3, r3, #2
 8001784:	f043 0202 	orr.w	r2, r3, #2
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001794:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7b1b      	ldrb	r3, [r3, #12]
 800179a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800179c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017ac:	d003      	beq.n	80017b6 <HAL_ADC_Init+0xa2>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d102      	bne.n	80017bc <HAL_ADC_Init+0xa8>
 80017b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017ba:	e000      	b.n	80017be <HAL_ADC_Init+0xaa>
 80017bc:	2300      	movs	r3, #0
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7d1b      	ldrb	r3, [r3, #20]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d119      	bne.n	8001800 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7b1b      	ldrb	r3, [r3, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	3b01      	subs	r3, #1
 80017da:	035a      	lsls	r2, r3, #13
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	e00b      	b.n	8001800 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ec:	f043 0220 	orr.w	r2, r3, #32
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f8:	f043 0201 	orr.w	r2, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	430a      	orrs	r2, r1
 8001812:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	4b28      	ldr	r3, [pc, #160]	@ (80018bc <HAL_ADC_Init+0x1a8>)
 800181c:	4013      	ands	r3, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	430b      	orrs	r3, r1
 8001826:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001830:	d003      	beq.n	800183a <HAL_ADC_Init+0x126>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d104      	bne.n	8001844 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	3b01      	subs	r3, #1
 8001840:	051b      	lsls	r3, r3, #20
 8001842:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	430a      	orrs	r2, r1
 8001856:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <HAL_ADC_Init+0x1ac>)
 8001860:	4013      	ands	r3, r2
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	429a      	cmp	r2, r3
 8001866:	d10b      	bne.n	8001880 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001872:	f023 0303 	bic.w	r3, r3, #3
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800187e:	e018      	b.n	80018b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001884:	f023 0312 	bic.w	r3, r3, #18
 8001888:	f043 0210 	orr.w	r2, r3, #16
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018a0:	e007      	b.n	80018b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a6:	f043 0210 	orr.w	r2, r3, #16
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	ffe1f7fd 	.word	0xffe1f7fd
 80018c0:	ff1f0efe 	.word	0xff1f0efe

080018c4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d101      	bne.n	80018de <HAL_ADC_Start+0x1a>
 80018da:	2302      	movs	r3, #2
 80018dc:	e098      	b.n	8001a10 <HAL_ADC_Start+0x14c>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 faa4 	bl	8001e34 <ADC_Enable>
 80018ec:	4603      	mov	r3, r0
 80018ee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 8087 	bne.w	8001a06 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a41      	ldr	r2, [pc, #260]	@ (8001a18 <HAL_ADC_Start+0x154>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d105      	bne.n	8001922 <HAL_ADC_Start+0x5e>
 8001916:	4b41      	ldr	r3, [pc, #260]	@ (8001a1c <HAL_ADC_Start+0x158>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d115      	bne.n	800194e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001926:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001938:	2b00      	cmp	r3, #0
 800193a:	d026      	beq.n	800198a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001940:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001944:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800194c:	e01d      	b.n	800198a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001952:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a2f      	ldr	r2, [pc, #188]	@ (8001a1c <HAL_ADC_Start+0x158>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d004      	beq.n	800196e <HAL_ADC_Start+0xaa>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a2b      	ldr	r2, [pc, #172]	@ (8001a18 <HAL_ADC_Start+0x154>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d10d      	bne.n	800198a <HAL_ADC_Start+0xc6>
 800196e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a1c <HAL_ADC_Start+0x158>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001982:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d006      	beq.n	80019a4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199a:	f023 0206 	bic.w	r2, r3, #6
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019a2:	e002      	b.n	80019aa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f06f 0202 	mvn.w	r2, #2
 80019ba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80019c6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019ca:	d113      	bne.n	80019f4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019d0:	4a11      	ldr	r2, [pc, #68]	@ (8001a18 <HAL_ADC_Start+0x154>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d105      	bne.n	80019e2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019d6:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <HAL_ADC_Start+0x158>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d108      	bne.n	80019f4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	e00c      	b.n	8001a0e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	e003      	b.n	8001a0e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40012800 	.word	0x40012800
 8001a1c:	40012400 	.word	0x40012400

08001a20 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a36:	f7ff fe3f 	bl	80016b8 <HAL_GetTick>
 8001a3a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00b      	beq.n	8001a62 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4e:	f043 0220 	orr.w	r2, r3, #32
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0d3      	b.n	8001c0a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d131      	bne.n	8001ad4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a76:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d12a      	bne.n	8001ad4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a7e:	e021      	b.n	8001ac4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a86:	d01d      	beq.n	8001ac4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_ADC_PollForConversion+0x7e>
 8001a8e:	f7ff fe13 	bl	80016b8 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d212      	bcs.n	8001ac4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10b      	bne.n	8001ac4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab0:	f043 0204 	orr.w	r2, r3, #4
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e0a2      	b.n	8001c0a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0d6      	beq.n	8001a80 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ad2:	e070      	b.n	8001bb6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8001c14 <HAL_ADC_PollForConversion+0x1f4>)
 8001ad6:	681c      	ldr	r4, [r3, #0]
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f001 fa87 	bl	8002fec <HAL_RCCEx_GetPeriphCLKFreq>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6919      	ldr	r1, [r3, #16]
 8001aea:	4b4b      	ldr	r3, [pc, #300]	@ (8001c18 <HAL_ADC_PollForConversion+0x1f8>)
 8001aec:	400b      	ands	r3, r1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d118      	bne.n	8001b24 <HAL_ADC_PollForConversion+0x104>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68d9      	ldr	r1, [r3, #12]
 8001af8:	4b48      	ldr	r3, [pc, #288]	@ (8001c1c <HAL_ADC_PollForConversion+0x1fc>)
 8001afa:	400b      	ands	r3, r1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d111      	bne.n	8001b24 <HAL_ADC_PollForConversion+0x104>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6919      	ldr	r1, [r3, #16]
 8001b06:	4b46      	ldr	r3, [pc, #280]	@ (8001c20 <HAL_ADC_PollForConversion+0x200>)
 8001b08:	400b      	ands	r3, r1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d108      	bne.n	8001b20 <HAL_ADC_PollForConversion+0x100>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68d9      	ldr	r1, [r3, #12]
 8001b14:	4b43      	ldr	r3, [pc, #268]	@ (8001c24 <HAL_ADC_PollForConversion+0x204>)
 8001b16:	400b      	ands	r3, r1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_ADC_PollForConversion+0x100>
 8001b1c:	2314      	movs	r3, #20
 8001b1e:	e020      	b.n	8001b62 <HAL_ADC_PollForConversion+0x142>
 8001b20:	2329      	movs	r3, #41	@ 0x29
 8001b22:	e01e      	b.n	8001b62 <HAL_ADC_PollForConversion+0x142>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6919      	ldr	r1, [r3, #16]
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c20 <HAL_ADC_PollForConversion+0x200>)
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_ADC_PollForConversion+0x120>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68d9      	ldr	r1, [r3, #12]
 8001b38:	4b3a      	ldr	r3, [pc, #232]	@ (8001c24 <HAL_ADC_PollForConversion+0x204>)
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00d      	beq.n	8001b5c <HAL_ADC_PollForConversion+0x13c>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6919      	ldr	r1, [r3, #16]
 8001b46:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <HAL_ADC_PollForConversion+0x208>)
 8001b48:	400b      	ands	r3, r1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d108      	bne.n	8001b60 <HAL_ADC_PollForConversion+0x140>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68d9      	ldr	r1, [r3, #12]
 8001b54:	4b34      	ldr	r3, [pc, #208]	@ (8001c28 <HAL_ADC_PollForConversion+0x208>)
 8001b56:	400b      	ands	r3, r1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_ADC_PollForConversion+0x140>
 8001b5c:	2354      	movs	r3, #84	@ 0x54
 8001b5e:	e000      	b.n	8001b62 <HAL_ADC_PollForConversion+0x142>
 8001b60:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b68:	e021      	b.n	8001bae <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b70:	d01a      	beq.n	8001ba8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d007      	beq.n	8001b88 <HAL_ADC_PollForConversion+0x168>
 8001b78:	f7ff fd9e 	bl	80016b8 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d20f      	bcs.n	8001ba8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d90b      	bls.n	8001ba8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b94:	f043 0204 	orr.w	r2, r3, #4
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e030      	b.n	8001c0a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3301      	adds	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d8d9      	bhi.n	8001b6a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f06f 0212 	mvn.w	r2, #18
 8001bbe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001bd6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001bda:	d115      	bne.n	8001c08 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d111      	bne.n	8001c08 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d105      	bne.n	8001c08 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd90      	pop	{r4, r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000000 	.word	0x20000000
 8001c18:	24924924 	.word	0x24924924
 8001c1c:	00924924 	.word	0x00924924
 8001c20:	12492492 	.word	0x12492492
 8001c24:	00492492 	.word	0x00492492
 8001c28:	00249249 	.word	0x00249249

08001c2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x20>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e0dc      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x1da>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b06      	cmp	r3, #6
 8001c72:	d81c      	bhi.n	8001cae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	3b05      	subs	r3, #5
 8001c86:	221f      	movs	r2, #31
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	4019      	ands	r1, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3b05      	subs	r3, #5
 8001ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cac:	e03c      	b.n	8001d28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d81c      	bhi.n	8001cf0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3b23      	subs	r3, #35	@ 0x23
 8001cc8:	221f      	movs	r2, #31
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	4019      	ands	r1, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	3b23      	subs	r3, #35	@ 0x23
 8001ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cee:	e01b      	b.n	8001d28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b41      	subs	r3, #65	@ 0x41
 8001d02:	221f      	movs	r2, #31
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	4019      	ands	r1, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	3b41      	subs	r3, #65	@ 0x41
 8001d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b09      	cmp	r3, #9
 8001d2e:	d91c      	bls.n	8001d6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68d9      	ldr	r1, [r3, #12]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b1e      	subs	r3, #30
 8001d42:	2207      	movs	r2, #7
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	4019      	ands	r1, r3
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6898      	ldr	r0, [r3, #8]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	3b1e      	subs	r3, #30
 8001d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	e019      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6919      	ldr	r1, [r3, #16]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	2207      	movs	r2, #7
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	4019      	ands	r1, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	6898      	ldr	r0, [r3, #8]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	fa00 f203 	lsl.w	r2, r0, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b10      	cmp	r3, #16
 8001da4:	d003      	beq.n	8001dae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001daa:	2b11      	cmp	r3, #17
 8001dac:	d132      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e28 <HAL_ADC_ConfigChannel+0x1e4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d125      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d126      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001dd4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d11a      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dde:	4b13      	ldr	r3, [pc, #76]	@ (8001e2c <HAL_ADC_ConfigChannel+0x1e8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a13      	ldr	r2, [pc, #76]	@ (8001e30 <HAL_ADC_ConfigChannel+0x1ec>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	0c9a      	lsrs	r2, r3, #18
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001df4:	e002      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f9      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x1b2>
 8001e02:	e007      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e08:	f043 0220 	orr.w	r2, r3, #32
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	40012400 	.word	0x40012400
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	431bde83 	.word	0x431bde83

08001e34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d040      	beq.n	8001ed4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0201 	orr.w	r2, r2, #1
 8001e60:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e62:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <ADC_Enable+0xac>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee4 <ADC_Enable+0xb0>)
 8001e68:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6c:	0c9b      	lsrs	r3, r3, #18
 8001e6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e70:	e002      	b.n	8001e78 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f9      	bne.n	8001e72 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e7e:	f7ff fc1b 	bl	80016b8 <HAL_GetTick>
 8001e82:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e84:	e01f      	b.n	8001ec6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e86:	f7ff fc17 	bl	80016b8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d918      	bls.n	8001ec6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d011      	beq.n	8001ec6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea6:	f043 0210 	orr.w	r2, r3, #16
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb2:	f043 0201 	orr.w	r2, r3, #1
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e007      	b.n	8001ed6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d1d8      	bne.n	8001e86 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	431bde83 	.word	0x431bde83

08001ee8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d12e      	bne.n	8001f60 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0201 	bic.w	r2, r2, #1
 8001f10:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f12:	f7ff fbd1 	bl	80016b8 <HAL_GetTick>
 8001f16:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f18:	e01b      	b.n	8001f52 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f1a:	f7ff fbcd 	bl	80016b8 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d914      	bls.n	8001f52 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d10d      	bne.n	8001f52 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3a:	f043 0210 	orr.w	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e007      	b.n	8001f62 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d0dc      	beq.n	8001f1a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_ADCEx_Calibration_Start+0x1e>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e097      	b.n	80020ba <HAL_ADCEx_Calibration_Start+0x14e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff ffa8 	bl	8001ee8 <ADC_ConversionStop_Disable>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff49 	bl	8001e34 <ADC_Enable>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f040 8081 	bne.w	80020b0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fb6:	f023 0302 	bic.w	r3, r3, #2
 8001fba:	f043 0202 	orr.w	r2, r3, #2
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001fc2:	4b40      	ldr	r3, [pc, #256]	@ (80020c4 <HAL_ADCEx_Calibration_Start+0x158>)
 8001fc4:	681c      	ldr	r4, [r3, #0]
 8001fc6:	2002      	movs	r0, #2
 8001fc8:	f001 f810 	bl	8002fec <HAL_RCCEx_GetPeriphCLKFreq>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001fd2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001fd4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001fd6:	e002      	b.n	8001fde <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f9      	bne.n	8001fd8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0208 	orr.w	r2, r2, #8
 8001ff2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001ff4:	f7ff fb60 	bl	80016b8 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001ffa:	e01b      	b.n	8002034 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001ffc:	f7ff fb5c 	bl	80016b8 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b0a      	cmp	r3, #10
 8002008:	d914      	bls.n	8002034 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201c:	f023 0312 	bic.w	r3, r3, #18
 8002020:	f043 0210 	orr.w	r2, r3, #16
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e042      	b.n	80020ba <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1dc      	bne.n	8001ffc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0204 	orr.w	r2, r2, #4
 8002050:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002052:	f7ff fb31 	bl	80016b8 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002058:	e01b      	b.n	8002092 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800205a:	f7ff fb2d 	bl	80016b8 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b0a      	cmp	r3, #10
 8002066:	d914      	bls.n	8002092 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00d      	beq.n	8002092 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207a:	f023 0312 	bic.w	r3, r3, #18
 800207e:	f043 0210 	orr.w	r2, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e013      	b.n	80020ba <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1dc      	bne.n	800205a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a4:	f023 0303 	bic.w	r3, r3, #3
 80020a8:	f043 0201 	orr.w	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd90      	pop	{r4, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000000 	.word	0x20000000

080020c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fa:	4a04      	ldr	r2, [pc, #16]	@ (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	60d3      	str	r3, [r2, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002114:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <__NVIC_GetPriorityGrouping+0x18>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	f003 0307 	and.w	r3, r3, #7
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	2b00      	cmp	r3, #0
 800213c:	db0b      	blt.n	8002156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	f003 021f 	and.w	r2, r3, #31
 8002144:	4906      	ldr	r1, [pc, #24]	@ (8002160 <__NVIC_EnableIRQ+0x34>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	2001      	movs	r0, #1
 800214e:	fa00 f202 	lsl.w	r2, r0, r2
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	e000e100 	.word	0xe000e100

08002164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	2b00      	cmp	r3, #0
 8002176:	db0a      	blt.n	800218e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	490c      	ldr	r1, [pc, #48]	@ (80021b0 <__NVIC_SetPriority+0x4c>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	0112      	lsls	r2, r2, #4
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	440b      	add	r3, r1
 8002188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800218c:	e00a      	b.n	80021a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4908      	ldr	r1, [pc, #32]	@ (80021b4 <__NVIC_SetPriority+0x50>)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	3b04      	subs	r3, #4
 800219c:	0112      	lsls	r2, r2, #4
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	440b      	add	r3, r1
 80021a2:	761a      	strb	r2, [r3, #24]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000e100 	.word	0xe000e100
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	@ 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f1c3 0307 	rsb	r3, r3, #7
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	bf28      	it	cs
 80021d6:	2304      	movcs	r3, #4
 80021d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3304      	adds	r3, #4
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d902      	bls.n	80021e8 <NVIC_EncodePriority+0x30>
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3b03      	subs	r3, #3
 80021e6:	e000      	b.n	80021ea <NVIC_EncodePriority+0x32>
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	401a      	ands	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002200:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43d9      	mvns	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	4313      	orrs	r3, r2
         );
}
 8002212:	4618      	mov	r0, r3
 8002214:	3724      	adds	r7, #36	@ 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800222c:	d301      	bcc.n	8002232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002232:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <SysTick_Config+0x40>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223a:	210f      	movs	r1, #15
 800223c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002240:	f7ff ff90 	bl	8002164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <SysTick_Config+0x40>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224a:	4b04      	ldr	r3, [pc, #16]	@ (800225c <SysTick_Config+0x40>)
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	e000e010 	.word	0xe000e010

08002260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff2d 	bl	80020c8 <__NVIC_SetPriorityGrouping>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002288:	f7ff ff42 	bl	8002110 <__NVIC_GetPriorityGrouping>
 800228c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	6978      	ldr	r0, [r7, #20]
 8002294:	f7ff ff90 	bl	80021b8 <NVIC_EncodePriority>
 8002298:	4602      	mov	r2, r0
 800229a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff5f 	bl	8002164 <__NVIC_SetPriority>
}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff35 	bl	800212c <__NVIC_EnableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffa2 	bl	800221c <SysTick_Config>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b08b      	sub	sp, #44	@ 0x2c
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f6:	e169      	b.n	80025cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022f8:	2201      	movs	r2, #1
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	429a      	cmp	r2, r3
 8002312:	f040 8158 	bne.w	80025c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4a9a      	ldr	r2, [pc, #616]	@ (8002584 <HAL_GPIO_Init+0x2a0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d05e      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002320:	4a98      	ldr	r2, [pc, #608]	@ (8002584 <HAL_GPIO_Init+0x2a0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d875      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 8002326:	4a98      	ldr	r2, [pc, #608]	@ (8002588 <HAL_GPIO_Init+0x2a4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d058      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 800232c:	4a96      	ldr	r2, [pc, #600]	@ (8002588 <HAL_GPIO_Init+0x2a4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d86f      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 8002332:	4a96      	ldr	r2, [pc, #600]	@ (800258c <HAL_GPIO_Init+0x2a8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d052      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002338:	4a94      	ldr	r2, [pc, #592]	@ (800258c <HAL_GPIO_Init+0x2a8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d869      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 800233e:	4a94      	ldr	r2, [pc, #592]	@ (8002590 <HAL_GPIO_Init+0x2ac>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d04c      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002344:	4a92      	ldr	r2, [pc, #584]	@ (8002590 <HAL_GPIO_Init+0x2ac>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d863      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 800234a:	4a92      	ldr	r2, [pc, #584]	@ (8002594 <HAL_GPIO_Init+0x2b0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d046      	beq.n	80023de <HAL_GPIO_Init+0xfa>
 8002350:	4a90      	ldr	r2, [pc, #576]	@ (8002594 <HAL_GPIO_Init+0x2b0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d85d      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 8002356:	2b12      	cmp	r3, #18
 8002358:	d82a      	bhi.n	80023b0 <HAL_GPIO_Init+0xcc>
 800235a:	2b12      	cmp	r3, #18
 800235c:	d859      	bhi.n	8002412 <HAL_GPIO_Init+0x12e>
 800235e:	a201      	add	r2, pc, #4	@ (adr r2, 8002364 <HAL_GPIO_Init+0x80>)
 8002360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002364:	080023df 	.word	0x080023df
 8002368:	080023b9 	.word	0x080023b9
 800236c:	080023cb 	.word	0x080023cb
 8002370:	0800240d 	.word	0x0800240d
 8002374:	08002413 	.word	0x08002413
 8002378:	08002413 	.word	0x08002413
 800237c:	08002413 	.word	0x08002413
 8002380:	08002413 	.word	0x08002413
 8002384:	08002413 	.word	0x08002413
 8002388:	08002413 	.word	0x08002413
 800238c:	08002413 	.word	0x08002413
 8002390:	08002413 	.word	0x08002413
 8002394:	08002413 	.word	0x08002413
 8002398:	08002413 	.word	0x08002413
 800239c:	08002413 	.word	0x08002413
 80023a0:	08002413 	.word	0x08002413
 80023a4:	08002413 	.word	0x08002413
 80023a8:	080023c1 	.word	0x080023c1
 80023ac:	080023d5 	.word	0x080023d5
 80023b0:	4a79      	ldr	r2, [pc, #484]	@ (8002598 <HAL_GPIO_Init+0x2b4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d013      	beq.n	80023de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023b6:	e02c      	b.n	8002412 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	623b      	str	r3, [r7, #32]
          break;
 80023be:	e029      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	3304      	adds	r3, #4
 80023c6:	623b      	str	r3, [r7, #32]
          break;
 80023c8:	e024      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	3308      	adds	r3, #8
 80023d0:	623b      	str	r3, [r7, #32]
          break;
 80023d2:	e01f      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	330c      	adds	r3, #12
 80023da:	623b      	str	r3, [r7, #32]
          break;
 80023dc:	e01a      	b.n	8002414 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023e6:	2304      	movs	r3, #4
 80023e8:	623b      	str	r3, [r7, #32]
          break;
 80023ea:	e013      	b.n	8002414 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f4:	2308      	movs	r3, #8
 80023f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	611a      	str	r2, [r3, #16]
          break;
 80023fe:	e009      	b.n	8002414 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002400:	2308      	movs	r3, #8
 8002402:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	615a      	str	r2, [r3, #20]
          break;
 800240a:	e003      	b.n	8002414 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
          break;
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x130>
          break;
 8002412:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2bff      	cmp	r3, #255	@ 0xff
 8002418:	d801      	bhi.n	800241e <HAL_GPIO_Init+0x13a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	e001      	b.n	8002422 <HAL_GPIO_Init+0x13e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2bff      	cmp	r3, #255	@ 0xff
 8002428:	d802      	bhi.n	8002430 <HAL_GPIO_Init+0x14c>
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	e002      	b.n	8002436 <HAL_GPIO_Init+0x152>
 8002430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002432:	3b08      	subs	r3, #8
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	210f      	movs	r1, #15
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	401a      	ands	r2, r3
 8002448:	6a39      	ldr	r1, [r7, #32]
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	431a      	orrs	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80b1 	beq.w	80025c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002464:	4b4d      	ldr	r3, [pc, #308]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	4a4c      	ldr	r2, [pc, #304]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6193      	str	r3, [r2, #24]
 8002470:	4b4a      	ldr	r3, [pc, #296]	@ (800259c <HAL_GPIO_Init+0x2b8>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800247c:	4a48      	ldr	r2, [pc, #288]	@ (80025a0 <HAL_GPIO_Init+0x2bc>)
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002488:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	f003 0303 	and.w	r3, r3, #3
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	220f      	movs	r2, #15
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4013      	ands	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a40      	ldr	r2, [pc, #256]	@ (80025a4 <HAL_GPIO_Init+0x2c0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d013      	beq.n	80024d0 <HAL_GPIO_Init+0x1ec>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a3f      	ldr	r2, [pc, #252]	@ (80025a8 <HAL_GPIO_Init+0x2c4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d00d      	beq.n	80024cc <HAL_GPIO_Init+0x1e8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a3e      	ldr	r2, [pc, #248]	@ (80025ac <HAL_GPIO_Init+0x2c8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d007      	beq.n	80024c8 <HAL_GPIO_Init+0x1e4>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a3d      	ldr	r2, [pc, #244]	@ (80025b0 <HAL_GPIO_Init+0x2cc>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d101      	bne.n	80024c4 <HAL_GPIO_Init+0x1e0>
 80024c0:	2303      	movs	r3, #3
 80024c2:	e006      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024c4:	2304      	movs	r3, #4
 80024c6:	e004      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e002      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_GPIO_Init+0x1ee>
 80024d0:	2300      	movs	r3, #0
 80024d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d4:	f002 0203 	and.w	r2, r2, #3
 80024d8:	0092      	lsls	r2, r2, #2
 80024da:	4093      	lsls	r3, r2
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024e2:	492f      	ldr	r1, [pc, #188]	@ (80025a0 <HAL_GPIO_Init+0x2bc>)
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3302      	adds	r3, #2
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024fc:	4b2d      	ldr	r3, [pc, #180]	@ (80025b4 <HAL_GPIO_Init+0x2d0>)
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	492c      	ldr	r1, [pc, #176]	@ (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	608b      	str	r3, [r1, #8]
 8002508:	e006      	b.n	8002518 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800250a:	4b2a      	ldr	r3, [pc, #168]	@ (80025b4 <HAL_GPIO_Init+0x2d0>)
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	43db      	mvns	r3, r3
 8002512:	4928      	ldr	r1, [pc, #160]	@ (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002514:	4013      	ands	r3, r2
 8002516:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002524:	4b23      	ldr	r3, [pc, #140]	@ (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	4922      	ldr	r1, [pc, #136]	@ (80025b4 <HAL_GPIO_Init+0x2d0>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	60cb      	str	r3, [r1, #12]
 8002530:	e006      	b.n	8002540 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002532:	4b20      	ldr	r3, [pc, #128]	@ (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	43db      	mvns	r3, r3
 800253a:	491e      	ldr	r1, [pc, #120]	@ (80025b4 <HAL_GPIO_Init+0x2d0>)
 800253c:	4013      	ands	r3, r2
 800253e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d006      	beq.n	800255a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800254c:	4b19      	ldr	r3, [pc, #100]	@ (80025b4 <HAL_GPIO_Init+0x2d0>)
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4918      	ldr	r1, [pc, #96]	@ (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800255a:	4b16      	ldr	r3, [pc, #88]	@ (80025b4 <HAL_GPIO_Init+0x2d0>)
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	43db      	mvns	r3, r3
 8002562:	4914      	ldr	r1, [pc, #80]	@ (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002564:	4013      	ands	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d021      	beq.n	80025b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002574:	4b0f      	ldr	r3, [pc, #60]	@ (80025b4 <HAL_GPIO_Init+0x2d0>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	490e      	ldr	r1, [pc, #56]	@ (80025b4 <HAL_GPIO_Init+0x2d0>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
 8002580:	e021      	b.n	80025c6 <HAL_GPIO_Init+0x2e2>
 8002582:	bf00      	nop
 8002584:	10320000 	.word	0x10320000
 8002588:	10310000 	.word	0x10310000
 800258c:	10220000 	.word	0x10220000
 8002590:	10210000 	.word	0x10210000
 8002594:	10120000 	.word	0x10120000
 8002598:	10110000 	.word	0x10110000
 800259c:	40021000 	.word	0x40021000
 80025a0:	40010000 	.word	0x40010000
 80025a4:	40010800 	.word	0x40010800
 80025a8:	40010c00 	.word	0x40010c00
 80025ac:	40011000 	.word	0x40011000
 80025b0:	40011400 	.word	0x40011400
 80025b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025b8:	4b0b      	ldr	r3, [pc, #44]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	43db      	mvns	r3, r3
 80025c0:	4909      	ldr	r1, [pc, #36]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 80025c2:	4013      	ands	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	3301      	adds	r3, #1
 80025ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d2:	fa22 f303 	lsr.w	r3, r2, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f47f ae8e 	bne.w	80022f8 <HAL_GPIO_Init+0x14>
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	372c      	adds	r7, #44	@ 0x2c
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr
 80025e8:	40010400 	.word	0x40010400

080025ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
 80025f8:	4613      	mov	r3, r2
 80025fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025fc:	787b      	ldrb	r3, [r7, #1]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002608:	e003      	b.n	8002612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	041a      	lsls	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	611a      	str	r2, [r3, #16]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002626:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002632:	4a05      	ldr	r2, [pc, #20]	@ (8002648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002638:	88fb      	ldrh	r3, [r7, #6]
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f806 	bl	800264c <HAL_GPIO_EXTI_Callback>
  }
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40010400 	.word	0x40010400

0800264c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e272      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8087 	beq.w	800278e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002680:	4b92      	ldr	r3, [pc, #584]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b04      	cmp	r3, #4
 800268a:	d00c      	beq.n	80026a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800268c:	4b8f      	ldr	r3, [pc, #572]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b08      	cmp	r3, #8
 8002696:	d112      	bne.n	80026be <HAL_RCC_OscConfig+0x5e>
 8002698:	4b8c      	ldr	r3, [pc, #560]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026a4:	d10b      	bne.n	80026be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a6:	4b89      	ldr	r3, [pc, #548]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d06c      	beq.n	800278c <HAL_RCC_OscConfig+0x12c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d168      	bne.n	800278c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e24c      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x76>
 80026c8:	4b80      	ldr	r3, [pc, #512]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a7f      	ldr	r2, [pc, #508]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	e02e      	b.n	8002734 <HAL_RCC_OscConfig+0xd4>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x98>
 80026de:	4b7b      	ldr	r3, [pc, #492]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a7a      	ldr	r2, [pc, #488]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b78      	ldr	r3, [pc, #480]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a77      	ldr	r2, [pc, #476]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80026f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e01d      	b.n	8002734 <HAL_RCC_OscConfig+0xd4>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0xbc>
 8002702:	4b72      	ldr	r3, [pc, #456]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a71      	ldr	r2, [pc, #452]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b6f      	ldr	r3, [pc, #444]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6e      	ldr	r2, [pc, #440]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0xd4>
 800271c:	4b6b      	ldr	r3, [pc, #428]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a6a      	ldr	r2, [pc, #424]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b68      	ldr	r3, [pc, #416]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a67      	ldr	r2, [pc, #412]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800272e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002732:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe ffbc 	bl	80016b8 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7fe ffb8 	bl	80016b8 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	@ 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e200      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b5d      	ldr	r3, [pc, #372]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0xe4>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fe ffa8 	bl	80016b8 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7fe ffa4 	bl	80016b8 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	@ 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1ec      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277e:	4b53      	ldr	r3, [pc, #332]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x10c>
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d063      	beq.n	8002862 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800279a:	4b4c      	ldr	r3, [pc, #304]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80027a6:	4b49      	ldr	r3, [pc, #292]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d11c      	bne.n	80027ec <HAL_RCC_OscConfig+0x18c>
 80027b2:	4b46      	ldr	r3, [pc, #280]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d116      	bne.n	80027ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	4b43      	ldr	r3, [pc, #268]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x176>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e1c0      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	4b3d      	ldr	r3, [pc, #244]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4939      	ldr	r1, [pc, #228]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	e03a      	b.n	8002862 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f4:	4b36      	ldr	r3, [pc, #216]	@ (80028d0 <HAL_RCC_OscConfig+0x270>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fa:	f7fe ff5d 	bl	80016b8 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002802:	f7fe ff59 	bl	80016b8 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1a1      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002814:	4b2d      	ldr	r3, [pc, #180]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4b2a      	ldr	r3, [pc, #168]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4927      	ldr	r1, [pc, #156]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e015      	b.n	8002862 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002836:	4b26      	ldr	r3, [pc, #152]	@ (80028d0 <HAL_RCC_OscConfig+0x270>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7fe ff3c 	bl	80016b8 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002844:	f7fe ff38 	bl	80016b8 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e180      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	4b1d      	ldr	r3, [pc, #116]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d03a      	beq.n	80028e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d019      	beq.n	80028aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002876:	4b17      	ldr	r3, [pc, #92]	@ (80028d4 <HAL_RCC_OscConfig+0x274>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287c:	f7fe ff1c 	bl	80016b8 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002884:	f7fe ff18 	bl	80016b8 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e160      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <HAL_RCC_OscConfig+0x26c>)
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80028a2:	2001      	movs	r0, #1
 80028a4:	f000 face 	bl	8002e44 <RCC_Delay>
 80028a8:	e01c      	b.n	80028e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028aa:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <HAL_RCC_OscConfig+0x274>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b0:	f7fe ff02 	bl	80016b8 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b6:	e00f      	b.n	80028d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b8:	f7fe fefe 	bl	80016b8 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d908      	bls.n	80028d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e146      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	42420000 	.word	0x42420000
 80028d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	4b92      	ldr	r3, [pc, #584]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1e9      	bne.n	80028b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80a6 	beq.w	8002a3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10d      	bne.n	800291e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	4b88      	ldr	r3, [pc, #544]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	4a87      	ldr	r2, [pc, #540]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800290c:	61d3      	str	r3, [r2, #28]
 800290e:	4b85      	ldr	r3, [pc, #532]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291a:	2301      	movs	r3, #1
 800291c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291e:	4b82      	ldr	r3, [pc, #520]	@ (8002b28 <HAL_RCC_OscConfig+0x4c8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d118      	bne.n	800295c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b28 <HAL_RCC_OscConfig+0x4c8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b28 <HAL_RCC_OscConfig+0x4c8>)
 8002930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002936:	f7fe febf 	bl	80016b8 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293e:	f7fe febb 	bl	80016b8 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b64      	cmp	r3, #100	@ 0x64
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e103      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002950:	4b75      	ldr	r3, [pc, #468]	@ (8002b28 <HAL_RCC_OscConfig+0x4c8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x312>
 8002964:	4b6f      	ldr	r3, [pc, #444]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4a6e      	ldr	r2, [pc, #440]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6213      	str	r3, [r2, #32]
 8002970:	e02d      	b.n	80029ce <HAL_RCC_OscConfig+0x36e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0x334>
 800297a:	4b6a      	ldr	r3, [pc, #424]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a69      	ldr	r2, [pc, #420]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	6213      	str	r3, [r2, #32]
 8002986:	4b67      	ldr	r3, [pc, #412]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4a66      	ldr	r2, [pc, #408]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 800298c:	f023 0304 	bic.w	r3, r3, #4
 8002990:	6213      	str	r3, [r2, #32]
 8002992:	e01c      	b.n	80029ce <HAL_RCC_OscConfig+0x36e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b05      	cmp	r3, #5
 800299a:	d10c      	bne.n	80029b6 <HAL_RCC_OscConfig+0x356>
 800299c:	4b61      	ldr	r3, [pc, #388]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4a60      	ldr	r2, [pc, #384]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	6213      	str	r3, [r2, #32]
 80029a8:	4b5e      	ldr	r3, [pc, #376]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	4a5d      	ldr	r2, [pc, #372]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6213      	str	r3, [r2, #32]
 80029b4:	e00b      	b.n	80029ce <HAL_RCC_OscConfig+0x36e>
 80029b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	4a5a      	ldr	r2, [pc, #360]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	f023 0301 	bic.w	r3, r3, #1
 80029c0:	6213      	str	r3, [r2, #32]
 80029c2:	4b58      	ldr	r3, [pc, #352]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	4a57      	ldr	r2, [pc, #348]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	f023 0304 	bic.w	r3, r3, #4
 80029cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d015      	beq.n	8002a02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d6:	f7fe fe6f 	bl	80016b8 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029dc:	e00a      	b.n	80029f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f7fe fe6b 	bl	80016b8 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e0b1      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0ee      	beq.n	80029de <HAL_RCC_OscConfig+0x37e>
 8002a00:	e014      	b.n	8002a2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a02:	f7fe fe59 	bl	80016b8 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fe fe55 	bl	80016b8 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e09b      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a20:	4b40      	ldr	r3, [pc, #256]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ee      	bne.n	8002a0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d105      	bne.n	8002a3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a32:	4b3c      	ldr	r3, [pc, #240]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4a3b      	ldr	r2, [pc, #236]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8087 	beq.w	8002b56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a48:	4b36      	ldr	r3, [pc, #216]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d061      	beq.n	8002b18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d146      	bne.n	8002aea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5c:	4b33      	ldr	r3, [pc, #204]	@ (8002b2c <HAL_RCC_OscConfig+0x4cc>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7fe fe29 	bl	80016b8 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6a:	f7fe fe25 	bl	80016b8 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e06d      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7c:	4b29      	ldr	r3, [pc, #164]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a90:	d108      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a92:	4b24      	ldr	r3, [pc, #144]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	4921      	ldr	r1, [pc, #132]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a19      	ldr	r1, [r3, #32]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	491b      	ldr	r1, [pc, #108]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b2c <HAL_RCC_OscConfig+0x4cc>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fe fdf9 	bl	80016b8 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fe fdf5 	bl	80016b8 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e03d      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002adc:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x46a>
 8002ae8:	e035      	b.n	8002b56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aea:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <HAL_RCC_OscConfig+0x4cc>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fde2 	bl	80016b8 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe fdde 	bl	80016b8 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e026      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b0a:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x498>
 8002b16:	e01e      	b.n	8002b56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e019      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b30:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <HAL_RCC_OscConfig+0x500>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000

08002b64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0d0      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b6a      	ldr	r3, [pc, #424]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d910      	bls.n	8002ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b67      	ldr	r3, [pc, #412]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 0207 	bic.w	r2, r3, #7
 8002b8e:	4965      	ldr	r1, [pc, #404]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b63      	ldr	r3, [pc, #396]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0b8      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc0:	4b59      	ldr	r3, [pc, #356]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4a58      	ldr	r2, [pc, #352]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd8:	4b53      	ldr	r3, [pc, #332]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002be2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be4:	4b50      	ldr	r3, [pc, #320]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	494d      	ldr	r1, [pc, #308]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d040      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b47      	ldr	r3, [pc, #284]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d115      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e07f      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b41      	ldr	r3, [pc, #260]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e073      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c32:	4b3d      	ldr	r3, [pc, #244]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e06b      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c42:	4b39      	ldr	r3, [pc, #228]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4936      	ldr	r1, [pc, #216]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c54:	f7fe fd30 	bl	80016b8 <HAL_GetTick>
 8002c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5c:	f7fe fd2c 	bl	80016b8 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e053      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	4b2d      	ldr	r3, [pc, #180]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 020c 	and.w	r2, r3, #12
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1eb      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c84:	4b27      	ldr	r3, [pc, #156]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d210      	bcs.n	8002cb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b24      	ldr	r3, [pc, #144]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 0207 	bic.w	r2, r3, #7
 8002c9a:	4922      	ldr	r1, [pc, #136]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b20      	ldr	r3, [pc, #128]	@ (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e032      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc0:	4b19      	ldr	r3, [pc, #100]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4916      	ldr	r1, [pc, #88]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cde:	4b12      	ldr	r3, [pc, #72]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	490e      	ldr	r1, [pc, #56]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cf2:	f000 f821 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	490a      	ldr	r1, [pc, #40]	@ (8002d2c <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	5ccb      	ldrb	r3, [r1, r3]
 8002d06:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0a:	4a09      	ldr	r2, [pc, #36]	@ (8002d30 <HAL_RCC_ClockConfig+0x1cc>)
 8002d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d0e:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <HAL_RCC_ClockConfig+0x1d0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fc8e 	bl	8001634 <HAL_InitTick>

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40022000 	.word	0x40022000
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	08005f1c 	.word	0x08005f1c
 8002d30:	20000000 	.word	0x20000000
 8002d34:	20000004 	.word	0x20000004

08002d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d52:	4b1e      	ldr	r3, [pc, #120]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x94>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d002      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x30>
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d003      	beq.n	8002d6e <HAL_RCC_GetSysClockFreq+0x36>
 8002d66:	e027      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d68:	4b19      	ldr	r3, [pc, #100]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d6a:	613b      	str	r3, [r7, #16]
      break;
 8002d6c:	e027      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	0c9b      	lsrs	r3, r3, #18
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	4a17      	ldr	r2, [pc, #92]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d78:	5cd3      	ldrb	r3, [r2, r3]
 8002d7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d010      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d86:	4b11      	ldr	r3, [pc, #68]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x94>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	0c5b      	lsrs	r3, r3, #17
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	4a11      	ldr	r2, [pc, #68]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d92:	5cd3      	ldrb	r3, [r2, r3]
 8002d94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d9a:	fb03 f202 	mul.w	r2, r3, r2
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e004      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a0c      	ldr	r2, [pc, #48]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dac:	fb02 f303 	mul.w	r3, r2, r3
 8002db0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	613b      	str	r3, [r7, #16]
      break;
 8002db6:	e002      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002db8:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dba:	613b      	str	r3, [r7, #16]
      break;
 8002dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dbe:	693b      	ldr	r3, [r7, #16]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	007a1200 	.word	0x007a1200
 8002dd4:	08005f34 	.word	0x08005f34
 8002dd8:	08005f44 	.word	0x08005f44
 8002ddc:	003d0900 	.word	0x003d0900

08002de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de4:	4b02      	ldr	r3, [pc, #8]	@ (8002df0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002de6:	681b      	ldr	r3, [r3, #0]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	20000000 	.word	0x20000000

08002df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002df8:	f7ff fff2 	bl	8002de0 <HAL_RCC_GetHCLKFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4903      	ldr	r1, [pc, #12]	@ (8002e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e0a:	5ccb      	ldrb	r3, [r1, r3]
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000
 8002e18:	08005f2c 	.word	0x08005f2c

08002e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e20:	f7ff ffde 	bl	8002de0 <HAL_RCC_GetHCLKFreq>
 8002e24:	4602      	mov	r2, r0
 8002e26:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	0adb      	lsrs	r3, r3, #11
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	4903      	ldr	r1, [pc, #12]	@ (8002e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e32:	5ccb      	ldrb	r3, [r1, r3]
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	08005f2c 	.word	0x08005f2c

08002e44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e78 <RCC_Delay+0x34>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0a      	ldr	r2, [pc, #40]	@ (8002e7c <RCC_Delay+0x38>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0a5b      	lsrs	r3, r3, #9
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e60:	bf00      	nop
  }
  while (Delay --);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1e5a      	subs	r2, r3, #1
 8002e66:	60fa      	str	r2, [r7, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f9      	bne.n	8002e60 <RCC_Delay+0x1c>
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr
 8002e78:	20000000 	.word	0x20000000
 8002e7c:	10624dd3 	.word	0x10624dd3

08002e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d07d      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea0:	4b4f      	ldr	r3, [pc, #316]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10d      	bne.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eac:	4b4c      	ldr	r3, [pc, #304]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	4a4b      	ldr	r2, [pc, #300]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eb6:	61d3      	str	r3, [r2, #28]
 8002eb8:	4b49      	ldr	r3, [pc, #292]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec8:	4b46      	ldr	r3, [pc, #280]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d118      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed4:	4b43      	ldr	r3, [pc, #268]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a42      	ldr	r2, [pc, #264]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ede:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee0:	f7fe fbea 	bl	80016b8 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee6:	e008      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee8:	f7fe fbe6 	bl	80016b8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	@ 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e06d      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efa:	4b3a      	ldr	r3, [pc, #232]	@ (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f06:	4b36      	ldr	r3, [pc, #216]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d02e      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d027      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f24:	4b2e      	ldr	r3, [pc, #184]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f2c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f2e:	4b2e      	ldr	r3, [pc, #184]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f34:	4b2c      	ldr	r3, [pc, #176]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f3a:	4a29      	ldr	r2, [pc, #164]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d014      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7fe fbb5 	bl	80016b8 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7fe fbb1 	bl	80016b8 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e036      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f68:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ee      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f74:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4917      	ldr	r1, [pc, #92]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f86:	7dfb      	ldrb	r3, [r7, #23]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d105      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8c:	4b14      	ldr	r3, [pc, #80]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	4a13      	ldr	r2, [pc, #76]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	490b      	ldr	r1, [pc, #44]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d008      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fc2:	4b07      	ldr	r3, [pc, #28]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	4904      	ldr	r1, [pc, #16]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40007000 	.word	0x40007000
 8002fe8:	42420440 	.word	0x42420440

08002fec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	2300      	movs	r3, #0
 8003006:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b10      	cmp	r3, #16
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b10      	cmp	r3, #16
 8003012:	f200 808a 	bhi.w	800312a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d045      	beq.n	80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d075      	beq.n	800310e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003022:	e082      	b.n	800312a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003024:	4b46      	ldr	r3, [pc, #280]	@ (8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800302a:	4b45      	ldr	r3, [pc, #276]	@ (8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d07b      	beq.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	0c9b      	lsrs	r3, r3, #18
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	4a41      	ldr	r2, [pc, #260]	@ (8003144 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
 8003042:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d015      	beq.n	800307a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800304e:	4b3c      	ldr	r3, [pc, #240]	@ (8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	0c5b      	lsrs	r3, r3, #17
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	4a3b      	ldr	r2, [pc, #236]	@ (8003148 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800305a:	5cd3      	ldrb	r3, [r2, r3]
 800305c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00d      	beq.n	8003084 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003068:	4a38      	ldr	r2, [pc, #224]	@ (800314c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	e004      	b.n	8003084 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4a34      	ldr	r2, [pc, #208]	@ (8003150 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800307e:	fb02 f303 	mul.w	r3, r2, r3
 8003082:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003084:	4b2e      	ldr	r3, [pc, #184]	@ (8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800308c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003090:	d102      	bne.n	8003098 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	61bb      	str	r3, [r7, #24]
      break;
 8003096:	e04a      	b.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4a2d      	ldr	r2, [pc, #180]	@ (8003154 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	085b      	lsrs	r3, r3, #1
 80030a4:	61bb      	str	r3, [r7, #24]
      break;
 80030a6:	e042      	b.n	800312e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80030a8:	4b25      	ldr	r3, [pc, #148]	@ (8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030b8:	d108      	bne.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80030c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	e01f      	b.n	800310c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030d6:	d109      	bne.n	80030ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80030d8:	4b19      	ldr	r3, [pc, #100]	@ (8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80030e4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	e00f      	b.n	800310c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030f6:	d11c      	bne.n	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030f8:	4b11      	ldr	r3, [pc, #68]	@ (8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d016      	beq.n	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003104:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003108:	61bb      	str	r3, [r7, #24]
      break;
 800310a:	e012      	b.n	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800310c:	e011      	b.n	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800310e:	f7ff fe85 	bl	8002e1c <HAL_RCC_GetPCLK2Freq>
 8003112:	4602      	mov	r2, r0
 8003114:	4b0a      	ldr	r3, [pc, #40]	@ (8003140 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	0b9b      	lsrs	r3, r3, #14
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	3301      	adds	r3, #1
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	fbb2 f3f3 	udiv	r3, r2, r3
 8003126:	61bb      	str	r3, [r7, #24]
      break;
 8003128:	e004      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800312a:	bf00      	nop
 800312c:	e002      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800312e:	bf00      	nop
 8003130:	e000      	b.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003132:	bf00      	nop
    }
  }
  return (frequency);
 8003134:	69bb      	ldr	r3, [r7, #24]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000
 8003144:	08005f48 	.word	0x08005f48
 8003148:	08005f58 	.word	0x08005f58
 800314c:	007a1200 	.word	0x007a1200
 8003150:	003d0900 	.word	0x003d0900
 8003154:	aaaaaaab 	.word	0xaaaaaaab

08003158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e042      	b.n	80031f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fe f8e2 	bl	8001348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2224      	movs	r2, #36	@ 0x24
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800319a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f971 	bl	8003484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695a      	ldr	r2, [r3, #20]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	@ 0x28
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b20      	cmp	r3, #32
 8003216:	d175      	bne.n	8003304 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_UART_Transmit+0x2c>
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e06e      	b.n	8003306 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2221      	movs	r2, #33	@ 0x21
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003236:	f7fe fa3f 	bl	80016b8 <HAL_GetTick>
 800323a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	88fa      	ldrh	r2, [r7, #6]
 8003240:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	88fa      	ldrh	r2, [r7, #6]
 8003246:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003250:	d108      	bne.n	8003264 <HAL_UART_Transmit+0x6c>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d104      	bne.n	8003264 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	61bb      	str	r3, [r7, #24]
 8003262:	e003      	b.n	800326c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003268:	2300      	movs	r3, #0
 800326a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800326c:	e02e      	b.n	80032cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	2180      	movs	r1, #128	@ 0x80
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f848 	bl	800330e <UART_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e03a      	b.n	8003306 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10b      	bne.n	80032ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	3302      	adds	r3, #2
 80032aa:	61bb      	str	r3, [r7, #24]
 80032ac:	e007      	b.n	80032be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	781a      	ldrb	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	3301      	adds	r3, #1
 80032bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1cb      	bne.n	800326e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2200      	movs	r2, #0
 80032de:	2140      	movs	r1, #64	@ 0x40
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f814 	bl	800330e <UART_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e006      	b.n	8003306 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	e000      	b.n	8003306 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
  }
}
 8003306:	4618      	mov	r0, r3
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	4613      	mov	r3, r2
 800331c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800331e:	e03b      	b.n	8003398 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003326:	d037      	beq.n	8003398 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003328:	f7fe f9c6 	bl	80016b8 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	6a3a      	ldr	r2, [r7, #32]
 8003334:	429a      	cmp	r2, r3
 8003336:	d302      	bcc.n	800333e <UART_WaitOnFlagUntilTimeout+0x30>
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e03a      	b.n	80033b8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d023      	beq.n	8003398 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b80      	cmp	r3, #128	@ 0x80
 8003354:	d020      	beq.n	8003398 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b40      	cmp	r3, #64	@ 0x40
 800335a:	d01d      	beq.n	8003398 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b08      	cmp	r3, #8
 8003368:	d116      	bne.n	8003398 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f81d 	bl	80033c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2208      	movs	r2, #8
 800338a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e00f      	b.n	80033b8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4013      	ands	r3, r2
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d0b4      	beq.n	8003320 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b095      	sub	sp, #84	@ 0x54
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	330c      	adds	r3, #12
 80033ce:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d2:	e853 3f00 	ldrex	r3, [r3]
 80033d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	330c      	adds	r3, #12
 80033e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80033ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033f0:	e841 2300 	strex	r3, r2, [r1]
 80033f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e5      	bne.n	80033c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3314      	adds	r3, #20
 8003402:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	61fb      	str	r3, [r7, #28]
   return(result);
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3314      	adds	r3, #20
 800341a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800341c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800341e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e5      	bne.n	80033fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003434:	2b01      	cmp	r3, #1
 8003436:	d119      	bne.n	800346c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	e853 3f00 	ldrex	r3, [r3]
 8003446:	60bb      	str	r3, [r7, #8]
   return(result);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f023 0310 	bic.w	r3, r3, #16
 800344e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	330c      	adds	r3, #12
 8003456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003458:	61ba      	str	r2, [r7, #24]
 800345a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345c:	6979      	ldr	r1, [r7, #20]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	e841 2300 	strex	r3, r2, [r1]
 8003464:	613b      	str	r3, [r7, #16]
   return(result);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e5      	bne.n	8003438 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800347a:	bf00      	nop
 800347c:	3754      	adds	r7, #84	@ 0x54
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80034be:	f023 030c 	bic.w	r3, r3, #12
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003598 <UART_SetConfig+0x114>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d103      	bne.n	80034f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034ec:	f7ff fc96 	bl	8002e1c <HAL_RCC_GetPCLK2Freq>
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	e002      	b.n	80034fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034f4:	f7ff fc7e 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 80034f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009a      	lsls	r2, r3, #2
 8003504:	441a      	add	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	4a22      	ldr	r2, [pc, #136]	@ (800359c <UART_SetConfig+0x118>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	0119      	lsls	r1, r3, #4
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	009a      	lsls	r2, r3, #2
 8003524:	441a      	add	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003530:	4b1a      	ldr	r3, [pc, #104]	@ (800359c <UART_SetConfig+0x118>)
 8003532:	fba3 0302 	umull	r0, r3, r3, r2
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	2064      	movs	r0, #100	@ 0x64
 800353a:	fb00 f303 	mul.w	r3, r0, r3
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	3332      	adds	r3, #50	@ 0x32
 8003544:	4a15      	ldr	r2, [pc, #84]	@ (800359c <UART_SetConfig+0x118>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003550:	4419      	add	r1, r3
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009a      	lsls	r2, r3, #2
 800355c:	441a      	add	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	fbb2 f2f3 	udiv	r2, r2, r3
 8003568:	4b0c      	ldr	r3, [pc, #48]	@ (800359c <UART_SetConfig+0x118>)
 800356a:	fba3 0302 	umull	r0, r3, r3, r2
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2064      	movs	r0, #100	@ 0x64
 8003572:	fb00 f303 	mul.w	r3, r0, r3
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	3332      	adds	r3, #50	@ 0x32
 800357c:	4a07      	ldr	r2, [pc, #28]	@ (800359c <UART_SetConfig+0x118>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	f003 020f 	and.w	r2, r3, #15
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	440a      	add	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40013800 	.word	0x40013800
 800359c:	51eb851f 	.word	0x51eb851f

080035a0 <__cvt>:
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035a6:	461d      	mov	r5, r3
 80035a8:	bfbb      	ittet	lt
 80035aa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80035ae:	461d      	movlt	r5, r3
 80035b0:	2300      	movge	r3, #0
 80035b2:	232d      	movlt	r3, #45	@ 0x2d
 80035b4:	b088      	sub	sp, #32
 80035b6:	4614      	mov	r4, r2
 80035b8:	bfb8      	it	lt
 80035ba:	4614      	movlt	r4, r2
 80035bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80035be:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80035c0:	7013      	strb	r3, [r2, #0]
 80035c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80035c4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80035c8:	f023 0820 	bic.w	r8, r3, #32
 80035cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80035d0:	d005      	beq.n	80035de <__cvt+0x3e>
 80035d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80035d6:	d100      	bne.n	80035da <__cvt+0x3a>
 80035d8:	3601      	adds	r6, #1
 80035da:	2302      	movs	r3, #2
 80035dc:	e000      	b.n	80035e0 <__cvt+0x40>
 80035de:	2303      	movs	r3, #3
 80035e0:	aa07      	add	r2, sp, #28
 80035e2:	9204      	str	r2, [sp, #16]
 80035e4:	aa06      	add	r2, sp, #24
 80035e6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80035ea:	e9cd 3600 	strd	r3, r6, [sp]
 80035ee:	4622      	mov	r2, r4
 80035f0:	462b      	mov	r3, r5
 80035f2:	f000 fdd5 	bl	80041a0 <_dtoa_r>
 80035f6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80035fa:	4607      	mov	r7, r0
 80035fc:	d119      	bne.n	8003632 <__cvt+0x92>
 80035fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003600:	07db      	lsls	r3, r3, #31
 8003602:	d50e      	bpl.n	8003622 <__cvt+0x82>
 8003604:	eb00 0906 	add.w	r9, r0, r6
 8003608:	2200      	movs	r2, #0
 800360a:	2300      	movs	r3, #0
 800360c:	4620      	mov	r0, r4
 800360e:	4629      	mov	r1, r5
 8003610:	f7fd f9ca 	bl	80009a8 <__aeabi_dcmpeq>
 8003614:	b108      	cbz	r0, 800361a <__cvt+0x7a>
 8003616:	f8cd 901c 	str.w	r9, [sp, #28]
 800361a:	2230      	movs	r2, #48	@ 0x30
 800361c:	9b07      	ldr	r3, [sp, #28]
 800361e:	454b      	cmp	r3, r9
 8003620:	d31e      	bcc.n	8003660 <__cvt+0xc0>
 8003622:	4638      	mov	r0, r7
 8003624:	9b07      	ldr	r3, [sp, #28]
 8003626:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003628:	1bdb      	subs	r3, r3, r7
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	b008      	add	sp, #32
 800362e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003632:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003636:	eb00 0906 	add.w	r9, r0, r6
 800363a:	d1e5      	bne.n	8003608 <__cvt+0x68>
 800363c:	7803      	ldrb	r3, [r0, #0]
 800363e:	2b30      	cmp	r3, #48	@ 0x30
 8003640:	d10a      	bne.n	8003658 <__cvt+0xb8>
 8003642:	2200      	movs	r2, #0
 8003644:	2300      	movs	r3, #0
 8003646:	4620      	mov	r0, r4
 8003648:	4629      	mov	r1, r5
 800364a:	f7fd f9ad 	bl	80009a8 <__aeabi_dcmpeq>
 800364e:	b918      	cbnz	r0, 8003658 <__cvt+0xb8>
 8003650:	f1c6 0601 	rsb	r6, r6, #1
 8003654:	f8ca 6000 	str.w	r6, [sl]
 8003658:	f8da 3000 	ldr.w	r3, [sl]
 800365c:	4499      	add	r9, r3
 800365e:	e7d3      	b.n	8003608 <__cvt+0x68>
 8003660:	1c59      	adds	r1, r3, #1
 8003662:	9107      	str	r1, [sp, #28]
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e7d9      	b.n	800361c <__cvt+0x7c>

08003668 <__exponent>:
 8003668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800366a:	2900      	cmp	r1, #0
 800366c:	bfb6      	itet	lt
 800366e:	232d      	movlt	r3, #45	@ 0x2d
 8003670:	232b      	movge	r3, #43	@ 0x2b
 8003672:	4249      	neglt	r1, r1
 8003674:	2909      	cmp	r1, #9
 8003676:	7002      	strb	r2, [r0, #0]
 8003678:	7043      	strb	r3, [r0, #1]
 800367a:	dd29      	ble.n	80036d0 <__exponent+0x68>
 800367c:	f10d 0307 	add.w	r3, sp, #7
 8003680:	461d      	mov	r5, r3
 8003682:	270a      	movs	r7, #10
 8003684:	fbb1 f6f7 	udiv	r6, r1, r7
 8003688:	461a      	mov	r2, r3
 800368a:	fb07 1416 	mls	r4, r7, r6, r1
 800368e:	3430      	adds	r4, #48	@ 0x30
 8003690:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003694:	460c      	mov	r4, r1
 8003696:	2c63      	cmp	r4, #99	@ 0x63
 8003698:	4631      	mov	r1, r6
 800369a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800369e:	dcf1      	bgt.n	8003684 <__exponent+0x1c>
 80036a0:	3130      	adds	r1, #48	@ 0x30
 80036a2:	1e94      	subs	r4, r2, #2
 80036a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80036a8:	4623      	mov	r3, r4
 80036aa:	1c41      	adds	r1, r0, #1
 80036ac:	42ab      	cmp	r3, r5
 80036ae:	d30a      	bcc.n	80036c6 <__exponent+0x5e>
 80036b0:	f10d 0309 	add.w	r3, sp, #9
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	42ac      	cmp	r4, r5
 80036b8:	bf88      	it	hi
 80036ba:	2300      	movhi	r3, #0
 80036bc:	3302      	adds	r3, #2
 80036be:	4403      	add	r3, r0
 80036c0:	1a18      	subs	r0, r3, r0
 80036c2:	b003      	add	sp, #12
 80036c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80036ca:	f801 6f01 	strb.w	r6, [r1, #1]!
 80036ce:	e7ed      	b.n	80036ac <__exponent+0x44>
 80036d0:	2330      	movs	r3, #48	@ 0x30
 80036d2:	3130      	adds	r1, #48	@ 0x30
 80036d4:	7083      	strb	r3, [r0, #2]
 80036d6:	70c1      	strb	r1, [r0, #3]
 80036d8:	1d03      	adds	r3, r0, #4
 80036da:	e7f1      	b.n	80036c0 <__exponent+0x58>

080036dc <_printf_float>:
 80036dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e0:	b091      	sub	sp, #68	@ 0x44
 80036e2:	460c      	mov	r4, r1
 80036e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80036e8:	4616      	mov	r6, r2
 80036ea:	461f      	mov	r7, r3
 80036ec:	4605      	mov	r5, r0
 80036ee:	f000 fcbb 	bl	8004068 <_localeconv_r>
 80036f2:	6803      	ldr	r3, [r0, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	9308      	str	r3, [sp, #32]
 80036f8:	f7fc fd2a 	bl	8000150 <strlen>
 80036fc:	2300      	movs	r3, #0
 80036fe:	930e      	str	r3, [sp, #56]	@ 0x38
 8003700:	f8d8 3000 	ldr.w	r3, [r8]
 8003704:	9009      	str	r0, [sp, #36]	@ 0x24
 8003706:	3307      	adds	r3, #7
 8003708:	f023 0307 	bic.w	r3, r3, #7
 800370c:	f103 0208 	add.w	r2, r3, #8
 8003710:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003714:	f8d4 b000 	ldr.w	fp, [r4]
 8003718:	f8c8 2000 	str.w	r2, [r8]
 800371c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003720:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003724:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003726:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800372a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800372e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003732:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003736:	4b9c      	ldr	r3, [pc, #624]	@ (80039a8 <_printf_float+0x2cc>)
 8003738:	f7fd f968 	bl	8000a0c <__aeabi_dcmpun>
 800373c:	bb70      	cbnz	r0, 800379c <_printf_float+0xc0>
 800373e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003742:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003746:	4b98      	ldr	r3, [pc, #608]	@ (80039a8 <_printf_float+0x2cc>)
 8003748:	f7fd f942 	bl	80009d0 <__aeabi_dcmple>
 800374c:	bb30      	cbnz	r0, 800379c <_printf_float+0xc0>
 800374e:	2200      	movs	r2, #0
 8003750:	2300      	movs	r3, #0
 8003752:	4640      	mov	r0, r8
 8003754:	4649      	mov	r1, r9
 8003756:	f7fd f931 	bl	80009bc <__aeabi_dcmplt>
 800375a:	b110      	cbz	r0, 8003762 <_printf_float+0x86>
 800375c:	232d      	movs	r3, #45	@ 0x2d
 800375e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003762:	4a92      	ldr	r2, [pc, #584]	@ (80039ac <_printf_float+0x2d0>)
 8003764:	4b92      	ldr	r3, [pc, #584]	@ (80039b0 <_printf_float+0x2d4>)
 8003766:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800376a:	bf8c      	ite	hi
 800376c:	4690      	movhi	r8, r2
 800376e:	4698      	movls	r8, r3
 8003770:	2303      	movs	r3, #3
 8003772:	f04f 0900 	mov.w	r9, #0
 8003776:	6123      	str	r3, [r4, #16]
 8003778:	f02b 0304 	bic.w	r3, fp, #4
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	4633      	mov	r3, r6
 8003780:	4621      	mov	r1, r4
 8003782:	4628      	mov	r0, r5
 8003784:	9700      	str	r7, [sp, #0]
 8003786:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003788:	f000 f9d4 	bl	8003b34 <_printf_common>
 800378c:	3001      	adds	r0, #1
 800378e:	f040 8090 	bne.w	80038b2 <_printf_float+0x1d6>
 8003792:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003796:	b011      	add	sp, #68	@ 0x44
 8003798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800379c:	4642      	mov	r2, r8
 800379e:	464b      	mov	r3, r9
 80037a0:	4640      	mov	r0, r8
 80037a2:	4649      	mov	r1, r9
 80037a4:	f7fd f932 	bl	8000a0c <__aeabi_dcmpun>
 80037a8:	b148      	cbz	r0, 80037be <_printf_float+0xe2>
 80037aa:	464b      	mov	r3, r9
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bfb8      	it	lt
 80037b0:	232d      	movlt	r3, #45	@ 0x2d
 80037b2:	4a80      	ldr	r2, [pc, #512]	@ (80039b4 <_printf_float+0x2d8>)
 80037b4:	bfb8      	it	lt
 80037b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80037ba:	4b7f      	ldr	r3, [pc, #508]	@ (80039b8 <_printf_float+0x2dc>)
 80037bc:	e7d3      	b.n	8003766 <_printf_float+0x8a>
 80037be:	6863      	ldr	r3, [r4, #4]
 80037c0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	d13f      	bne.n	8003848 <_printf_float+0x16c>
 80037c8:	2306      	movs	r3, #6
 80037ca:	6063      	str	r3, [r4, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80037d2:	6023      	str	r3, [r4, #0]
 80037d4:	9206      	str	r2, [sp, #24]
 80037d6:	aa0e      	add	r2, sp, #56	@ 0x38
 80037d8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80037dc:	aa0d      	add	r2, sp, #52	@ 0x34
 80037de:	9203      	str	r2, [sp, #12]
 80037e0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80037e4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80037e8:	6863      	ldr	r3, [r4, #4]
 80037ea:	4642      	mov	r2, r8
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	4628      	mov	r0, r5
 80037f0:	464b      	mov	r3, r9
 80037f2:	910a      	str	r1, [sp, #40]	@ 0x28
 80037f4:	f7ff fed4 	bl	80035a0 <__cvt>
 80037f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80037fa:	4680      	mov	r8, r0
 80037fc:	2947      	cmp	r1, #71	@ 0x47
 80037fe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003800:	d128      	bne.n	8003854 <_printf_float+0x178>
 8003802:	1cc8      	adds	r0, r1, #3
 8003804:	db02      	blt.n	800380c <_printf_float+0x130>
 8003806:	6863      	ldr	r3, [r4, #4]
 8003808:	4299      	cmp	r1, r3
 800380a:	dd40      	ble.n	800388e <_printf_float+0x1b2>
 800380c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003810:	fa5f fa8a 	uxtb.w	sl, sl
 8003814:	4652      	mov	r2, sl
 8003816:	3901      	subs	r1, #1
 8003818:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800381c:	910d      	str	r1, [sp, #52]	@ 0x34
 800381e:	f7ff ff23 	bl	8003668 <__exponent>
 8003822:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003824:	4681      	mov	r9, r0
 8003826:	1813      	adds	r3, r2, r0
 8003828:	2a01      	cmp	r2, #1
 800382a:	6123      	str	r3, [r4, #16]
 800382c:	dc02      	bgt.n	8003834 <_printf_float+0x158>
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	07d2      	lsls	r2, r2, #31
 8003832:	d501      	bpl.n	8003838 <_printf_float+0x15c>
 8003834:	3301      	adds	r3, #1
 8003836:	6123      	str	r3, [r4, #16]
 8003838:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800383c:	2b00      	cmp	r3, #0
 800383e:	d09e      	beq.n	800377e <_printf_float+0xa2>
 8003840:	232d      	movs	r3, #45	@ 0x2d
 8003842:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003846:	e79a      	b.n	800377e <_printf_float+0xa2>
 8003848:	2947      	cmp	r1, #71	@ 0x47
 800384a:	d1bf      	bne.n	80037cc <_printf_float+0xf0>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1bd      	bne.n	80037cc <_printf_float+0xf0>
 8003850:	2301      	movs	r3, #1
 8003852:	e7ba      	b.n	80037ca <_printf_float+0xee>
 8003854:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003858:	d9dc      	bls.n	8003814 <_printf_float+0x138>
 800385a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800385e:	d118      	bne.n	8003892 <_printf_float+0x1b6>
 8003860:	2900      	cmp	r1, #0
 8003862:	6863      	ldr	r3, [r4, #4]
 8003864:	dd0b      	ble.n	800387e <_printf_float+0x1a2>
 8003866:	6121      	str	r1, [r4, #16]
 8003868:	b913      	cbnz	r3, 8003870 <_printf_float+0x194>
 800386a:	6822      	ldr	r2, [r4, #0]
 800386c:	07d0      	lsls	r0, r2, #31
 800386e:	d502      	bpl.n	8003876 <_printf_float+0x19a>
 8003870:	3301      	adds	r3, #1
 8003872:	440b      	add	r3, r1
 8003874:	6123      	str	r3, [r4, #16]
 8003876:	f04f 0900 	mov.w	r9, #0
 800387a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800387c:	e7dc      	b.n	8003838 <_printf_float+0x15c>
 800387e:	b913      	cbnz	r3, 8003886 <_printf_float+0x1aa>
 8003880:	6822      	ldr	r2, [r4, #0]
 8003882:	07d2      	lsls	r2, r2, #31
 8003884:	d501      	bpl.n	800388a <_printf_float+0x1ae>
 8003886:	3302      	adds	r3, #2
 8003888:	e7f4      	b.n	8003874 <_printf_float+0x198>
 800388a:	2301      	movs	r3, #1
 800388c:	e7f2      	b.n	8003874 <_printf_float+0x198>
 800388e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003894:	4299      	cmp	r1, r3
 8003896:	db05      	blt.n	80038a4 <_printf_float+0x1c8>
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	6121      	str	r1, [r4, #16]
 800389c:	07d8      	lsls	r0, r3, #31
 800389e:	d5ea      	bpl.n	8003876 <_printf_float+0x19a>
 80038a0:	1c4b      	adds	r3, r1, #1
 80038a2:	e7e7      	b.n	8003874 <_printf_float+0x198>
 80038a4:	2900      	cmp	r1, #0
 80038a6:	bfcc      	ite	gt
 80038a8:	2201      	movgt	r2, #1
 80038aa:	f1c1 0202 	rsble	r2, r1, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	e7e0      	b.n	8003874 <_printf_float+0x198>
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	055a      	lsls	r2, r3, #21
 80038b6:	d407      	bmi.n	80038c8 <_printf_float+0x1ec>
 80038b8:	6923      	ldr	r3, [r4, #16]
 80038ba:	4642      	mov	r2, r8
 80038bc:	4631      	mov	r1, r6
 80038be:	4628      	mov	r0, r5
 80038c0:	47b8      	blx	r7
 80038c2:	3001      	adds	r0, #1
 80038c4:	d12b      	bne.n	800391e <_printf_float+0x242>
 80038c6:	e764      	b.n	8003792 <_printf_float+0xb6>
 80038c8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80038cc:	f240 80dc 	bls.w	8003a88 <_printf_float+0x3ac>
 80038d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80038d4:	2200      	movs	r2, #0
 80038d6:	2300      	movs	r3, #0
 80038d8:	f7fd f866 	bl	80009a8 <__aeabi_dcmpeq>
 80038dc:	2800      	cmp	r0, #0
 80038de:	d033      	beq.n	8003948 <_printf_float+0x26c>
 80038e0:	2301      	movs	r3, #1
 80038e2:	4631      	mov	r1, r6
 80038e4:	4628      	mov	r0, r5
 80038e6:	4a35      	ldr	r2, [pc, #212]	@ (80039bc <_printf_float+0x2e0>)
 80038e8:	47b8      	blx	r7
 80038ea:	3001      	adds	r0, #1
 80038ec:	f43f af51 	beq.w	8003792 <_printf_float+0xb6>
 80038f0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80038f4:	4543      	cmp	r3, r8
 80038f6:	db02      	blt.n	80038fe <_printf_float+0x222>
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	07d8      	lsls	r0, r3, #31
 80038fc:	d50f      	bpl.n	800391e <_printf_float+0x242>
 80038fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003902:	4631      	mov	r1, r6
 8003904:	4628      	mov	r0, r5
 8003906:	47b8      	blx	r7
 8003908:	3001      	adds	r0, #1
 800390a:	f43f af42 	beq.w	8003792 <_printf_float+0xb6>
 800390e:	f04f 0900 	mov.w	r9, #0
 8003912:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003916:	f104 0a1a 	add.w	sl, r4, #26
 800391a:	45c8      	cmp	r8, r9
 800391c:	dc09      	bgt.n	8003932 <_printf_float+0x256>
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	079b      	lsls	r3, r3, #30
 8003922:	f100 8102 	bmi.w	8003b2a <_printf_float+0x44e>
 8003926:	68e0      	ldr	r0, [r4, #12]
 8003928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800392a:	4298      	cmp	r0, r3
 800392c:	bfb8      	it	lt
 800392e:	4618      	movlt	r0, r3
 8003930:	e731      	b.n	8003796 <_printf_float+0xba>
 8003932:	2301      	movs	r3, #1
 8003934:	4652      	mov	r2, sl
 8003936:	4631      	mov	r1, r6
 8003938:	4628      	mov	r0, r5
 800393a:	47b8      	blx	r7
 800393c:	3001      	adds	r0, #1
 800393e:	f43f af28 	beq.w	8003792 <_printf_float+0xb6>
 8003942:	f109 0901 	add.w	r9, r9, #1
 8003946:	e7e8      	b.n	800391a <_printf_float+0x23e>
 8003948:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800394a:	2b00      	cmp	r3, #0
 800394c:	dc38      	bgt.n	80039c0 <_printf_float+0x2e4>
 800394e:	2301      	movs	r3, #1
 8003950:	4631      	mov	r1, r6
 8003952:	4628      	mov	r0, r5
 8003954:	4a19      	ldr	r2, [pc, #100]	@ (80039bc <_printf_float+0x2e0>)
 8003956:	47b8      	blx	r7
 8003958:	3001      	adds	r0, #1
 800395a:	f43f af1a 	beq.w	8003792 <_printf_float+0xb6>
 800395e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003962:	ea59 0303 	orrs.w	r3, r9, r3
 8003966:	d102      	bne.n	800396e <_printf_float+0x292>
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	07d9      	lsls	r1, r3, #31
 800396c:	d5d7      	bpl.n	800391e <_printf_float+0x242>
 800396e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003972:	4631      	mov	r1, r6
 8003974:	4628      	mov	r0, r5
 8003976:	47b8      	blx	r7
 8003978:	3001      	adds	r0, #1
 800397a:	f43f af0a 	beq.w	8003792 <_printf_float+0xb6>
 800397e:	f04f 0a00 	mov.w	sl, #0
 8003982:	f104 0b1a 	add.w	fp, r4, #26
 8003986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003988:	425b      	negs	r3, r3
 800398a:	4553      	cmp	r3, sl
 800398c:	dc01      	bgt.n	8003992 <_printf_float+0x2b6>
 800398e:	464b      	mov	r3, r9
 8003990:	e793      	b.n	80038ba <_printf_float+0x1de>
 8003992:	2301      	movs	r3, #1
 8003994:	465a      	mov	r2, fp
 8003996:	4631      	mov	r1, r6
 8003998:	4628      	mov	r0, r5
 800399a:	47b8      	blx	r7
 800399c:	3001      	adds	r0, #1
 800399e:	f43f aef8 	beq.w	8003792 <_printf_float+0xb6>
 80039a2:	f10a 0a01 	add.w	sl, sl, #1
 80039a6:	e7ee      	b.n	8003986 <_printf_float+0x2aa>
 80039a8:	7fefffff 	.word	0x7fefffff
 80039ac:	08005f5e 	.word	0x08005f5e
 80039b0:	08005f5a 	.word	0x08005f5a
 80039b4:	08005f66 	.word	0x08005f66
 80039b8:	08005f62 	.word	0x08005f62
 80039bc:	08005f6a 	.word	0x08005f6a
 80039c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80039c2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80039c6:	4553      	cmp	r3, sl
 80039c8:	bfa8      	it	ge
 80039ca:	4653      	movge	r3, sl
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	4699      	mov	r9, r3
 80039d0:	dc36      	bgt.n	8003a40 <_printf_float+0x364>
 80039d2:	f04f 0b00 	mov.w	fp, #0
 80039d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039da:	f104 021a 	add.w	r2, r4, #26
 80039de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80039e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80039e2:	eba3 0309 	sub.w	r3, r3, r9
 80039e6:	455b      	cmp	r3, fp
 80039e8:	dc31      	bgt.n	8003a4e <_printf_float+0x372>
 80039ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80039ec:	459a      	cmp	sl, r3
 80039ee:	dc3a      	bgt.n	8003a66 <_printf_float+0x38a>
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	07da      	lsls	r2, r3, #31
 80039f4:	d437      	bmi.n	8003a66 <_printf_float+0x38a>
 80039f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80039f8:	ebaa 0903 	sub.w	r9, sl, r3
 80039fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80039fe:	ebaa 0303 	sub.w	r3, sl, r3
 8003a02:	4599      	cmp	r9, r3
 8003a04:	bfa8      	it	ge
 8003a06:	4699      	movge	r9, r3
 8003a08:	f1b9 0f00 	cmp.w	r9, #0
 8003a0c:	dc33      	bgt.n	8003a76 <_printf_float+0x39a>
 8003a0e:	f04f 0800 	mov.w	r8, #0
 8003a12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a16:	f104 0b1a 	add.w	fp, r4, #26
 8003a1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a1c:	ebaa 0303 	sub.w	r3, sl, r3
 8003a20:	eba3 0309 	sub.w	r3, r3, r9
 8003a24:	4543      	cmp	r3, r8
 8003a26:	f77f af7a 	ble.w	800391e <_printf_float+0x242>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	465a      	mov	r2, fp
 8003a2e:	4631      	mov	r1, r6
 8003a30:	4628      	mov	r0, r5
 8003a32:	47b8      	blx	r7
 8003a34:	3001      	adds	r0, #1
 8003a36:	f43f aeac 	beq.w	8003792 <_printf_float+0xb6>
 8003a3a:	f108 0801 	add.w	r8, r8, #1
 8003a3e:	e7ec      	b.n	8003a1a <_printf_float+0x33e>
 8003a40:	4642      	mov	r2, r8
 8003a42:	4631      	mov	r1, r6
 8003a44:	4628      	mov	r0, r5
 8003a46:	47b8      	blx	r7
 8003a48:	3001      	adds	r0, #1
 8003a4a:	d1c2      	bne.n	80039d2 <_printf_float+0x2f6>
 8003a4c:	e6a1      	b.n	8003792 <_printf_float+0xb6>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	4631      	mov	r1, r6
 8003a52:	4628      	mov	r0, r5
 8003a54:	920a      	str	r2, [sp, #40]	@ 0x28
 8003a56:	47b8      	blx	r7
 8003a58:	3001      	adds	r0, #1
 8003a5a:	f43f ae9a 	beq.w	8003792 <_printf_float+0xb6>
 8003a5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003a60:	f10b 0b01 	add.w	fp, fp, #1
 8003a64:	e7bb      	b.n	80039de <_printf_float+0x302>
 8003a66:	4631      	mov	r1, r6
 8003a68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	47b8      	blx	r7
 8003a70:	3001      	adds	r0, #1
 8003a72:	d1c0      	bne.n	80039f6 <_printf_float+0x31a>
 8003a74:	e68d      	b.n	8003792 <_printf_float+0xb6>
 8003a76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003a78:	464b      	mov	r3, r9
 8003a7a:	4631      	mov	r1, r6
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	4442      	add	r2, r8
 8003a80:	47b8      	blx	r7
 8003a82:	3001      	adds	r0, #1
 8003a84:	d1c3      	bne.n	8003a0e <_printf_float+0x332>
 8003a86:	e684      	b.n	8003792 <_printf_float+0xb6>
 8003a88:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003a8c:	f1ba 0f01 	cmp.w	sl, #1
 8003a90:	dc01      	bgt.n	8003a96 <_printf_float+0x3ba>
 8003a92:	07db      	lsls	r3, r3, #31
 8003a94:	d536      	bpl.n	8003b04 <_printf_float+0x428>
 8003a96:	2301      	movs	r3, #1
 8003a98:	4642      	mov	r2, r8
 8003a9a:	4631      	mov	r1, r6
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	47b8      	blx	r7
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	f43f ae76 	beq.w	8003792 <_printf_float+0xb6>
 8003aa6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003aaa:	4631      	mov	r1, r6
 8003aac:	4628      	mov	r0, r5
 8003aae:	47b8      	blx	r7
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	f43f ae6e 	beq.w	8003792 <_printf_float+0xb6>
 8003ab6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003aba:	2200      	movs	r2, #0
 8003abc:	2300      	movs	r3, #0
 8003abe:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003ac2:	f7fc ff71 	bl	80009a8 <__aeabi_dcmpeq>
 8003ac6:	b9c0      	cbnz	r0, 8003afa <_printf_float+0x41e>
 8003ac8:	4653      	mov	r3, sl
 8003aca:	f108 0201 	add.w	r2, r8, #1
 8003ace:	4631      	mov	r1, r6
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	47b8      	blx	r7
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	d10c      	bne.n	8003af2 <_printf_float+0x416>
 8003ad8:	e65b      	b.n	8003792 <_printf_float+0xb6>
 8003ada:	2301      	movs	r3, #1
 8003adc:	465a      	mov	r2, fp
 8003ade:	4631      	mov	r1, r6
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	47b8      	blx	r7
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	f43f ae54 	beq.w	8003792 <_printf_float+0xb6>
 8003aea:	f108 0801 	add.w	r8, r8, #1
 8003aee:	45d0      	cmp	r8, sl
 8003af0:	dbf3      	blt.n	8003ada <_printf_float+0x3fe>
 8003af2:	464b      	mov	r3, r9
 8003af4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003af8:	e6e0      	b.n	80038bc <_printf_float+0x1e0>
 8003afa:	f04f 0800 	mov.w	r8, #0
 8003afe:	f104 0b1a 	add.w	fp, r4, #26
 8003b02:	e7f4      	b.n	8003aee <_printf_float+0x412>
 8003b04:	2301      	movs	r3, #1
 8003b06:	4642      	mov	r2, r8
 8003b08:	e7e1      	b.n	8003ace <_printf_float+0x3f2>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	464a      	mov	r2, r9
 8003b0e:	4631      	mov	r1, r6
 8003b10:	4628      	mov	r0, r5
 8003b12:	47b8      	blx	r7
 8003b14:	3001      	adds	r0, #1
 8003b16:	f43f ae3c 	beq.w	8003792 <_printf_float+0xb6>
 8003b1a:	f108 0801 	add.w	r8, r8, #1
 8003b1e:	68e3      	ldr	r3, [r4, #12]
 8003b20:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003b22:	1a5b      	subs	r3, r3, r1
 8003b24:	4543      	cmp	r3, r8
 8003b26:	dcf0      	bgt.n	8003b0a <_printf_float+0x42e>
 8003b28:	e6fd      	b.n	8003926 <_printf_float+0x24a>
 8003b2a:	f04f 0800 	mov.w	r8, #0
 8003b2e:	f104 0919 	add.w	r9, r4, #25
 8003b32:	e7f4      	b.n	8003b1e <_printf_float+0x442>

08003b34 <_printf_common>:
 8003b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b38:	4616      	mov	r6, r2
 8003b3a:	4698      	mov	r8, r3
 8003b3c:	688a      	ldr	r2, [r1, #8]
 8003b3e:	690b      	ldr	r3, [r1, #16]
 8003b40:	4607      	mov	r7, r0
 8003b42:	4293      	cmp	r3, r2
 8003b44:	bfb8      	it	lt
 8003b46:	4613      	movlt	r3, r2
 8003b48:	6033      	str	r3, [r6, #0]
 8003b4a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b4e:	460c      	mov	r4, r1
 8003b50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b54:	b10a      	cbz	r2, 8003b5a <_printf_common+0x26>
 8003b56:	3301      	adds	r3, #1
 8003b58:	6033      	str	r3, [r6, #0]
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	0699      	lsls	r1, r3, #26
 8003b5e:	bf42      	ittt	mi
 8003b60:	6833      	ldrmi	r3, [r6, #0]
 8003b62:	3302      	addmi	r3, #2
 8003b64:	6033      	strmi	r3, [r6, #0]
 8003b66:	6825      	ldr	r5, [r4, #0]
 8003b68:	f015 0506 	ands.w	r5, r5, #6
 8003b6c:	d106      	bne.n	8003b7c <_printf_common+0x48>
 8003b6e:	f104 0a19 	add.w	sl, r4, #25
 8003b72:	68e3      	ldr	r3, [r4, #12]
 8003b74:	6832      	ldr	r2, [r6, #0]
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	42ab      	cmp	r3, r5
 8003b7a:	dc2b      	bgt.n	8003bd4 <_printf_common+0xa0>
 8003b7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b80:	6822      	ldr	r2, [r4, #0]
 8003b82:	3b00      	subs	r3, #0
 8003b84:	bf18      	it	ne
 8003b86:	2301      	movne	r3, #1
 8003b88:	0692      	lsls	r2, r2, #26
 8003b8a:	d430      	bmi.n	8003bee <_printf_common+0xba>
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	4638      	mov	r0, r7
 8003b90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b94:	47c8      	blx	r9
 8003b96:	3001      	adds	r0, #1
 8003b98:	d023      	beq.n	8003be2 <_printf_common+0xae>
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	6922      	ldr	r2, [r4, #16]
 8003b9e:	f003 0306 	and.w	r3, r3, #6
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	bf14      	ite	ne
 8003ba6:	2500      	movne	r5, #0
 8003ba8:	6833      	ldreq	r3, [r6, #0]
 8003baa:	f04f 0600 	mov.w	r6, #0
 8003bae:	bf08      	it	eq
 8003bb0:	68e5      	ldreq	r5, [r4, #12]
 8003bb2:	f104 041a 	add.w	r4, r4, #26
 8003bb6:	bf08      	it	eq
 8003bb8:	1aed      	subeq	r5, r5, r3
 8003bba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003bbe:	bf08      	it	eq
 8003bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	bfc4      	itt	gt
 8003bc8:	1a9b      	subgt	r3, r3, r2
 8003bca:	18ed      	addgt	r5, r5, r3
 8003bcc:	42b5      	cmp	r5, r6
 8003bce:	d11a      	bne.n	8003c06 <_printf_common+0xd2>
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	e008      	b.n	8003be6 <_printf_common+0xb2>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	4652      	mov	r2, sl
 8003bd8:	4641      	mov	r1, r8
 8003bda:	4638      	mov	r0, r7
 8003bdc:	47c8      	blx	r9
 8003bde:	3001      	adds	r0, #1
 8003be0:	d103      	bne.n	8003bea <_printf_common+0xb6>
 8003be2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bea:	3501      	adds	r5, #1
 8003bec:	e7c1      	b.n	8003b72 <_printf_common+0x3e>
 8003bee:	2030      	movs	r0, #48	@ 0x30
 8003bf0:	18e1      	adds	r1, r4, r3
 8003bf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003bfc:	4422      	add	r2, r4
 8003bfe:	3302      	adds	r3, #2
 8003c00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c04:	e7c2      	b.n	8003b8c <_printf_common+0x58>
 8003c06:	2301      	movs	r3, #1
 8003c08:	4622      	mov	r2, r4
 8003c0a:	4641      	mov	r1, r8
 8003c0c:	4638      	mov	r0, r7
 8003c0e:	47c8      	blx	r9
 8003c10:	3001      	adds	r0, #1
 8003c12:	d0e6      	beq.n	8003be2 <_printf_common+0xae>
 8003c14:	3601      	adds	r6, #1
 8003c16:	e7d9      	b.n	8003bcc <_printf_common+0x98>

08003c18 <_printf_i>:
 8003c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c1c:	7e0f      	ldrb	r7, [r1, #24]
 8003c1e:	4691      	mov	r9, r2
 8003c20:	2f78      	cmp	r7, #120	@ 0x78
 8003c22:	4680      	mov	r8, r0
 8003c24:	460c      	mov	r4, r1
 8003c26:	469a      	mov	sl, r3
 8003c28:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c2e:	d807      	bhi.n	8003c40 <_printf_i+0x28>
 8003c30:	2f62      	cmp	r7, #98	@ 0x62
 8003c32:	d80a      	bhi.n	8003c4a <_printf_i+0x32>
 8003c34:	2f00      	cmp	r7, #0
 8003c36:	f000 80d1 	beq.w	8003ddc <_printf_i+0x1c4>
 8003c3a:	2f58      	cmp	r7, #88	@ 0x58
 8003c3c:	f000 80b8 	beq.w	8003db0 <_printf_i+0x198>
 8003c40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c48:	e03a      	b.n	8003cc0 <_printf_i+0xa8>
 8003c4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c4e:	2b15      	cmp	r3, #21
 8003c50:	d8f6      	bhi.n	8003c40 <_printf_i+0x28>
 8003c52:	a101      	add	r1, pc, #4	@ (adr r1, 8003c58 <_printf_i+0x40>)
 8003c54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c58:	08003cb1 	.word	0x08003cb1
 8003c5c:	08003cc5 	.word	0x08003cc5
 8003c60:	08003c41 	.word	0x08003c41
 8003c64:	08003c41 	.word	0x08003c41
 8003c68:	08003c41 	.word	0x08003c41
 8003c6c:	08003c41 	.word	0x08003c41
 8003c70:	08003cc5 	.word	0x08003cc5
 8003c74:	08003c41 	.word	0x08003c41
 8003c78:	08003c41 	.word	0x08003c41
 8003c7c:	08003c41 	.word	0x08003c41
 8003c80:	08003c41 	.word	0x08003c41
 8003c84:	08003dc3 	.word	0x08003dc3
 8003c88:	08003cef 	.word	0x08003cef
 8003c8c:	08003d7d 	.word	0x08003d7d
 8003c90:	08003c41 	.word	0x08003c41
 8003c94:	08003c41 	.word	0x08003c41
 8003c98:	08003de5 	.word	0x08003de5
 8003c9c:	08003c41 	.word	0x08003c41
 8003ca0:	08003cef 	.word	0x08003cef
 8003ca4:	08003c41 	.word	0x08003c41
 8003ca8:	08003c41 	.word	0x08003c41
 8003cac:	08003d85 	.word	0x08003d85
 8003cb0:	6833      	ldr	r3, [r6, #0]
 8003cb2:	1d1a      	adds	r2, r3, #4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6032      	str	r2, [r6, #0]
 8003cb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e09c      	b.n	8003dfe <_printf_i+0x1e6>
 8003cc4:	6833      	ldr	r3, [r6, #0]
 8003cc6:	6820      	ldr	r0, [r4, #0]
 8003cc8:	1d19      	adds	r1, r3, #4
 8003cca:	6031      	str	r1, [r6, #0]
 8003ccc:	0606      	lsls	r6, r0, #24
 8003cce:	d501      	bpl.n	8003cd4 <_printf_i+0xbc>
 8003cd0:	681d      	ldr	r5, [r3, #0]
 8003cd2:	e003      	b.n	8003cdc <_printf_i+0xc4>
 8003cd4:	0645      	lsls	r5, r0, #25
 8003cd6:	d5fb      	bpl.n	8003cd0 <_printf_i+0xb8>
 8003cd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003cdc:	2d00      	cmp	r5, #0
 8003cde:	da03      	bge.n	8003ce8 <_printf_i+0xd0>
 8003ce0:	232d      	movs	r3, #45	@ 0x2d
 8003ce2:	426d      	negs	r5, r5
 8003ce4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ce8:	230a      	movs	r3, #10
 8003cea:	4858      	ldr	r0, [pc, #352]	@ (8003e4c <_printf_i+0x234>)
 8003cec:	e011      	b.n	8003d12 <_printf_i+0xfa>
 8003cee:	6821      	ldr	r1, [r4, #0]
 8003cf0:	6833      	ldr	r3, [r6, #0]
 8003cf2:	0608      	lsls	r0, r1, #24
 8003cf4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003cf8:	d402      	bmi.n	8003d00 <_printf_i+0xe8>
 8003cfa:	0649      	lsls	r1, r1, #25
 8003cfc:	bf48      	it	mi
 8003cfe:	b2ad      	uxthmi	r5, r5
 8003d00:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d02:	6033      	str	r3, [r6, #0]
 8003d04:	bf14      	ite	ne
 8003d06:	230a      	movne	r3, #10
 8003d08:	2308      	moveq	r3, #8
 8003d0a:	4850      	ldr	r0, [pc, #320]	@ (8003e4c <_printf_i+0x234>)
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d12:	6866      	ldr	r6, [r4, #4]
 8003d14:	2e00      	cmp	r6, #0
 8003d16:	60a6      	str	r6, [r4, #8]
 8003d18:	db05      	blt.n	8003d26 <_printf_i+0x10e>
 8003d1a:	6821      	ldr	r1, [r4, #0]
 8003d1c:	432e      	orrs	r6, r5
 8003d1e:	f021 0104 	bic.w	r1, r1, #4
 8003d22:	6021      	str	r1, [r4, #0]
 8003d24:	d04b      	beq.n	8003dbe <_printf_i+0x1a6>
 8003d26:	4616      	mov	r6, r2
 8003d28:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d2c:	fb03 5711 	mls	r7, r3, r1, r5
 8003d30:	5dc7      	ldrb	r7, [r0, r7]
 8003d32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d36:	462f      	mov	r7, r5
 8003d38:	42bb      	cmp	r3, r7
 8003d3a:	460d      	mov	r5, r1
 8003d3c:	d9f4      	bls.n	8003d28 <_printf_i+0x110>
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d10b      	bne.n	8003d5a <_printf_i+0x142>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	07df      	lsls	r7, r3, #31
 8003d46:	d508      	bpl.n	8003d5a <_printf_i+0x142>
 8003d48:	6923      	ldr	r3, [r4, #16]
 8003d4a:	6861      	ldr	r1, [r4, #4]
 8003d4c:	4299      	cmp	r1, r3
 8003d4e:	bfde      	ittt	le
 8003d50:	2330      	movle	r3, #48	@ 0x30
 8003d52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d56:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003d5a:	1b92      	subs	r2, r2, r6
 8003d5c:	6122      	str	r2, [r4, #16]
 8003d5e:	464b      	mov	r3, r9
 8003d60:	4621      	mov	r1, r4
 8003d62:	4640      	mov	r0, r8
 8003d64:	f8cd a000 	str.w	sl, [sp]
 8003d68:	aa03      	add	r2, sp, #12
 8003d6a:	f7ff fee3 	bl	8003b34 <_printf_common>
 8003d6e:	3001      	adds	r0, #1
 8003d70:	d14a      	bne.n	8003e08 <_printf_i+0x1f0>
 8003d72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d76:	b004      	add	sp, #16
 8003d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	f043 0320 	orr.w	r3, r3, #32
 8003d82:	6023      	str	r3, [r4, #0]
 8003d84:	2778      	movs	r7, #120	@ 0x78
 8003d86:	4832      	ldr	r0, [pc, #200]	@ (8003e50 <_printf_i+0x238>)
 8003d88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	6831      	ldr	r1, [r6, #0]
 8003d90:	061f      	lsls	r7, r3, #24
 8003d92:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d96:	d402      	bmi.n	8003d9e <_printf_i+0x186>
 8003d98:	065f      	lsls	r7, r3, #25
 8003d9a:	bf48      	it	mi
 8003d9c:	b2ad      	uxthmi	r5, r5
 8003d9e:	6031      	str	r1, [r6, #0]
 8003da0:	07d9      	lsls	r1, r3, #31
 8003da2:	bf44      	itt	mi
 8003da4:	f043 0320 	orrmi.w	r3, r3, #32
 8003da8:	6023      	strmi	r3, [r4, #0]
 8003daa:	b11d      	cbz	r5, 8003db4 <_printf_i+0x19c>
 8003dac:	2310      	movs	r3, #16
 8003dae:	e7ad      	b.n	8003d0c <_printf_i+0xf4>
 8003db0:	4826      	ldr	r0, [pc, #152]	@ (8003e4c <_printf_i+0x234>)
 8003db2:	e7e9      	b.n	8003d88 <_printf_i+0x170>
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	f023 0320 	bic.w	r3, r3, #32
 8003dba:	6023      	str	r3, [r4, #0]
 8003dbc:	e7f6      	b.n	8003dac <_printf_i+0x194>
 8003dbe:	4616      	mov	r6, r2
 8003dc0:	e7bd      	b.n	8003d3e <_printf_i+0x126>
 8003dc2:	6833      	ldr	r3, [r6, #0]
 8003dc4:	6825      	ldr	r5, [r4, #0]
 8003dc6:	1d18      	adds	r0, r3, #4
 8003dc8:	6961      	ldr	r1, [r4, #20]
 8003dca:	6030      	str	r0, [r6, #0]
 8003dcc:	062e      	lsls	r6, r5, #24
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	d501      	bpl.n	8003dd6 <_printf_i+0x1be>
 8003dd2:	6019      	str	r1, [r3, #0]
 8003dd4:	e002      	b.n	8003ddc <_printf_i+0x1c4>
 8003dd6:	0668      	lsls	r0, r5, #25
 8003dd8:	d5fb      	bpl.n	8003dd2 <_printf_i+0x1ba>
 8003dda:	8019      	strh	r1, [r3, #0]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	4616      	mov	r6, r2
 8003de0:	6123      	str	r3, [r4, #16]
 8003de2:	e7bc      	b.n	8003d5e <_printf_i+0x146>
 8003de4:	6833      	ldr	r3, [r6, #0]
 8003de6:	2100      	movs	r1, #0
 8003de8:	1d1a      	adds	r2, r3, #4
 8003dea:	6032      	str	r2, [r6, #0]
 8003dec:	681e      	ldr	r6, [r3, #0]
 8003dee:	6862      	ldr	r2, [r4, #4]
 8003df0:	4630      	mov	r0, r6
 8003df2:	f000 f93d 	bl	8004070 <memchr>
 8003df6:	b108      	cbz	r0, 8003dfc <_printf_i+0x1e4>
 8003df8:	1b80      	subs	r0, r0, r6
 8003dfa:	6060      	str	r0, [r4, #4]
 8003dfc:	6863      	ldr	r3, [r4, #4]
 8003dfe:	6123      	str	r3, [r4, #16]
 8003e00:	2300      	movs	r3, #0
 8003e02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e06:	e7aa      	b.n	8003d5e <_printf_i+0x146>
 8003e08:	4632      	mov	r2, r6
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	4640      	mov	r0, r8
 8003e0e:	6923      	ldr	r3, [r4, #16]
 8003e10:	47d0      	blx	sl
 8003e12:	3001      	adds	r0, #1
 8003e14:	d0ad      	beq.n	8003d72 <_printf_i+0x15a>
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	079b      	lsls	r3, r3, #30
 8003e1a:	d413      	bmi.n	8003e44 <_printf_i+0x22c>
 8003e1c:	68e0      	ldr	r0, [r4, #12]
 8003e1e:	9b03      	ldr	r3, [sp, #12]
 8003e20:	4298      	cmp	r0, r3
 8003e22:	bfb8      	it	lt
 8003e24:	4618      	movlt	r0, r3
 8003e26:	e7a6      	b.n	8003d76 <_printf_i+0x15e>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	4632      	mov	r2, r6
 8003e2c:	4649      	mov	r1, r9
 8003e2e:	4640      	mov	r0, r8
 8003e30:	47d0      	blx	sl
 8003e32:	3001      	adds	r0, #1
 8003e34:	d09d      	beq.n	8003d72 <_printf_i+0x15a>
 8003e36:	3501      	adds	r5, #1
 8003e38:	68e3      	ldr	r3, [r4, #12]
 8003e3a:	9903      	ldr	r1, [sp, #12]
 8003e3c:	1a5b      	subs	r3, r3, r1
 8003e3e:	42ab      	cmp	r3, r5
 8003e40:	dcf2      	bgt.n	8003e28 <_printf_i+0x210>
 8003e42:	e7eb      	b.n	8003e1c <_printf_i+0x204>
 8003e44:	2500      	movs	r5, #0
 8003e46:	f104 0619 	add.w	r6, r4, #25
 8003e4a:	e7f5      	b.n	8003e38 <_printf_i+0x220>
 8003e4c:	08005f6c 	.word	0x08005f6c
 8003e50:	08005f7d 	.word	0x08005f7d

08003e54 <std>:
 8003e54:	2300      	movs	r3, #0
 8003e56:	b510      	push	{r4, lr}
 8003e58:	4604      	mov	r4, r0
 8003e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8003e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e62:	6083      	str	r3, [r0, #8]
 8003e64:	8181      	strh	r1, [r0, #12]
 8003e66:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e68:	81c2      	strh	r2, [r0, #14]
 8003e6a:	6183      	str	r3, [r0, #24]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	2208      	movs	r2, #8
 8003e70:	305c      	adds	r0, #92	@ 0x5c
 8003e72:	f000 f8c3 	bl	8003ffc <memset>
 8003e76:	4b0d      	ldr	r3, [pc, #52]	@ (8003eac <std+0x58>)
 8003e78:	6224      	str	r4, [r4, #32]
 8003e7a:	6263      	str	r3, [r4, #36]	@ 0x24
 8003e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb0 <std+0x5c>)
 8003e7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e80:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <std+0x60>)
 8003e82:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e84:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb8 <std+0x64>)
 8003e86:	6323      	str	r3, [r4, #48]	@ 0x30
 8003e88:	4b0c      	ldr	r3, [pc, #48]	@ (8003ebc <std+0x68>)
 8003e8a:	429c      	cmp	r4, r3
 8003e8c:	d006      	beq.n	8003e9c <std+0x48>
 8003e8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e92:	4294      	cmp	r4, r2
 8003e94:	d002      	beq.n	8003e9c <std+0x48>
 8003e96:	33d0      	adds	r3, #208	@ 0xd0
 8003e98:	429c      	cmp	r4, r3
 8003e9a:	d105      	bne.n	8003ea8 <std+0x54>
 8003e9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ea4:	f000 b8dc 	b.w	8004060 <__retarget_lock_init_recursive>
 8003ea8:	bd10      	pop	{r4, pc}
 8003eaa:	bf00      	nop
 8003eac:	08005979 	.word	0x08005979
 8003eb0:	0800599b 	.word	0x0800599b
 8003eb4:	080059d3 	.word	0x080059d3
 8003eb8:	080059f7 	.word	0x080059f7
 8003ebc:	20000270 	.word	0x20000270

08003ec0 <stdio_exit_handler>:
 8003ec0:	4a02      	ldr	r2, [pc, #8]	@ (8003ecc <stdio_exit_handler+0xc>)
 8003ec2:	4903      	ldr	r1, [pc, #12]	@ (8003ed0 <stdio_exit_handler+0x10>)
 8003ec4:	4803      	ldr	r0, [pc, #12]	@ (8003ed4 <stdio_exit_handler+0x14>)
 8003ec6:	f000 b869 	b.w	8003f9c <_fwalk_sglue>
 8003eca:	bf00      	nop
 8003ecc:	2000000c 	.word	0x2000000c
 8003ed0:	0800521d 	.word	0x0800521d
 8003ed4:	2000001c 	.word	0x2000001c

08003ed8 <cleanup_stdio>:
 8003ed8:	6841      	ldr	r1, [r0, #4]
 8003eda:	4b0c      	ldr	r3, [pc, #48]	@ (8003f0c <cleanup_stdio+0x34>)
 8003edc:	b510      	push	{r4, lr}
 8003ede:	4299      	cmp	r1, r3
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	d001      	beq.n	8003ee8 <cleanup_stdio+0x10>
 8003ee4:	f001 f99a 	bl	800521c <_fflush_r>
 8003ee8:	68a1      	ldr	r1, [r4, #8]
 8003eea:	4b09      	ldr	r3, [pc, #36]	@ (8003f10 <cleanup_stdio+0x38>)
 8003eec:	4299      	cmp	r1, r3
 8003eee:	d002      	beq.n	8003ef6 <cleanup_stdio+0x1e>
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f001 f993 	bl	800521c <_fflush_r>
 8003ef6:	68e1      	ldr	r1, [r4, #12]
 8003ef8:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <cleanup_stdio+0x3c>)
 8003efa:	4299      	cmp	r1, r3
 8003efc:	d004      	beq.n	8003f08 <cleanup_stdio+0x30>
 8003efe:	4620      	mov	r0, r4
 8003f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f04:	f001 b98a 	b.w	800521c <_fflush_r>
 8003f08:	bd10      	pop	{r4, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000270 	.word	0x20000270
 8003f10:	200002d8 	.word	0x200002d8
 8003f14:	20000340 	.word	0x20000340

08003f18 <global_stdio_init.part.0>:
 8003f18:	b510      	push	{r4, lr}
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f48 <global_stdio_init.part.0+0x30>)
 8003f1c:	4c0b      	ldr	r4, [pc, #44]	@ (8003f4c <global_stdio_init.part.0+0x34>)
 8003f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8003f50 <global_stdio_init.part.0+0x38>)
 8003f20:	4620      	mov	r0, r4
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	2104      	movs	r1, #4
 8003f26:	2200      	movs	r2, #0
 8003f28:	f7ff ff94 	bl	8003e54 <std>
 8003f2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f30:	2201      	movs	r2, #1
 8003f32:	2109      	movs	r1, #9
 8003f34:	f7ff ff8e 	bl	8003e54 <std>
 8003f38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f42:	2112      	movs	r1, #18
 8003f44:	f7ff bf86 	b.w	8003e54 <std>
 8003f48:	200003a8 	.word	0x200003a8
 8003f4c:	20000270 	.word	0x20000270
 8003f50:	08003ec1 	.word	0x08003ec1

08003f54 <__sfp_lock_acquire>:
 8003f54:	4801      	ldr	r0, [pc, #4]	@ (8003f5c <__sfp_lock_acquire+0x8>)
 8003f56:	f000 b884 	b.w	8004062 <__retarget_lock_acquire_recursive>
 8003f5a:	bf00      	nop
 8003f5c:	200003ad 	.word	0x200003ad

08003f60 <__sfp_lock_release>:
 8003f60:	4801      	ldr	r0, [pc, #4]	@ (8003f68 <__sfp_lock_release+0x8>)
 8003f62:	f000 b87f 	b.w	8004064 <__retarget_lock_release_recursive>
 8003f66:	bf00      	nop
 8003f68:	200003ad 	.word	0x200003ad

08003f6c <__sinit>:
 8003f6c:	b510      	push	{r4, lr}
 8003f6e:	4604      	mov	r4, r0
 8003f70:	f7ff fff0 	bl	8003f54 <__sfp_lock_acquire>
 8003f74:	6a23      	ldr	r3, [r4, #32]
 8003f76:	b11b      	cbz	r3, 8003f80 <__sinit+0x14>
 8003f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f7c:	f7ff bff0 	b.w	8003f60 <__sfp_lock_release>
 8003f80:	4b04      	ldr	r3, [pc, #16]	@ (8003f94 <__sinit+0x28>)
 8003f82:	6223      	str	r3, [r4, #32]
 8003f84:	4b04      	ldr	r3, [pc, #16]	@ (8003f98 <__sinit+0x2c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f5      	bne.n	8003f78 <__sinit+0xc>
 8003f8c:	f7ff ffc4 	bl	8003f18 <global_stdio_init.part.0>
 8003f90:	e7f2      	b.n	8003f78 <__sinit+0xc>
 8003f92:	bf00      	nop
 8003f94:	08003ed9 	.word	0x08003ed9
 8003f98:	200003a8 	.word	0x200003a8

08003f9c <_fwalk_sglue>:
 8003f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fa0:	4607      	mov	r7, r0
 8003fa2:	4688      	mov	r8, r1
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	2600      	movs	r6, #0
 8003fa8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fac:	f1b9 0901 	subs.w	r9, r9, #1
 8003fb0:	d505      	bpl.n	8003fbe <_fwalk_sglue+0x22>
 8003fb2:	6824      	ldr	r4, [r4, #0]
 8003fb4:	2c00      	cmp	r4, #0
 8003fb6:	d1f7      	bne.n	8003fa8 <_fwalk_sglue+0xc>
 8003fb8:	4630      	mov	r0, r6
 8003fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fbe:	89ab      	ldrh	r3, [r5, #12]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d907      	bls.n	8003fd4 <_fwalk_sglue+0x38>
 8003fc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	d003      	beq.n	8003fd4 <_fwalk_sglue+0x38>
 8003fcc:	4629      	mov	r1, r5
 8003fce:	4638      	mov	r0, r7
 8003fd0:	47c0      	blx	r8
 8003fd2:	4306      	orrs	r6, r0
 8003fd4:	3568      	adds	r5, #104	@ 0x68
 8003fd6:	e7e9      	b.n	8003fac <_fwalk_sglue+0x10>

08003fd8 <iprintf>:
 8003fd8:	b40f      	push	{r0, r1, r2, r3}
 8003fda:	b507      	push	{r0, r1, r2, lr}
 8003fdc:	4906      	ldr	r1, [pc, #24]	@ (8003ff8 <iprintf+0x20>)
 8003fde:	ab04      	add	r3, sp, #16
 8003fe0:	6808      	ldr	r0, [r1, #0]
 8003fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fe6:	6881      	ldr	r1, [r0, #8]
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	f000 fed5 	bl	8004d98 <_vfiprintf_r>
 8003fee:	b003      	add	sp, #12
 8003ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ff4:	b004      	add	sp, #16
 8003ff6:	4770      	bx	lr
 8003ff8:	20000018 	.word	0x20000018

08003ffc <memset>:
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	4402      	add	r2, r0
 8004000:	4293      	cmp	r3, r2
 8004002:	d100      	bne.n	8004006 <memset+0xa>
 8004004:	4770      	bx	lr
 8004006:	f803 1b01 	strb.w	r1, [r3], #1
 800400a:	e7f9      	b.n	8004000 <memset+0x4>

0800400c <__errno>:
 800400c:	4b01      	ldr	r3, [pc, #4]	@ (8004014 <__errno+0x8>)
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20000018 	.word	0x20000018

08004018 <__libc_init_array>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	2600      	movs	r6, #0
 800401c:	4d0c      	ldr	r5, [pc, #48]	@ (8004050 <__libc_init_array+0x38>)
 800401e:	4c0d      	ldr	r4, [pc, #52]	@ (8004054 <__libc_init_array+0x3c>)
 8004020:	1b64      	subs	r4, r4, r5
 8004022:	10a4      	asrs	r4, r4, #2
 8004024:	42a6      	cmp	r6, r4
 8004026:	d109      	bne.n	800403c <__libc_init_array+0x24>
 8004028:	f001 ff5c 	bl	8005ee4 <_init>
 800402c:	2600      	movs	r6, #0
 800402e:	4d0a      	ldr	r5, [pc, #40]	@ (8004058 <__libc_init_array+0x40>)
 8004030:	4c0a      	ldr	r4, [pc, #40]	@ (800405c <__libc_init_array+0x44>)
 8004032:	1b64      	subs	r4, r4, r5
 8004034:	10a4      	asrs	r4, r4, #2
 8004036:	42a6      	cmp	r6, r4
 8004038:	d105      	bne.n	8004046 <__libc_init_array+0x2e>
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004040:	4798      	blx	r3
 8004042:	3601      	adds	r6, #1
 8004044:	e7ee      	b.n	8004024 <__libc_init_array+0xc>
 8004046:	f855 3b04 	ldr.w	r3, [r5], #4
 800404a:	4798      	blx	r3
 800404c:	3601      	adds	r6, #1
 800404e:	e7f2      	b.n	8004036 <__libc_init_array+0x1e>
 8004050:	080062d4 	.word	0x080062d4
 8004054:	080062d4 	.word	0x080062d4
 8004058:	080062d4 	.word	0x080062d4
 800405c:	080062d8 	.word	0x080062d8

08004060 <__retarget_lock_init_recursive>:
 8004060:	4770      	bx	lr

08004062 <__retarget_lock_acquire_recursive>:
 8004062:	4770      	bx	lr

08004064 <__retarget_lock_release_recursive>:
 8004064:	4770      	bx	lr
	...

08004068 <_localeconv_r>:
 8004068:	4800      	ldr	r0, [pc, #0]	@ (800406c <_localeconv_r+0x4>)
 800406a:	4770      	bx	lr
 800406c:	20000158 	.word	0x20000158

08004070 <memchr>:
 8004070:	4603      	mov	r3, r0
 8004072:	b510      	push	{r4, lr}
 8004074:	b2c9      	uxtb	r1, r1
 8004076:	4402      	add	r2, r0
 8004078:	4293      	cmp	r3, r2
 800407a:	4618      	mov	r0, r3
 800407c:	d101      	bne.n	8004082 <memchr+0x12>
 800407e:	2000      	movs	r0, #0
 8004080:	e003      	b.n	800408a <memchr+0x1a>
 8004082:	7804      	ldrb	r4, [r0, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	428c      	cmp	r4, r1
 8004088:	d1f6      	bne.n	8004078 <memchr+0x8>
 800408a:	bd10      	pop	{r4, pc}

0800408c <quorem>:
 800408c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004090:	6903      	ldr	r3, [r0, #16]
 8004092:	690c      	ldr	r4, [r1, #16]
 8004094:	4607      	mov	r7, r0
 8004096:	42a3      	cmp	r3, r4
 8004098:	db7e      	blt.n	8004198 <quorem+0x10c>
 800409a:	3c01      	subs	r4, #1
 800409c:	00a3      	lsls	r3, r4, #2
 800409e:	f100 0514 	add.w	r5, r0, #20
 80040a2:	f101 0814 	add.w	r8, r1, #20
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80040b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80040b6:	3301      	adds	r3, #1
 80040b8:	429a      	cmp	r2, r3
 80040ba:	fbb2 f6f3 	udiv	r6, r2, r3
 80040be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80040c2:	d32e      	bcc.n	8004122 <quorem+0x96>
 80040c4:	f04f 0a00 	mov.w	sl, #0
 80040c8:	46c4      	mov	ip, r8
 80040ca:	46ae      	mov	lr, r5
 80040cc:	46d3      	mov	fp, sl
 80040ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 80040d2:	b298      	uxth	r0, r3
 80040d4:	fb06 a000 	mla	r0, r6, r0, sl
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	0c02      	lsrs	r2, r0, #16
 80040dc:	fb06 2303 	mla	r3, r6, r3, r2
 80040e0:	f8de 2000 	ldr.w	r2, [lr]
 80040e4:	b280      	uxth	r0, r0
 80040e6:	b292      	uxth	r2, r2
 80040e8:	1a12      	subs	r2, r2, r0
 80040ea:	445a      	add	r2, fp
 80040ec:	f8de 0000 	ldr.w	r0, [lr]
 80040f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80040fa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80040fe:	b292      	uxth	r2, r2
 8004100:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004104:	45e1      	cmp	r9, ip
 8004106:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800410a:	f84e 2b04 	str.w	r2, [lr], #4
 800410e:	d2de      	bcs.n	80040ce <quorem+0x42>
 8004110:	9b00      	ldr	r3, [sp, #0]
 8004112:	58eb      	ldr	r3, [r5, r3]
 8004114:	b92b      	cbnz	r3, 8004122 <quorem+0x96>
 8004116:	9b01      	ldr	r3, [sp, #4]
 8004118:	3b04      	subs	r3, #4
 800411a:	429d      	cmp	r5, r3
 800411c:	461a      	mov	r2, r3
 800411e:	d32f      	bcc.n	8004180 <quorem+0xf4>
 8004120:	613c      	str	r4, [r7, #16]
 8004122:	4638      	mov	r0, r7
 8004124:	f001 fb20 	bl	8005768 <__mcmp>
 8004128:	2800      	cmp	r0, #0
 800412a:	db25      	blt.n	8004178 <quorem+0xec>
 800412c:	4629      	mov	r1, r5
 800412e:	2000      	movs	r0, #0
 8004130:	f858 2b04 	ldr.w	r2, [r8], #4
 8004134:	f8d1 c000 	ldr.w	ip, [r1]
 8004138:	fa1f fe82 	uxth.w	lr, r2
 800413c:	fa1f f38c 	uxth.w	r3, ip
 8004140:	eba3 030e 	sub.w	r3, r3, lr
 8004144:	4403      	add	r3, r0
 8004146:	0c12      	lsrs	r2, r2, #16
 8004148:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800414c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004150:	b29b      	uxth	r3, r3
 8004152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004156:	45c1      	cmp	r9, r8
 8004158:	ea4f 4022 	mov.w	r0, r2, asr #16
 800415c:	f841 3b04 	str.w	r3, [r1], #4
 8004160:	d2e6      	bcs.n	8004130 <quorem+0xa4>
 8004162:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004166:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800416a:	b922      	cbnz	r2, 8004176 <quorem+0xea>
 800416c:	3b04      	subs	r3, #4
 800416e:	429d      	cmp	r5, r3
 8004170:	461a      	mov	r2, r3
 8004172:	d30b      	bcc.n	800418c <quorem+0x100>
 8004174:	613c      	str	r4, [r7, #16]
 8004176:	3601      	adds	r6, #1
 8004178:	4630      	mov	r0, r6
 800417a:	b003      	add	sp, #12
 800417c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	3b04      	subs	r3, #4
 8004184:	2a00      	cmp	r2, #0
 8004186:	d1cb      	bne.n	8004120 <quorem+0x94>
 8004188:	3c01      	subs	r4, #1
 800418a:	e7c6      	b.n	800411a <quorem+0x8e>
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	3b04      	subs	r3, #4
 8004190:	2a00      	cmp	r2, #0
 8004192:	d1ef      	bne.n	8004174 <quorem+0xe8>
 8004194:	3c01      	subs	r4, #1
 8004196:	e7ea      	b.n	800416e <quorem+0xe2>
 8004198:	2000      	movs	r0, #0
 800419a:	e7ee      	b.n	800417a <quorem+0xee>
 800419c:	0000      	movs	r0, r0
	...

080041a0 <_dtoa_r>:
 80041a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a4:	4614      	mov	r4, r2
 80041a6:	461d      	mov	r5, r3
 80041a8:	69c7      	ldr	r7, [r0, #28]
 80041aa:	b097      	sub	sp, #92	@ 0x5c
 80041ac:	4681      	mov	r9, r0
 80041ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80041b2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80041b4:	b97f      	cbnz	r7, 80041d6 <_dtoa_r+0x36>
 80041b6:	2010      	movs	r0, #16
 80041b8:	f000 ff06 	bl	8004fc8 <malloc>
 80041bc:	4602      	mov	r2, r0
 80041be:	f8c9 001c 	str.w	r0, [r9, #28]
 80041c2:	b920      	cbnz	r0, 80041ce <_dtoa_r+0x2e>
 80041c4:	21ef      	movs	r1, #239	@ 0xef
 80041c6:	4bac      	ldr	r3, [pc, #688]	@ (8004478 <_dtoa_r+0x2d8>)
 80041c8:	48ac      	ldr	r0, [pc, #688]	@ (800447c <_dtoa_r+0x2dc>)
 80041ca:	f001 fd95 	bl	8005cf8 <__assert_func>
 80041ce:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80041d2:	6007      	str	r7, [r0, #0]
 80041d4:	60c7      	str	r7, [r0, #12]
 80041d6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80041da:	6819      	ldr	r1, [r3, #0]
 80041dc:	b159      	cbz	r1, 80041f6 <_dtoa_r+0x56>
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	2301      	movs	r3, #1
 80041e2:	4093      	lsls	r3, r2
 80041e4:	604a      	str	r2, [r1, #4]
 80041e6:	608b      	str	r3, [r1, #8]
 80041e8:	4648      	mov	r0, r9
 80041ea:	f001 f88b 	bl	8005304 <_Bfree>
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	1e2b      	subs	r3, r5, #0
 80041f8:	bfaf      	iteee	ge
 80041fa:	2300      	movge	r3, #0
 80041fc:	2201      	movlt	r2, #1
 80041fe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004202:	9307      	strlt	r3, [sp, #28]
 8004204:	bfa8      	it	ge
 8004206:	6033      	strge	r3, [r6, #0]
 8004208:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800420c:	4b9c      	ldr	r3, [pc, #624]	@ (8004480 <_dtoa_r+0x2e0>)
 800420e:	bfb8      	it	lt
 8004210:	6032      	strlt	r2, [r6, #0]
 8004212:	ea33 0308 	bics.w	r3, r3, r8
 8004216:	d112      	bne.n	800423e <_dtoa_r+0x9e>
 8004218:	f242 730f 	movw	r3, #9999	@ 0x270f
 800421c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004224:	4323      	orrs	r3, r4
 8004226:	f000 855e 	beq.w	8004ce6 <_dtoa_r+0xb46>
 800422a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800422c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004484 <_dtoa_r+0x2e4>
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8560 	beq.w	8004cf6 <_dtoa_r+0xb56>
 8004236:	f10a 0303 	add.w	r3, sl, #3
 800423a:	f000 bd5a 	b.w	8004cf2 <_dtoa_r+0xb52>
 800423e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004242:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004246:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800424a:	2200      	movs	r2, #0
 800424c:	2300      	movs	r3, #0
 800424e:	f7fc fbab 	bl	80009a8 <__aeabi_dcmpeq>
 8004252:	4607      	mov	r7, r0
 8004254:	b158      	cbz	r0, 800426e <_dtoa_r+0xce>
 8004256:	2301      	movs	r3, #1
 8004258:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800425e:	b113      	cbz	r3, 8004266 <_dtoa_r+0xc6>
 8004260:	4b89      	ldr	r3, [pc, #548]	@ (8004488 <_dtoa_r+0x2e8>)
 8004262:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800448c <_dtoa_r+0x2ec>
 800426a:	f000 bd44 	b.w	8004cf6 <_dtoa_r+0xb56>
 800426e:	ab14      	add	r3, sp, #80	@ 0x50
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	ab15      	add	r3, sp, #84	@ 0x54
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	4648      	mov	r0, r9
 8004278:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800427c:	f001 fb24 	bl	80058c8 <__d2b>
 8004280:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004284:	9003      	str	r0, [sp, #12]
 8004286:	2e00      	cmp	r6, #0
 8004288:	d078      	beq.n	800437c <_dtoa_r+0x1dc>
 800428a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800428e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004290:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004298:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800429c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80042a0:	9712      	str	r7, [sp, #72]	@ 0x48
 80042a2:	4619      	mov	r1, r3
 80042a4:	2200      	movs	r2, #0
 80042a6:	4b7a      	ldr	r3, [pc, #488]	@ (8004490 <_dtoa_r+0x2f0>)
 80042a8:	f7fb ff5e 	bl	8000168 <__aeabi_dsub>
 80042ac:	a36c      	add	r3, pc, #432	@ (adr r3, 8004460 <_dtoa_r+0x2c0>)
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	f7fc f911 	bl	80004d8 <__aeabi_dmul>
 80042b6:	a36c      	add	r3, pc, #432	@ (adr r3, 8004468 <_dtoa_r+0x2c8>)
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f7fb ff56 	bl	800016c <__adddf3>
 80042c0:	4604      	mov	r4, r0
 80042c2:	4630      	mov	r0, r6
 80042c4:	460d      	mov	r5, r1
 80042c6:	f7fc f89d 	bl	8000404 <__aeabi_i2d>
 80042ca:	a369      	add	r3, pc, #420	@ (adr r3, 8004470 <_dtoa_r+0x2d0>)
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	f7fc f902 	bl	80004d8 <__aeabi_dmul>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4620      	mov	r0, r4
 80042da:	4629      	mov	r1, r5
 80042dc:	f7fb ff46 	bl	800016c <__adddf3>
 80042e0:	4604      	mov	r4, r0
 80042e2:	460d      	mov	r5, r1
 80042e4:	f7fc fba8 	bl	8000a38 <__aeabi_d2iz>
 80042e8:	2200      	movs	r2, #0
 80042ea:	4607      	mov	r7, r0
 80042ec:	2300      	movs	r3, #0
 80042ee:	4620      	mov	r0, r4
 80042f0:	4629      	mov	r1, r5
 80042f2:	f7fc fb63 	bl	80009bc <__aeabi_dcmplt>
 80042f6:	b140      	cbz	r0, 800430a <_dtoa_r+0x16a>
 80042f8:	4638      	mov	r0, r7
 80042fa:	f7fc f883 	bl	8000404 <__aeabi_i2d>
 80042fe:	4622      	mov	r2, r4
 8004300:	462b      	mov	r3, r5
 8004302:	f7fc fb51 	bl	80009a8 <__aeabi_dcmpeq>
 8004306:	b900      	cbnz	r0, 800430a <_dtoa_r+0x16a>
 8004308:	3f01      	subs	r7, #1
 800430a:	2f16      	cmp	r7, #22
 800430c:	d854      	bhi.n	80043b8 <_dtoa_r+0x218>
 800430e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004312:	4b60      	ldr	r3, [pc, #384]	@ (8004494 <_dtoa_r+0x2f4>)
 8004314:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431c:	f7fc fb4e 	bl	80009bc <__aeabi_dcmplt>
 8004320:	2800      	cmp	r0, #0
 8004322:	d04b      	beq.n	80043bc <_dtoa_r+0x21c>
 8004324:	2300      	movs	r3, #0
 8004326:	3f01      	subs	r7, #1
 8004328:	930f      	str	r3, [sp, #60]	@ 0x3c
 800432a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800432c:	1b9b      	subs	r3, r3, r6
 800432e:	1e5a      	subs	r2, r3, #1
 8004330:	bf49      	itett	mi
 8004332:	f1c3 0301 	rsbmi	r3, r3, #1
 8004336:	2300      	movpl	r3, #0
 8004338:	9304      	strmi	r3, [sp, #16]
 800433a:	2300      	movmi	r3, #0
 800433c:	9209      	str	r2, [sp, #36]	@ 0x24
 800433e:	bf54      	ite	pl
 8004340:	9304      	strpl	r3, [sp, #16]
 8004342:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004344:	2f00      	cmp	r7, #0
 8004346:	db3b      	blt.n	80043c0 <_dtoa_r+0x220>
 8004348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800434a:	970e      	str	r7, [sp, #56]	@ 0x38
 800434c:	443b      	add	r3, r7
 800434e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004350:	2300      	movs	r3, #0
 8004352:	930a      	str	r3, [sp, #40]	@ 0x28
 8004354:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004356:	2b09      	cmp	r3, #9
 8004358:	d865      	bhi.n	8004426 <_dtoa_r+0x286>
 800435a:	2b05      	cmp	r3, #5
 800435c:	bfc4      	itt	gt
 800435e:	3b04      	subgt	r3, #4
 8004360:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004362:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004364:	bfc8      	it	gt
 8004366:	2400      	movgt	r4, #0
 8004368:	f1a3 0302 	sub.w	r3, r3, #2
 800436c:	bfd8      	it	le
 800436e:	2401      	movle	r4, #1
 8004370:	2b03      	cmp	r3, #3
 8004372:	d864      	bhi.n	800443e <_dtoa_r+0x29e>
 8004374:	e8df f003 	tbb	[pc, r3]
 8004378:	2c385553 	.word	0x2c385553
 800437c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004380:	441e      	add	r6, r3
 8004382:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004386:	2b20      	cmp	r3, #32
 8004388:	bfc1      	itttt	gt
 800438a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800438e:	fa08 f803 	lslgt.w	r8, r8, r3
 8004392:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004396:	fa24 f303 	lsrgt.w	r3, r4, r3
 800439a:	bfd6      	itet	le
 800439c:	f1c3 0320 	rsble	r3, r3, #32
 80043a0:	ea48 0003 	orrgt.w	r0, r8, r3
 80043a4:	fa04 f003 	lslle.w	r0, r4, r3
 80043a8:	f7fc f81c 	bl	80003e4 <__aeabi_ui2d>
 80043ac:	2201      	movs	r2, #1
 80043ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80043b2:	3e01      	subs	r6, #1
 80043b4:	9212      	str	r2, [sp, #72]	@ 0x48
 80043b6:	e774      	b.n	80042a2 <_dtoa_r+0x102>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e7b5      	b.n	8004328 <_dtoa_r+0x188>
 80043bc:	900f      	str	r0, [sp, #60]	@ 0x3c
 80043be:	e7b4      	b.n	800432a <_dtoa_r+0x18a>
 80043c0:	9b04      	ldr	r3, [sp, #16]
 80043c2:	1bdb      	subs	r3, r3, r7
 80043c4:	9304      	str	r3, [sp, #16]
 80043c6:	427b      	negs	r3, r7
 80043c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80043ca:	2300      	movs	r3, #0
 80043cc:	930e      	str	r3, [sp, #56]	@ 0x38
 80043ce:	e7c1      	b.n	8004354 <_dtoa_r+0x1b4>
 80043d0:	2301      	movs	r3, #1
 80043d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80043d6:	eb07 0b03 	add.w	fp, r7, r3
 80043da:	f10b 0301 	add.w	r3, fp, #1
 80043de:	2b01      	cmp	r3, #1
 80043e0:	9308      	str	r3, [sp, #32]
 80043e2:	bfb8      	it	lt
 80043e4:	2301      	movlt	r3, #1
 80043e6:	e006      	b.n	80043f6 <_dtoa_r+0x256>
 80043e8:	2301      	movs	r3, #1
 80043ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80043ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	dd28      	ble.n	8004444 <_dtoa_r+0x2a4>
 80043f2:	469b      	mov	fp, r3
 80043f4:	9308      	str	r3, [sp, #32]
 80043f6:	2100      	movs	r1, #0
 80043f8:	2204      	movs	r2, #4
 80043fa:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80043fe:	f102 0514 	add.w	r5, r2, #20
 8004402:	429d      	cmp	r5, r3
 8004404:	d926      	bls.n	8004454 <_dtoa_r+0x2b4>
 8004406:	6041      	str	r1, [r0, #4]
 8004408:	4648      	mov	r0, r9
 800440a:	f000 ff3b 	bl	8005284 <_Balloc>
 800440e:	4682      	mov	sl, r0
 8004410:	2800      	cmp	r0, #0
 8004412:	d143      	bne.n	800449c <_dtoa_r+0x2fc>
 8004414:	4602      	mov	r2, r0
 8004416:	f240 11af 	movw	r1, #431	@ 0x1af
 800441a:	4b1f      	ldr	r3, [pc, #124]	@ (8004498 <_dtoa_r+0x2f8>)
 800441c:	e6d4      	b.n	80041c8 <_dtoa_r+0x28>
 800441e:	2300      	movs	r3, #0
 8004420:	e7e3      	b.n	80043ea <_dtoa_r+0x24a>
 8004422:	2300      	movs	r3, #0
 8004424:	e7d5      	b.n	80043d2 <_dtoa_r+0x232>
 8004426:	2401      	movs	r4, #1
 8004428:	2300      	movs	r3, #0
 800442a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800442c:	9320      	str	r3, [sp, #128]	@ 0x80
 800442e:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8004432:	2200      	movs	r2, #0
 8004434:	2312      	movs	r3, #18
 8004436:	f8cd b020 	str.w	fp, [sp, #32]
 800443a:	9221      	str	r2, [sp, #132]	@ 0x84
 800443c:	e7db      	b.n	80043f6 <_dtoa_r+0x256>
 800443e:	2301      	movs	r3, #1
 8004440:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004442:	e7f4      	b.n	800442e <_dtoa_r+0x28e>
 8004444:	f04f 0b01 	mov.w	fp, #1
 8004448:	465b      	mov	r3, fp
 800444a:	f8cd b020 	str.w	fp, [sp, #32]
 800444e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004452:	e7d0      	b.n	80043f6 <_dtoa_r+0x256>
 8004454:	3101      	adds	r1, #1
 8004456:	0052      	lsls	r2, r2, #1
 8004458:	e7d1      	b.n	80043fe <_dtoa_r+0x25e>
 800445a:	bf00      	nop
 800445c:	f3af 8000 	nop.w
 8004460:	636f4361 	.word	0x636f4361
 8004464:	3fd287a7 	.word	0x3fd287a7
 8004468:	8b60c8b3 	.word	0x8b60c8b3
 800446c:	3fc68a28 	.word	0x3fc68a28
 8004470:	509f79fb 	.word	0x509f79fb
 8004474:	3fd34413 	.word	0x3fd34413
 8004478:	08005f9b 	.word	0x08005f9b
 800447c:	08005fb2 	.word	0x08005fb2
 8004480:	7ff00000 	.word	0x7ff00000
 8004484:	08005f97 	.word	0x08005f97
 8004488:	08005f6b 	.word	0x08005f6b
 800448c:	08005f6a 	.word	0x08005f6a
 8004490:	3ff80000 	.word	0x3ff80000
 8004494:	08006100 	.word	0x08006100
 8004498:	0800600a 	.word	0x0800600a
 800449c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80044a0:	6018      	str	r0, [r3, #0]
 80044a2:	9b08      	ldr	r3, [sp, #32]
 80044a4:	2b0e      	cmp	r3, #14
 80044a6:	f200 80a1 	bhi.w	80045ec <_dtoa_r+0x44c>
 80044aa:	2c00      	cmp	r4, #0
 80044ac:	f000 809e 	beq.w	80045ec <_dtoa_r+0x44c>
 80044b0:	2f00      	cmp	r7, #0
 80044b2:	dd33      	ble.n	800451c <_dtoa_r+0x37c>
 80044b4:	4b9c      	ldr	r3, [pc, #624]	@ (8004728 <_dtoa_r+0x588>)
 80044b6:	f007 020f 	and.w	r2, r7, #15
 80044ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044be:	05f8      	lsls	r0, r7, #23
 80044c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80044c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80044cc:	d516      	bpl.n	80044fc <_dtoa_r+0x35c>
 80044ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80044d2:	4b96      	ldr	r3, [pc, #600]	@ (800472c <_dtoa_r+0x58c>)
 80044d4:	2603      	movs	r6, #3
 80044d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80044da:	f7fc f927 	bl	800072c <__aeabi_ddiv>
 80044de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80044e2:	f004 040f 	and.w	r4, r4, #15
 80044e6:	4d91      	ldr	r5, [pc, #580]	@ (800472c <_dtoa_r+0x58c>)
 80044e8:	b954      	cbnz	r4, 8004500 <_dtoa_r+0x360>
 80044ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80044ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044f2:	f7fc f91b 	bl	800072c <__aeabi_ddiv>
 80044f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80044fa:	e028      	b.n	800454e <_dtoa_r+0x3ae>
 80044fc:	2602      	movs	r6, #2
 80044fe:	e7f2      	b.n	80044e6 <_dtoa_r+0x346>
 8004500:	07e1      	lsls	r1, r4, #31
 8004502:	d508      	bpl.n	8004516 <_dtoa_r+0x376>
 8004504:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004508:	e9d5 2300 	ldrd	r2, r3, [r5]
 800450c:	f7fb ffe4 	bl	80004d8 <__aeabi_dmul>
 8004510:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004514:	3601      	adds	r6, #1
 8004516:	1064      	asrs	r4, r4, #1
 8004518:	3508      	adds	r5, #8
 800451a:	e7e5      	b.n	80044e8 <_dtoa_r+0x348>
 800451c:	f000 80af 	beq.w	800467e <_dtoa_r+0x4de>
 8004520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004524:	427c      	negs	r4, r7
 8004526:	4b80      	ldr	r3, [pc, #512]	@ (8004728 <_dtoa_r+0x588>)
 8004528:	f004 020f 	and.w	r2, r4, #15
 800452c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f7fb ffd0 	bl	80004d8 <__aeabi_dmul>
 8004538:	2602      	movs	r6, #2
 800453a:	2300      	movs	r3, #0
 800453c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004540:	4d7a      	ldr	r5, [pc, #488]	@ (800472c <_dtoa_r+0x58c>)
 8004542:	1124      	asrs	r4, r4, #4
 8004544:	2c00      	cmp	r4, #0
 8004546:	f040 808f 	bne.w	8004668 <_dtoa_r+0x4c8>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1d3      	bne.n	80044f6 <_dtoa_r+0x356>
 800454e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004552:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 8094 	beq.w	8004682 <_dtoa_r+0x4e2>
 800455a:	2200      	movs	r2, #0
 800455c:	4620      	mov	r0, r4
 800455e:	4629      	mov	r1, r5
 8004560:	4b73      	ldr	r3, [pc, #460]	@ (8004730 <_dtoa_r+0x590>)
 8004562:	f7fc fa2b 	bl	80009bc <__aeabi_dcmplt>
 8004566:	2800      	cmp	r0, #0
 8004568:	f000 808b 	beq.w	8004682 <_dtoa_r+0x4e2>
 800456c:	9b08      	ldr	r3, [sp, #32]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 8087 	beq.w	8004682 <_dtoa_r+0x4e2>
 8004574:	f1bb 0f00 	cmp.w	fp, #0
 8004578:	dd34      	ble.n	80045e4 <_dtoa_r+0x444>
 800457a:	4620      	mov	r0, r4
 800457c:	2200      	movs	r2, #0
 800457e:	4629      	mov	r1, r5
 8004580:	4b6c      	ldr	r3, [pc, #432]	@ (8004734 <_dtoa_r+0x594>)
 8004582:	f7fb ffa9 	bl	80004d8 <__aeabi_dmul>
 8004586:	465c      	mov	r4, fp
 8004588:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800458c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8004590:	3601      	adds	r6, #1
 8004592:	4630      	mov	r0, r6
 8004594:	f7fb ff36 	bl	8000404 <__aeabi_i2d>
 8004598:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800459c:	f7fb ff9c 	bl	80004d8 <__aeabi_dmul>
 80045a0:	2200      	movs	r2, #0
 80045a2:	4b65      	ldr	r3, [pc, #404]	@ (8004738 <_dtoa_r+0x598>)
 80045a4:	f7fb fde2 	bl	800016c <__adddf3>
 80045a8:	4605      	mov	r5, r0
 80045aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80045ae:	2c00      	cmp	r4, #0
 80045b0:	d16a      	bne.n	8004688 <_dtoa_r+0x4e8>
 80045b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045b6:	2200      	movs	r2, #0
 80045b8:	4b60      	ldr	r3, [pc, #384]	@ (800473c <_dtoa_r+0x59c>)
 80045ba:	f7fb fdd5 	bl	8000168 <__aeabi_dsub>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80045c6:	462a      	mov	r2, r5
 80045c8:	4633      	mov	r3, r6
 80045ca:	f7fc fa15 	bl	80009f8 <__aeabi_dcmpgt>
 80045ce:	2800      	cmp	r0, #0
 80045d0:	f040 8298 	bne.w	8004b04 <_dtoa_r+0x964>
 80045d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045d8:	462a      	mov	r2, r5
 80045da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80045de:	f7fc f9ed 	bl	80009bc <__aeabi_dcmplt>
 80045e2:	bb38      	cbnz	r0, 8004634 <_dtoa_r+0x494>
 80045e4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80045e8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80045ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f2c0 8157 	blt.w	80048a2 <_dtoa_r+0x702>
 80045f4:	2f0e      	cmp	r7, #14
 80045f6:	f300 8154 	bgt.w	80048a2 <_dtoa_r+0x702>
 80045fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004728 <_dtoa_r+0x588>)
 80045fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004600:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004604:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004608:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800460a:	2b00      	cmp	r3, #0
 800460c:	f280 80e5 	bge.w	80047da <_dtoa_r+0x63a>
 8004610:	9b08      	ldr	r3, [sp, #32]
 8004612:	2b00      	cmp	r3, #0
 8004614:	f300 80e1 	bgt.w	80047da <_dtoa_r+0x63a>
 8004618:	d10c      	bne.n	8004634 <_dtoa_r+0x494>
 800461a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800461e:	2200      	movs	r2, #0
 8004620:	4b46      	ldr	r3, [pc, #280]	@ (800473c <_dtoa_r+0x59c>)
 8004622:	f7fb ff59 	bl	80004d8 <__aeabi_dmul>
 8004626:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800462a:	f7fc f9db 	bl	80009e4 <__aeabi_dcmpge>
 800462e:	2800      	cmp	r0, #0
 8004630:	f000 8266 	beq.w	8004b00 <_dtoa_r+0x960>
 8004634:	2400      	movs	r4, #0
 8004636:	4625      	mov	r5, r4
 8004638:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800463a:	4656      	mov	r6, sl
 800463c:	ea6f 0803 	mvn.w	r8, r3
 8004640:	2700      	movs	r7, #0
 8004642:	4621      	mov	r1, r4
 8004644:	4648      	mov	r0, r9
 8004646:	f000 fe5d 	bl	8005304 <_Bfree>
 800464a:	2d00      	cmp	r5, #0
 800464c:	f000 80bd 	beq.w	80047ca <_dtoa_r+0x62a>
 8004650:	b12f      	cbz	r7, 800465e <_dtoa_r+0x4be>
 8004652:	42af      	cmp	r7, r5
 8004654:	d003      	beq.n	800465e <_dtoa_r+0x4be>
 8004656:	4639      	mov	r1, r7
 8004658:	4648      	mov	r0, r9
 800465a:	f000 fe53 	bl	8005304 <_Bfree>
 800465e:	4629      	mov	r1, r5
 8004660:	4648      	mov	r0, r9
 8004662:	f000 fe4f 	bl	8005304 <_Bfree>
 8004666:	e0b0      	b.n	80047ca <_dtoa_r+0x62a>
 8004668:	07e2      	lsls	r2, r4, #31
 800466a:	d505      	bpl.n	8004678 <_dtoa_r+0x4d8>
 800466c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004670:	f7fb ff32 	bl	80004d8 <__aeabi_dmul>
 8004674:	2301      	movs	r3, #1
 8004676:	3601      	adds	r6, #1
 8004678:	1064      	asrs	r4, r4, #1
 800467a:	3508      	adds	r5, #8
 800467c:	e762      	b.n	8004544 <_dtoa_r+0x3a4>
 800467e:	2602      	movs	r6, #2
 8004680:	e765      	b.n	800454e <_dtoa_r+0x3ae>
 8004682:	46b8      	mov	r8, r7
 8004684:	9c08      	ldr	r4, [sp, #32]
 8004686:	e784      	b.n	8004592 <_dtoa_r+0x3f2>
 8004688:	4b27      	ldr	r3, [pc, #156]	@ (8004728 <_dtoa_r+0x588>)
 800468a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800468c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004690:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004694:	4454      	add	r4, sl
 8004696:	2900      	cmp	r1, #0
 8004698:	d054      	beq.n	8004744 <_dtoa_r+0x5a4>
 800469a:	2000      	movs	r0, #0
 800469c:	4928      	ldr	r1, [pc, #160]	@ (8004740 <_dtoa_r+0x5a0>)
 800469e:	f7fc f845 	bl	800072c <__aeabi_ddiv>
 80046a2:	4633      	mov	r3, r6
 80046a4:	462a      	mov	r2, r5
 80046a6:	f7fb fd5f 	bl	8000168 <__aeabi_dsub>
 80046aa:	4656      	mov	r6, sl
 80046ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80046b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046b4:	f7fc f9c0 	bl	8000a38 <__aeabi_d2iz>
 80046b8:	4605      	mov	r5, r0
 80046ba:	f7fb fea3 	bl	8000404 <__aeabi_i2d>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80046c6:	f7fb fd4f 	bl	8000168 <__aeabi_dsub>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	3530      	adds	r5, #48	@ 0x30
 80046d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80046d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80046d8:	f806 5b01 	strb.w	r5, [r6], #1
 80046dc:	f7fc f96e 	bl	80009bc <__aeabi_dcmplt>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d172      	bne.n	80047ca <_dtoa_r+0x62a>
 80046e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80046e8:	2000      	movs	r0, #0
 80046ea:	4911      	ldr	r1, [pc, #68]	@ (8004730 <_dtoa_r+0x590>)
 80046ec:	f7fb fd3c 	bl	8000168 <__aeabi_dsub>
 80046f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80046f4:	f7fc f962 	bl	80009bc <__aeabi_dcmplt>
 80046f8:	2800      	cmp	r0, #0
 80046fa:	f040 80b4 	bne.w	8004866 <_dtoa_r+0x6c6>
 80046fe:	42a6      	cmp	r6, r4
 8004700:	f43f af70 	beq.w	80045e4 <_dtoa_r+0x444>
 8004704:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004708:	2200      	movs	r2, #0
 800470a:	4b0a      	ldr	r3, [pc, #40]	@ (8004734 <_dtoa_r+0x594>)
 800470c:	f7fb fee4 	bl	80004d8 <__aeabi_dmul>
 8004710:	2200      	movs	r2, #0
 8004712:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800471a:	4b06      	ldr	r3, [pc, #24]	@ (8004734 <_dtoa_r+0x594>)
 800471c:	f7fb fedc 	bl	80004d8 <__aeabi_dmul>
 8004720:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004724:	e7c4      	b.n	80046b0 <_dtoa_r+0x510>
 8004726:	bf00      	nop
 8004728:	08006100 	.word	0x08006100
 800472c:	080060d8 	.word	0x080060d8
 8004730:	3ff00000 	.word	0x3ff00000
 8004734:	40240000 	.word	0x40240000
 8004738:	401c0000 	.word	0x401c0000
 800473c:	40140000 	.word	0x40140000
 8004740:	3fe00000 	.word	0x3fe00000
 8004744:	4631      	mov	r1, r6
 8004746:	4628      	mov	r0, r5
 8004748:	f7fb fec6 	bl	80004d8 <__aeabi_dmul>
 800474c:	4656      	mov	r6, sl
 800474e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004752:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004758:	f7fc f96e 	bl	8000a38 <__aeabi_d2iz>
 800475c:	4605      	mov	r5, r0
 800475e:	f7fb fe51 	bl	8000404 <__aeabi_i2d>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800476a:	f7fb fcfd 	bl	8000168 <__aeabi_dsub>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	3530      	adds	r5, #48	@ 0x30
 8004774:	f806 5b01 	strb.w	r5, [r6], #1
 8004778:	42a6      	cmp	r6, r4
 800477a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	d124      	bne.n	80047ce <_dtoa_r+0x62e>
 8004784:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004788:	4bae      	ldr	r3, [pc, #696]	@ (8004a44 <_dtoa_r+0x8a4>)
 800478a:	f7fb fcef 	bl	800016c <__adddf3>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004796:	f7fc f92f 	bl	80009f8 <__aeabi_dcmpgt>
 800479a:	2800      	cmp	r0, #0
 800479c:	d163      	bne.n	8004866 <_dtoa_r+0x6c6>
 800479e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80047a2:	2000      	movs	r0, #0
 80047a4:	49a7      	ldr	r1, [pc, #668]	@ (8004a44 <_dtoa_r+0x8a4>)
 80047a6:	f7fb fcdf 	bl	8000168 <__aeabi_dsub>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047b2:	f7fc f903 	bl	80009bc <__aeabi_dcmplt>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	f43f af14 	beq.w	80045e4 <_dtoa_r+0x444>
 80047bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80047be:	1e73      	subs	r3, r6, #1
 80047c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80047c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80047c6:	2b30      	cmp	r3, #48	@ 0x30
 80047c8:	d0f8      	beq.n	80047bc <_dtoa_r+0x61c>
 80047ca:	4647      	mov	r7, r8
 80047cc:	e03b      	b.n	8004846 <_dtoa_r+0x6a6>
 80047ce:	4b9e      	ldr	r3, [pc, #632]	@ (8004a48 <_dtoa_r+0x8a8>)
 80047d0:	f7fb fe82 	bl	80004d8 <__aeabi_dmul>
 80047d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80047d8:	e7bc      	b.n	8004754 <_dtoa_r+0x5b4>
 80047da:	4656      	mov	r6, sl
 80047dc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80047e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047e4:	4620      	mov	r0, r4
 80047e6:	4629      	mov	r1, r5
 80047e8:	f7fb ffa0 	bl	800072c <__aeabi_ddiv>
 80047ec:	f7fc f924 	bl	8000a38 <__aeabi_d2iz>
 80047f0:	4680      	mov	r8, r0
 80047f2:	f7fb fe07 	bl	8000404 <__aeabi_i2d>
 80047f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047fa:	f7fb fe6d 	bl	80004d8 <__aeabi_dmul>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4620      	mov	r0, r4
 8004804:	4629      	mov	r1, r5
 8004806:	f7fb fcaf 	bl	8000168 <__aeabi_dsub>
 800480a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800480e:	9d08      	ldr	r5, [sp, #32]
 8004810:	f806 4b01 	strb.w	r4, [r6], #1
 8004814:	eba6 040a 	sub.w	r4, r6, sl
 8004818:	42a5      	cmp	r5, r4
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	d133      	bne.n	8004888 <_dtoa_r+0x6e8>
 8004820:	f7fb fca4 	bl	800016c <__adddf3>
 8004824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004828:	4604      	mov	r4, r0
 800482a:	460d      	mov	r5, r1
 800482c:	f7fc f8e4 	bl	80009f8 <__aeabi_dcmpgt>
 8004830:	b9c0      	cbnz	r0, 8004864 <_dtoa_r+0x6c4>
 8004832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004836:	4620      	mov	r0, r4
 8004838:	4629      	mov	r1, r5
 800483a:	f7fc f8b5 	bl	80009a8 <__aeabi_dcmpeq>
 800483e:	b110      	cbz	r0, 8004846 <_dtoa_r+0x6a6>
 8004840:	f018 0f01 	tst.w	r8, #1
 8004844:	d10e      	bne.n	8004864 <_dtoa_r+0x6c4>
 8004846:	4648      	mov	r0, r9
 8004848:	9903      	ldr	r1, [sp, #12]
 800484a:	f000 fd5b 	bl	8005304 <_Bfree>
 800484e:	2300      	movs	r3, #0
 8004850:	7033      	strb	r3, [r6, #0]
 8004852:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004854:	3701      	adds	r7, #1
 8004856:	601f      	str	r7, [r3, #0]
 8004858:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 824b 	beq.w	8004cf6 <_dtoa_r+0xb56>
 8004860:	601e      	str	r6, [r3, #0]
 8004862:	e248      	b.n	8004cf6 <_dtoa_r+0xb56>
 8004864:	46b8      	mov	r8, r7
 8004866:	4633      	mov	r3, r6
 8004868:	461e      	mov	r6, r3
 800486a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800486e:	2a39      	cmp	r2, #57	@ 0x39
 8004870:	d106      	bne.n	8004880 <_dtoa_r+0x6e0>
 8004872:	459a      	cmp	sl, r3
 8004874:	d1f8      	bne.n	8004868 <_dtoa_r+0x6c8>
 8004876:	2230      	movs	r2, #48	@ 0x30
 8004878:	f108 0801 	add.w	r8, r8, #1
 800487c:	f88a 2000 	strb.w	r2, [sl]
 8004880:	781a      	ldrb	r2, [r3, #0]
 8004882:	3201      	adds	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]
 8004886:	e7a0      	b.n	80047ca <_dtoa_r+0x62a>
 8004888:	2200      	movs	r2, #0
 800488a:	4b6f      	ldr	r3, [pc, #444]	@ (8004a48 <_dtoa_r+0x8a8>)
 800488c:	f7fb fe24 	bl	80004d8 <__aeabi_dmul>
 8004890:	2200      	movs	r2, #0
 8004892:	2300      	movs	r3, #0
 8004894:	4604      	mov	r4, r0
 8004896:	460d      	mov	r5, r1
 8004898:	f7fc f886 	bl	80009a8 <__aeabi_dcmpeq>
 800489c:	2800      	cmp	r0, #0
 800489e:	d09f      	beq.n	80047e0 <_dtoa_r+0x640>
 80048a0:	e7d1      	b.n	8004846 <_dtoa_r+0x6a6>
 80048a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80048a4:	2a00      	cmp	r2, #0
 80048a6:	f000 80ea 	beq.w	8004a7e <_dtoa_r+0x8de>
 80048aa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80048ac:	2a01      	cmp	r2, #1
 80048ae:	f300 80cd 	bgt.w	8004a4c <_dtoa_r+0x8ac>
 80048b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80048b4:	2a00      	cmp	r2, #0
 80048b6:	f000 80c1 	beq.w	8004a3c <_dtoa_r+0x89c>
 80048ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80048be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80048c0:	9e04      	ldr	r6, [sp, #16]
 80048c2:	9a04      	ldr	r2, [sp, #16]
 80048c4:	2101      	movs	r1, #1
 80048c6:	441a      	add	r2, r3
 80048c8:	9204      	str	r2, [sp, #16]
 80048ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048cc:	4648      	mov	r0, r9
 80048ce:	441a      	add	r2, r3
 80048d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80048d2:	f000 fdcb 	bl	800546c <__i2b>
 80048d6:	4605      	mov	r5, r0
 80048d8:	b166      	cbz	r6, 80048f4 <_dtoa_r+0x754>
 80048da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048dc:	2b00      	cmp	r3, #0
 80048de:	dd09      	ble.n	80048f4 <_dtoa_r+0x754>
 80048e0:	42b3      	cmp	r3, r6
 80048e2:	bfa8      	it	ge
 80048e4:	4633      	movge	r3, r6
 80048e6:	9a04      	ldr	r2, [sp, #16]
 80048e8:	1af6      	subs	r6, r6, r3
 80048ea:	1ad2      	subs	r2, r2, r3
 80048ec:	9204      	str	r2, [sp, #16]
 80048ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80048f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048f6:	b30b      	cbz	r3, 800493c <_dtoa_r+0x79c>
 80048f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f000 80c6 	beq.w	8004a8c <_dtoa_r+0x8ec>
 8004900:	2c00      	cmp	r4, #0
 8004902:	f000 80c0 	beq.w	8004a86 <_dtoa_r+0x8e6>
 8004906:	4629      	mov	r1, r5
 8004908:	4622      	mov	r2, r4
 800490a:	4648      	mov	r0, r9
 800490c:	f000 fe66 	bl	80055dc <__pow5mult>
 8004910:	9a03      	ldr	r2, [sp, #12]
 8004912:	4601      	mov	r1, r0
 8004914:	4605      	mov	r5, r0
 8004916:	4648      	mov	r0, r9
 8004918:	f000 fdbe 	bl	8005498 <__multiply>
 800491c:	9903      	ldr	r1, [sp, #12]
 800491e:	4680      	mov	r8, r0
 8004920:	4648      	mov	r0, r9
 8004922:	f000 fcef 	bl	8005304 <_Bfree>
 8004926:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004928:	1b1b      	subs	r3, r3, r4
 800492a:	930a      	str	r3, [sp, #40]	@ 0x28
 800492c:	f000 80b1 	beq.w	8004a92 <_dtoa_r+0x8f2>
 8004930:	4641      	mov	r1, r8
 8004932:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004934:	4648      	mov	r0, r9
 8004936:	f000 fe51 	bl	80055dc <__pow5mult>
 800493a:	9003      	str	r0, [sp, #12]
 800493c:	2101      	movs	r1, #1
 800493e:	4648      	mov	r0, r9
 8004940:	f000 fd94 	bl	800546c <__i2b>
 8004944:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004946:	4604      	mov	r4, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 81d8 	beq.w	8004cfe <_dtoa_r+0xb5e>
 800494e:	461a      	mov	r2, r3
 8004950:	4601      	mov	r1, r0
 8004952:	4648      	mov	r0, r9
 8004954:	f000 fe42 	bl	80055dc <__pow5mult>
 8004958:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800495a:	4604      	mov	r4, r0
 800495c:	2b01      	cmp	r3, #1
 800495e:	f300 809f 	bgt.w	8004aa0 <_dtoa_r+0x900>
 8004962:	9b06      	ldr	r3, [sp, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f040 8097 	bne.w	8004a98 <_dtoa_r+0x8f8>
 800496a:	9b07      	ldr	r3, [sp, #28]
 800496c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004970:	2b00      	cmp	r3, #0
 8004972:	f040 8093 	bne.w	8004a9c <_dtoa_r+0x8fc>
 8004976:	9b07      	ldr	r3, [sp, #28]
 8004978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800497c:	0d1b      	lsrs	r3, r3, #20
 800497e:	051b      	lsls	r3, r3, #20
 8004980:	b133      	cbz	r3, 8004990 <_dtoa_r+0x7f0>
 8004982:	9b04      	ldr	r3, [sp, #16]
 8004984:	3301      	adds	r3, #1
 8004986:	9304      	str	r3, [sp, #16]
 8004988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800498a:	3301      	adds	r3, #1
 800498c:	9309      	str	r3, [sp, #36]	@ 0x24
 800498e:	2301      	movs	r3, #1
 8004990:	930a      	str	r3, [sp, #40]	@ 0x28
 8004992:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 81b8 	beq.w	8004d0a <_dtoa_r+0xb6a>
 800499a:	6923      	ldr	r3, [r4, #16]
 800499c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80049a0:	6918      	ldr	r0, [r3, #16]
 80049a2:	f000 fd17 	bl	80053d4 <__hi0bits>
 80049a6:	f1c0 0020 	rsb	r0, r0, #32
 80049aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049ac:	4418      	add	r0, r3
 80049ae:	f010 001f 	ands.w	r0, r0, #31
 80049b2:	f000 8082 	beq.w	8004aba <_dtoa_r+0x91a>
 80049b6:	f1c0 0320 	rsb	r3, r0, #32
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	dd73      	ble.n	8004aa6 <_dtoa_r+0x906>
 80049be:	9b04      	ldr	r3, [sp, #16]
 80049c0:	f1c0 001c 	rsb	r0, r0, #28
 80049c4:	4403      	add	r3, r0
 80049c6:	9304      	str	r3, [sp, #16]
 80049c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049ca:	4406      	add	r6, r0
 80049cc:	4403      	add	r3, r0
 80049ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80049d0:	9b04      	ldr	r3, [sp, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	dd05      	ble.n	80049e2 <_dtoa_r+0x842>
 80049d6:	461a      	mov	r2, r3
 80049d8:	4648      	mov	r0, r9
 80049da:	9903      	ldr	r1, [sp, #12]
 80049dc:	f000 fe58 	bl	8005690 <__lshift>
 80049e0:	9003      	str	r0, [sp, #12]
 80049e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	dd05      	ble.n	80049f4 <_dtoa_r+0x854>
 80049e8:	4621      	mov	r1, r4
 80049ea:	461a      	mov	r2, r3
 80049ec:	4648      	mov	r0, r9
 80049ee:	f000 fe4f 	bl	8005690 <__lshift>
 80049f2:	4604      	mov	r4, r0
 80049f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d061      	beq.n	8004abe <_dtoa_r+0x91e>
 80049fa:	4621      	mov	r1, r4
 80049fc:	9803      	ldr	r0, [sp, #12]
 80049fe:	f000 feb3 	bl	8005768 <__mcmp>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	da5b      	bge.n	8004abe <_dtoa_r+0x91e>
 8004a06:	2300      	movs	r3, #0
 8004a08:	220a      	movs	r2, #10
 8004a0a:	4648      	mov	r0, r9
 8004a0c:	9903      	ldr	r1, [sp, #12]
 8004a0e:	f000 fc9b 	bl	8005348 <__multadd>
 8004a12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a14:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8004a18:	9003      	str	r0, [sp, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8177 	beq.w	8004d0e <_dtoa_r+0xb6e>
 8004a20:	4629      	mov	r1, r5
 8004a22:	2300      	movs	r3, #0
 8004a24:	220a      	movs	r2, #10
 8004a26:	4648      	mov	r0, r9
 8004a28:	f000 fc8e 	bl	8005348 <__multadd>
 8004a2c:	f1bb 0f00 	cmp.w	fp, #0
 8004a30:	4605      	mov	r5, r0
 8004a32:	dc6f      	bgt.n	8004b14 <_dtoa_r+0x974>
 8004a34:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	dc49      	bgt.n	8004ace <_dtoa_r+0x92e>
 8004a3a:	e06b      	b.n	8004b14 <_dtoa_r+0x974>
 8004a3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004a3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004a42:	e73c      	b.n	80048be <_dtoa_r+0x71e>
 8004a44:	3fe00000 	.word	0x3fe00000
 8004a48:	40240000 	.word	0x40240000
 8004a4c:	9b08      	ldr	r3, [sp, #32]
 8004a4e:	1e5c      	subs	r4, r3, #1
 8004a50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a52:	42a3      	cmp	r3, r4
 8004a54:	db09      	blt.n	8004a6a <_dtoa_r+0x8ca>
 8004a56:	1b1c      	subs	r4, r3, r4
 8004a58:	9b08      	ldr	r3, [sp, #32]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f6bf af30 	bge.w	80048c0 <_dtoa_r+0x720>
 8004a60:	9b04      	ldr	r3, [sp, #16]
 8004a62:	9a08      	ldr	r2, [sp, #32]
 8004a64:	1a9e      	subs	r6, r3, r2
 8004a66:	2300      	movs	r3, #0
 8004a68:	e72b      	b.n	80048c2 <_dtoa_r+0x722>
 8004a6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a6e:	1ae3      	subs	r3, r4, r3
 8004a70:	441a      	add	r2, r3
 8004a72:	940a      	str	r4, [sp, #40]	@ 0x28
 8004a74:	9e04      	ldr	r6, [sp, #16]
 8004a76:	2400      	movs	r4, #0
 8004a78:	9b08      	ldr	r3, [sp, #32]
 8004a7a:	920e      	str	r2, [sp, #56]	@ 0x38
 8004a7c:	e721      	b.n	80048c2 <_dtoa_r+0x722>
 8004a7e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004a80:	9e04      	ldr	r6, [sp, #16]
 8004a82:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004a84:	e728      	b.n	80048d8 <_dtoa_r+0x738>
 8004a86:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004a8a:	e751      	b.n	8004930 <_dtoa_r+0x790>
 8004a8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004a8e:	9903      	ldr	r1, [sp, #12]
 8004a90:	e750      	b.n	8004934 <_dtoa_r+0x794>
 8004a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a96:	e751      	b.n	800493c <_dtoa_r+0x79c>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e779      	b.n	8004990 <_dtoa_r+0x7f0>
 8004a9c:	9b06      	ldr	r3, [sp, #24]
 8004a9e:	e777      	b.n	8004990 <_dtoa_r+0x7f0>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004aa4:	e779      	b.n	800499a <_dtoa_r+0x7fa>
 8004aa6:	d093      	beq.n	80049d0 <_dtoa_r+0x830>
 8004aa8:	9a04      	ldr	r2, [sp, #16]
 8004aaa:	331c      	adds	r3, #28
 8004aac:	441a      	add	r2, r3
 8004aae:	9204      	str	r2, [sp, #16]
 8004ab0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ab2:	441e      	add	r6, r3
 8004ab4:	441a      	add	r2, r3
 8004ab6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ab8:	e78a      	b.n	80049d0 <_dtoa_r+0x830>
 8004aba:	4603      	mov	r3, r0
 8004abc:	e7f4      	b.n	8004aa8 <_dtoa_r+0x908>
 8004abe:	9b08      	ldr	r3, [sp, #32]
 8004ac0:	46b8      	mov	r8, r7
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	dc20      	bgt.n	8004b08 <_dtoa_r+0x968>
 8004ac6:	469b      	mov	fp, r3
 8004ac8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	dd1e      	ble.n	8004b0c <_dtoa_r+0x96c>
 8004ace:	f1bb 0f00 	cmp.w	fp, #0
 8004ad2:	f47f adb1 	bne.w	8004638 <_dtoa_r+0x498>
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	465b      	mov	r3, fp
 8004ada:	2205      	movs	r2, #5
 8004adc:	4648      	mov	r0, r9
 8004ade:	f000 fc33 	bl	8005348 <__multadd>
 8004ae2:	4601      	mov	r1, r0
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	9803      	ldr	r0, [sp, #12]
 8004ae8:	f000 fe3e 	bl	8005768 <__mcmp>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	f77f ada3 	ble.w	8004638 <_dtoa_r+0x498>
 8004af2:	4656      	mov	r6, sl
 8004af4:	2331      	movs	r3, #49	@ 0x31
 8004af6:	f108 0801 	add.w	r8, r8, #1
 8004afa:	f806 3b01 	strb.w	r3, [r6], #1
 8004afe:	e59f      	b.n	8004640 <_dtoa_r+0x4a0>
 8004b00:	46b8      	mov	r8, r7
 8004b02:	9c08      	ldr	r4, [sp, #32]
 8004b04:	4625      	mov	r5, r4
 8004b06:	e7f4      	b.n	8004af2 <_dtoa_r+0x952>
 8004b08:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004b0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8101 	beq.w	8004d16 <_dtoa_r+0xb76>
 8004b14:	2e00      	cmp	r6, #0
 8004b16:	dd05      	ble.n	8004b24 <_dtoa_r+0x984>
 8004b18:	4629      	mov	r1, r5
 8004b1a:	4632      	mov	r2, r6
 8004b1c:	4648      	mov	r0, r9
 8004b1e:	f000 fdb7 	bl	8005690 <__lshift>
 8004b22:	4605      	mov	r5, r0
 8004b24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d05c      	beq.n	8004be4 <_dtoa_r+0xa44>
 8004b2a:	4648      	mov	r0, r9
 8004b2c:	6869      	ldr	r1, [r5, #4]
 8004b2e:	f000 fba9 	bl	8005284 <_Balloc>
 8004b32:	4606      	mov	r6, r0
 8004b34:	b928      	cbnz	r0, 8004b42 <_dtoa_r+0x9a2>
 8004b36:	4602      	mov	r2, r0
 8004b38:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004b3c:	4b80      	ldr	r3, [pc, #512]	@ (8004d40 <_dtoa_r+0xba0>)
 8004b3e:	f7ff bb43 	b.w	80041c8 <_dtoa_r+0x28>
 8004b42:	692a      	ldr	r2, [r5, #16]
 8004b44:	f105 010c 	add.w	r1, r5, #12
 8004b48:	3202      	adds	r2, #2
 8004b4a:	0092      	lsls	r2, r2, #2
 8004b4c:	300c      	adds	r0, #12
 8004b4e:	f001 f8c5 	bl	8005cdc <memcpy>
 8004b52:	2201      	movs	r2, #1
 8004b54:	4631      	mov	r1, r6
 8004b56:	4648      	mov	r0, r9
 8004b58:	f000 fd9a 	bl	8005690 <__lshift>
 8004b5c:	462f      	mov	r7, r5
 8004b5e:	4605      	mov	r5, r0
 8004b60:	f10a 0301 	add.w	r3, sl, #1
 8004b64:	9304      	str	r3, [sp, #16]
 8004b66:	eb0a 030b 	add.w	r3, sl, fp
 8004b6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b6c:	9b06      	ldr	r3, [sp, #24]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b74:	9b04      	ldr	r3, [sp, #16]
 8004b76:	4621      	mov	r1, r4
 8004b78:	9803      	ldr	r0, [sp, #12]
 8004b7a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8004b7e:	f7ff fa85 	bl	800408c <quorem>
 8004b82:	4603      	mov	r3, r0
 8004b84:	4639      	mov	r1, r7
 8004b86:	3330      	adds	r3, #48	@ 0x30
 8004b88:	9006      	str	r0, [sp, #24]
 8004b8a:	9803      	ldr	r0, [sp, #12]
 8004b8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b8e:	f000 fdeb 	bl	8005768 <__mcmp>
 8004b92:	462a      	mov	r2, r5
 8004b94:	9008      	str	r0, [sp, #32]
 8004b96:	4621      	mov	r1, r4
 8004b98:	4648      	mov	r0, r9
 8004b9a:	f000 fe01 	bl	80057a0 <__mdiff>
 8004b9e:	68c2      	ldr	r2, [r0, #12]
 8004ba0:	4606      	mov	r6, r0
 8004ba2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ba4:	bb02      	cbnz	r2, 8004be8 <_dtoa_r+0xa48>
 8004ba6:	4601      	mov	r1, r0
 8004ba8:	9803      	ldr	r0, [sp, #12]
 8004baa:	f000 fddd 	bl	8005768 <__mcmp>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bb2:	4631      	mov	r1, r6
 8004bb4:	4648      	mov	r0, r9
 8004bb6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8004bba:	f000 fba3 	bl	8005304 <_Bfree>
 8004bbe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004bc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004bc2:	9e04      	ldr	r6, [sp, #16]
 8004bc4:	ea42 0103 	orr.w	r1, r2, r3
 8004bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bca:	4319      	orrs	r1, r3
 8004bcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bce:	d10d      	bne.n	8004bec <_dtoa_r+0xa4c>
 8004bd0:	2b39      	cmp	r3, #57	@ 0x39
 8004bd2:	d027      	beq.n	8004c24 <_dtoa_r+0xa84>
 8004bd4:	9a08      	ldr	r2, [sp, #32]
 8004bd6:	2a00      	cmp	r2, #0
 8004bd8:	dd01      	ble.n	8004bde <_dtoa_r+0xa3e>
 8004bda:	9b06      	ldr	r3, [sp, #24]
 8004bdc:	3331      	adds	r3, #49	@ 0x31
 8004bde:	f88b 3000 	strb.w	r3, [fp]
 8004be2:	e52e      	b.n	8004642 <_dtoa_r+0x4a2>
 8004be4:	4628      	mov	r0, r5
 8004be6:	e7b9      	b.n	8004b5c <_dtoa_r+0x9bc>
 8004be8:	2201      	movs	r2, #1
 8004bea:	e7e2      	b.n	8004bb2 <_dtoa_r+0xa12>
 8004bec:	9908      	ldr	r1, [sp, #32]
 8004bee:	2900      	cmp	r1, #0
 8004bf0:	db04      	blt.n	8004bfc <_dtoa_r+0xa5c>
 8004bf2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004bf4:	4301      	orrs	r1, r0
 8004bf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004bf8:	4301      	orrs	r1, r0
 8004bfa:	d120      	bne.n	8004c3e <_dtoa_r+0xa9e>
 8004bfc:	2a00      	cmp	r2, #0
 8004bfe:	ddee      	ble.n	8004bde <_dtoa_r+0xa3e>
 8004c00:	2201      	movs	r2, #1
 8004c02:	9903      	ldr	r1, [sp, #12]
 8004c04:	4648      	mov	r0, r9
 8004c06:	9304      	str	r3, [sp, #16]
 8004c08:	f000 fd42 	bl	8005690 <__lshift>
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	9003      	str	r0, [sp, #12]
 8004c10:	f000 fdaa 	bl	8005768 <__mcmp>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	9b04      	ldr	r3, [sp, #16]
 8004c18:	dc02      	bgt.n	8004c20 <_dtoa_r+0xa80>
 8004c1a:	d1e0      	bne.n	8004bde <_dtoa_r+0xa3e>
 8004c1c:	07da      	lsls	r2, r3, #31
 8004c1e:	d5de      	bpl.n	8004bde <_dtoa_r+0xa3e>
 8004c20:	2b39      	cmp	r3, #57	@ 0x39
 8004c22:	d1da      	bne.n	8004bda <_dtoa_r+0xa3a>
 8004c24:	2339      	movs	r3, #57	@ 0x39
 8004c26:	f88b 3000 	strb.w	r3, [fp]
 8004c2a:	4633      	mov	r3, r6
 8004c2c:	461e      	mov	r6, r3
 8004c2e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	2a39      	cmp	r2, #57	@ 0x39
 8004c36:	d04e      	beq.n	8004cd6 <_dtoa_r+0xb36>
 8004c38:	3201      	adds	r2, #1
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	e501      	b.n	8004642 <_dtoa_r+0x4a2>
 8004c3e:	2a00      	cmp	r2, #0
 8004c40:	dd03      	ble.n	8004c4a <_dtoa_r+0xaaa>
 8004c42:	2b39      	cmp	r3, #57	@ 0x39
 8004c44:	d0ee      	beq.n	8004c24 <_dtoa_r+0xa84>
 8004c46:	3301      	adds	r3, #1
 8004c48:	e7c9      	b.n	8004bde <_dtoa_r+0xa3e>
 8004c4a:	9a04      	ldr	r2, [sp, #16]
 8004c4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004c4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004c52:	428a      	cmp	r2, r1
 8004c54:	d028      	beq.n	8004ca8 <_dtoa_r+0xb08>
 8004c56:	2300      	movs	r3, #0
 8004c58:	220a      	movs	r2, #10
 8004c5a:	9903      	ldr	r1, [sp, #12]
 8004c5c:	4648      	mov	r0, r9
 8004c5e:	f000 fb73 	bl	8005348 <__multadd>
 8004c62:	42af      	cmp	r7, r5
 8004c64:	9003      	str	r0, [sp, #12]
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	f04f 020a 	mov.w	r2, #10
 8004c6e:	4639      	mov	r1, r7
 8004c70:	4648      	mov	r0, r9
 8004c72:	d107      	bne.n	8004c84 <_dtoa_r+0xae4>
 8004c74:	f000 fb68 	bl	8005348 <__multadd>
 8004c78:	4607      	mov	r7, r0
 8004c7a:	4605      	mov	r5, r0
 8004c7c:	9b04      	ldr	r3, [sp, #16]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	9304      	str	r3, [sp, #16]
 8004c82:	e777      	b.n	8004b74 <_dtoa_r+0x9d4>
 8004c84:	f000 fb60 	bl	8005348 <__multadd>
 8004c88:	4629      	mov	r1, r5
 8004c8a:	4607      	mov	r7, r0
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	220a      	movs	r2, #10
 8004c90:	4648      	mov	r0, r9
 8004c92:	f000 fb59 	bl	8005348 <__multadd>
 8004c96:	4605      	mov	r5, r0
 8004c98:	e7f0      	b.n	8004c7c <_dtoa_r+0xadc>
 8004c9a:	f1bb 0f00 	cmp.w	fp, #0
 8004c9e:	bfcc      	ite	gt
 8004ca0:	465e      	movgt	r6, fp
 8004ca2:	2601      	movle	r6, #1
 8004ca4:	2700      	movs	r7, #0
 8004ca6:	4456      	add	r6, sl
 8004ca8:	2201      	movs	r2, #1
 8004caa:	9903      	ldr	r1, [sp, #12]
 8004cac:	4648      	mov	r0, r9
 8004cae:	9304      	str	r3, [sp, #16]
 8004cb0:	f000 fcee 	bl	8005690 <__lshift>
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	9003      	str	r0, [sp, #12]
 8004cb8:	f000 fd56 	bl	8005768 <__mcmp>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	dcb4      	bgt.n	8004c2a <_dtoa_r+0xa8a>
 8004cc0:	d102      	bne.n	8004cc8 <_dtoa_r+0xb28>
 8004cc2:	9b04      	ldr	r3, [sp, #16]
 8004cc4:	07db      	lsls	r3, r3, #31
 8004cc6:	d4b0      	bmi.n	8004c2a <_dtoa_r+0xa8a>
 8004cc8:	4633      	mov	r3, r6
 8004cca:	461e      	mov	r6, r3
 8004ccc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cd0:	2a30      	cmp	r2, #48	@ 0x30
 8004cd2:	d0fa      	beq.n	8004cca <_dtoa_r+0xb2a>
 8004cd4:	e4b5      	b.n	8004642 <_dtoa_r+0x4a2>
 8004cd6:	459a      	cmp	sl, r3
 8004cd8:	d1a8      	bne.n	8004c2c <_dtoa_r+0xa8c>
 8004cda:	2331      	movs	r3, #49	@ 0x31
 8004cdc:	f108 0801 	add.w	r8, r8, #1
 8004ce0:	f88a 3000 	strb.w	r3, [sl]
 8004ce4:	e4ad      	b.n	8004642 <_dtoa_r+0x4a2>
 8004ce6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004ce8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004d44 <_dtoa_r+0xba4>
 8004cec:	b11b      	cbz	r3, 8004cf6 <_dtoa_r+0xb56>
 8004cee:	f10a 0308 	add.w	r3, sl, #8
 8004cf2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	4650      	mov	r0, sl
 8004cf8:	b017      	add	sp, #92	@ 0x5c
 8004cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	f77f ae2e 	ble.w	8004962 <_dtoa_r+0x7c2>
 8004d06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d08:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d0a:	2001      	movs	r0, #1
 8004d0c:	e64d      	b.n	80049aa <_dtoa_r+0x80a>
 8004d0e:	f1bb 0f00 	cmp.w	fp, #0
 8004d12:	f77f aed9 	ble.w	8004ac8 <_dtoa_r+0x928>
 8004d16:	4656      	mov	r6, sl
 8004d18:	4621      	mov	r1, r4
 8004d1a:	9803      	ldr	r0, [sp, #12]
 8004d1c:	f7ff f9b6 	bl	800408c <quorem>
 8004d20:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004d24:	f806 3b01 	strb.w	r3, [r6], #1
 8004d28:	eba6 020a 	sub.w	r2, r6, sl
 8004d2c:	4593      	cmp	fp, r2
 8004d2e:	ddb4      	ble.n	8004c9a <_dtoa_r+0xafa>
 8004d30:	2300      	movs	r3, #0
 8004d32:	220a      	movs	r2, #10
 8004d34:	4648      	mov	r0, r9
 8004d36:	9903      	ldr	r1, [sp, #12]
 8004d38:	f000 fb06 	bl	8005348 <__multadd>
 8004d3c:	9003      	str	r0, [sp, #12]
 8004d3e:	e7eb      	b.n	8004d18 <_dtoa_r+0xb78>
 8004d40:	0800600a 	.word	0x0800600a
 8004d44:	08005f8e 	.word	0x08005f8e

08004d48 <__sfputc_r>:
 8004d48:	6893      	ldr	r3, [r2, #8]
 8004d4a:	b410      	push	{r4}
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	6093      	str	r3, [r2, #8]
 8004d52:	da07      	bge.n	8004d64 <__sfputc_r+0x1c>
 8004d54:	6994      	ldr	r4, [r2, #24]
 8004d56:	42a3      	cmp	r3, r4
 8004d58:	db01      	blt.n	8004d5e <__sfputc_r+0x16>
 8004d5a:	290a      	cmp	r1, #10
 8004d5c:	d102      	bne.n	8004d64 <__sfputc_r+0x1c>
 8004d5e:	bc10      	pop	{r4}
 8004d60:	f000 be4d 	b.w	80059fe <__swbuf_r>
 8004d64:	6813      	ldr	r3, [r2, #0]
 8004d66:	1c58      	adds	r0, r3, #1
 8004d68:	6010      	str	r0, [r2, #0]
 8004d6a:	7019      	strb	r1, [r3, #0]
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	bc10      	pop	{r4}
 8004d70:	4770      	bx	lr

08004d72 <__sfputs_r>:
 8004d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d74:	4606      	mov	r6, r0
 8004d76:	460f      	mov	r7, r1
 8004d78:	4614      	mov	r4, r2
 8004d7a:	18d5      	adds	r5, r2, r3
 8004d7c:	42ac      	cmp	r4, r5
 8004d7e:	d101      	bne.n	8004d84 <__sfputs_r+0x12>
 8004d80:	2000      	movs	r0, #0
 8004d82:	e007      	b.n	8004d94 <__sfputs_r+0x22>
 8004d84:	463a      	mov	r2, r7
 8004d86:	4630      	mov	r0, r6
 8004d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d8c:	f7ff ffdc 	bl	8004d48 <__sfputc_r>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d1f3      	bne.n	8004d7c <__sfputs_r+0xa>
 8004d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d98 <_vfiprintf_r>:
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	460d      	mov	r5, r1
 8004d9e:	4614      	mov	r4, r2
 8004da0:	4698      	mov	r8, r3
 8004da2:	4606      	mov	r6, r0
 8004da4:	b09d      	sub	sp, #116	@ 0x74
 8004da6:	b118      	cbz	r0, 8004db0 <_vfiprintf_r+0x18>
 8004da8:	6a03      	ldr	r3, [r0, #32]
 8004daa:	b90b      	cbnz	r3, 8004db0 <_vfiprintf_r+0x18>
 8004dac:	f7ff f8de 	bl	8003f6c <__sinit>
 8004db0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004db2:	07d9      	lsls	r1, r3, #31
 8004db4:	d405      	bmi.n	8004dc2 <_vfiprintf_r+0x2a>
 8004db6:	89ab      	ldrh	r3, [r5, #12]
 8004db8:	059a      	lsls	r2, r3, #22
 8004dba:	d402      	bmi.n	8004dc2 <_vfiprintf_r+0x2a>
 8004dbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dbe:	f7ff f950 	bl	8004062 <__retarget_lock_acquire_recursive>
 8004dc2:	89ab      	ldrh	r3, [r5, #12]
 8004dc4:	071b      	lsls	r3, r3, #28
 8004dc6:	d501      	bpl.n	8004dcc <_vfiprintf_r+0x34>
 8004dc8:	692b      	ldr	r3, [r5, #16]
 8004dca:	b99b      	cbnz	r3, 8004df4 <_vfiprintf_r+0x5c>
 8004dcc:	4629      	mov	r1, r5
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f000 fe54 	bl	8005a7c <__swsetup_r>
 8004dd4:	b170      	cbz	r0, 8004df4 <_vfiprintf_r+0x5c>
 8004dd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dd8:	07dc      	lsls	r4, r3, #31
 8004dda:	d504      	bpl.n	8004de6 <_vfiprintf_r+0x4e>
 8004ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004de0:	b01d      	add	sp, #116	@ 0x74
 8004de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de6:	89ab      	ldrh	r3, [r5, #12]
 8004de8:	0598      	lsls	r0, r3, #22
 8004dea:	d4f7      	bmi.n	8004ddc <_vfiprintf_r+0x44>
 8004dec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dee:	f7ff f939 	bl	8004064 <__retarget_lock_release_recursive>
 8004df2:	e7f3      	b.n	8004ddc <_vfiprintf_r+0x44>
 8004df4:	2300      	movs	r3, #0
 8004df6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004df8:	2320      	movs	r3, #32
 8004dfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004dfe:	2330      	movs	r3, #48	@ 0x30
 8004e00:	f04f 0901 	mov.w	r9, #1
 8004e04:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e08:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004fb4 <_vfiprintf_r+0x21c>
 8004e0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e10:	4623      	mov	r3, r4
 8004e12:	469a      	mov	sl, r3
 8004e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e18:	b10a      	cbz	r2, 8004e1e <_vfiprintf_r+0x86>
 8004e1a:	2a25      	cmp	r2, #37	@ 0x25
 8004e1c:	d1f9      	bne.n	8004e12 <_vfiprintf_r+0x7a>
 8004e1e:	ebba 0b04 	subs.w	fp, sl, r4
 8004e22:	d00b      	beq.n	8004e3c <_vfiprintf_r+0xa4>
 8004e24:	465b      	mov	r3, fp
 8004e26:	4622      	mov	r2, r4
 8004e28:	4629      	mov	r1, r5
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f7ff ffa1 	bl	8004d72 <__sfputs_r>
 8004e30:	3001      	adds	r0, #1
 8004e32:	f000 80a7 	beq.w	8004f84 <_vfiprintf_r+0x1ec>
 8004e36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e38:	445a      	add	r2, fp
 8004e3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 809f 	beq.w	8004f84 <_vfiprintf_r+0x1ec>
 8004e46:	2300      	movs	r3, #0
 8004e48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e50:	f10a 0a01 	add.w	sl, sl, #1
 8004e54:	9304      	str	r3, [sp, #16]
 8004e56:	9307      	str	r3, [sp, #28]
 8004e58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e5e:	4654      	mov	r4, sl
 8004e60:	2205      	movs	r2, #5
 8004e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e66:	4853      	ldr	r0, [pc, #332]	@ (8004fb4 <_vfiprintf_r+0x21c>)
 8004e68:	f7ff f902 	bl	8004070 <memchr>
 8004e6c:	9a04      	ldr	r2, [sp, #16]
 8004e6e:	b9d8      	cbnz	r0, 8004ea8 <_vfiprintf_r+0x110>
 8004e70:	06d1      	lsls	r1, r2, #27
 8004e72:	bf44      	itt	mi
 8004e74:	2320      	movmi	r3, #32
 8004e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e7a:	0713      	lsls	r3, r2, #28
 8004e7c:	bf44      	itt	mi
 8004e7e:	232b      	movmi	r3, #43	@ 0x2b
 8004e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e84:	f89a 3000 	ldrb.w	r3, [sl]
 8004e88:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e8a:	d015      	beq.n	8004eb8 <_vfiprintf_r+0x120>
 8004e8c:	4654      	mov	r4, sl
 8004e8e:	2000      	movs	r0, #0
 8004e90:	f04f 0c0a 	mov.w	ip, #10
 8004e94:	9a07      	ldr	r2, [sp, #28]
 8004e96:	4621      	mov	r1, r4
 8004e98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e9c:	3b30      	subs	r3, #48	@ 0x30
 8004e9e:	2b09      	cmp	r3, #9
 8004ea0:	d94b      	bls.n	8004f3a <_vfiprintf_r+0x1a2>
 8004ea2:	b1b0      	cbz	r0, 8004ed2 <_vfiprintf_r+0x13a>
 8004ea4:	9207      	str	r2, [sp, #28]
 8004ea6:	e014      	b.n	8004ed2 <_vfiprintf_r+0x13a>
 8004ea8:	eba0 0308 	sub.w	r3, r0, r8
 8004eac:	fa09 f303 	lsl.w	r3, r9, r3
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	46a2      	mov	sl, r4
 8004eb4:	9304      	str	r3, [sp, #16]
 8004eb6:	e7d2      	b.n	8004e5e <_vfiprintf_r+0xc6>
 8004eb8:	9b03      	ldr	r3, [sp, #12]
 8004eba:	1d19      	adds	r1, r3, #4
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	9103      	str	r1, [sp, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bfbb      	ittet	lt
 8004ec4:	425b      	neglt	r3, r3
 8004ec6:	f042 0202 	orrlt.w	r2, r2, #2
 8004eca:	9307      	strge	r3, [sp, #28]
 8004ecc:	9307      	strlt	r3, [sp, #28]
 8004ece:	bfb8      	it	lt
 8004ed0:	9204      	strlt	r2, [sp, #16]
 8004ed2:	7823      	ldrb	r3, [r4, #0]
 8004ed4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ed6:	d10a      	bne.n	8004eee <_vfiprintf_r+0x156>
 8004ed8:	7863      	ldrb	r3, [r4, #1]
 8004eda:	2b2a      	cmp	r3, #42	@ 0x2a
 8004edc:	d132      	bne.n	8004f44 <_vfiprintf_r+0x1ac>
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	3402      	adds	r4, #2
 8004ee2:	1d1a      	adds	r2, r3, #4
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	9203      	str	r2, [sp, #12]
 8004ee8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004eec:	9305      	str	r3, [sp, #20]
 8004eee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004fb8 <_vfiprintf_r+0x220>
 8004ef2:	2203      	movs	r2, #3
 8004ef4:	4650      	mov	r0, sl
 8004ef6:	7821      	ldrb	r1, [r4, #0]
 8004ef8:	f7ff f8ba 	bl	8004070 <memchr>
 8004efc:	b138      	cbz	r0, 8004f0e <_vfiprintf_r+0x176>
 8004efe:	2240      	movs	r2, #64	@ 0x40
 8004f00:	9b04      	ldr	r3, [sp, #16]
 8004f02:	eba0 000a 	sub.w	r0, r0, sl
 8004f06:	4082      	lsls	r2, r0
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	3401      	adds	r4, #1
 8004f0c:	9304      	str	r3, [sp, #16]
 8004f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f12:	2206      	movs	r2, #6
 8004f14:	4829      	ldr	r0, [pc, #164]	@ (8004fbc <_vfiprintf_r+0x224>)
 8004f16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f1a:	f7ff f8a9 	bl	8004070 <memchr>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d03f      	beq.n	8004fa2 <_vfiprintf_r+0x20a>
 8004f22:	4b27      	ldr	r3, [pc, #156]	@ (8004fc0 <_vfiprintf_r+0x228>)
 8004f24:	bb1b      	cbnz	r3, 8004f6e <_vfiprintf_r+0x1d6>
 8004f26:	9b03      	ldr	r3, [sp, #12]
 8004f28:	3307      	adds	r3, #7
 8004f2a:	f023 0307 	bic.w	r3, r3, #7
 8004f2e:	3308      	adds	r3, #8
 8004f30:	9303      	str	r3, [sp, #12]
 8004f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f34:	443b      	add	r3, r7
 8004f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f38:	e76a      	b.n	8004e10 <_vfiprintf_r+0x78>
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f42:	e7a8      	b.n	8004e96 <_vfiprintf_r+0xfe>
 8004f44:	2300      	movs	r3, #0
 8004f46:	f04f 0c0a 	mov.w	ip, #10
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	3401      	adds	r4, #1
 8004f4e:	9305      	str	r3, [sp, #20]
 8004f50:	4620      	mov	r0, r4
 8004f52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f56:	3a30      	subs	r2, #48	@ 0x30
 8004f58:	2a09      	cmp	r2, #9
 8004f5a:	d903      	bls.n	8004f64 <_vfiprintf_r+0x1cc>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0c6      	beq.n	8004eee <_vfiprintf_r+0x156>
 8004f60:	9105      	str	r1, [sp, #20]
 8004f62:	e7c4      	b.n	8004eee <_vfiprintf_r+0x156>
 8004f64:	4604      	mov	r4, r0
 8004f66:	2301      	movs	r3, #1
 8004f68:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f6c:	e7f0      	b.n	8004f50 <_vfiprintf_r+0x1b8>
 8004f6e:	ab03      	add	r3, sp, #12
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	462a      	mov	r2, r5
 8004f74:	4630      	mov	r0, r6
 8004f76:	4b13      	ldr	r3, [pc, #76]	@ (8004fc4 <_vfiprintf_r+0x22c>)
 8004f78:	a904      	add	r1, sp, #16
 8004f7a:	f7fe fbaf 	bl	80036dc <_printf_float>
 8004f7e:	4607      	mov	r7, r0
 8004f80:	1c78      	adds	r0, r7, #1
 8004f82:	d1d6      	bne.n	8004f32 <_vfiprintf_r+0x19a>
 8004f84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f86:	07d9      	lsls	r1, r3, #31
 8004f88:	d405      	bmi.n	8004f96 <_vfiprintf_r+0x1fe>
 8004f8a:	89ab      	ldrh	r3, [r5, #12]
 8004f8c:	059a      	lsls	r2, r3, #22
 8004f8e:	d402      	bmi.n	8004f96 <_vfiprintf_r+0x1fe>
 8004f90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f92:	f7ff f867 	bl	8004064 <__retarget_lock_release_recursive>
 8004f96:	89ab      	ldrh	r3, [r5, #12]
 8004f98:	065b      	lsls	r3, r3, #25
 8004f9a:	f53f af1f 	bmi.w	8004ddc <_vfiprintf_r+0x44>
 8004f9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fa0:	e71e      	b.n	8004de0 <_vfiprintf_r+0x48>
 8004fa2:	ab03      	add	r3, sp, #12
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	462a      	mov	r2, r5
 8004fa8:	4630      	mov	r0, r6
 8004faa:	4b06      	ldr	r3, [pc, #24]	@ (8004fc4 <_vfiprintf_r+0x22c>)
 8004fac:	a904      	add	r1, sp, #16
 8004fae:	f7fe fe33 	bl	8003c18 <_printf_i>
 8004fb2:	e7e4      	b.n	8004f7e <_vfiprintf_r+0x1e6>
 8004fb4:	0800601b 	.word	0x0800601b
 8004fb8:	08006021 	.word	0x08006021
 8004fbc:	08006025 	.word	0x08006025
 8004fc0:	080036dd 	.word	0x080036dd
 8004fc4:	08004d73 	.word	0x08004d73

08004fc8 <malloc>:
 8004fc8:	4b02      	ldr	r3, [pc, #8]	@ (8004fd4 <malloc+0xc>)
 8004fca:	4601      	mov	r1, r0
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	f000 b825 	b.w	800501c <_malloc_r>
 8004fd2:	bf00      	nop
 8004fd4:	20000018 	.word	0x20000018

08004fd8 <sbrk_aligned>:
 8004fd8:	b570      	push	{r4, r5, r6, lr}
 8004fda:	4e0f      	ldr	r6, [pc, #60]	@ (8005018 <sbrk_aligned+0x40>)
 8004fdc:	460c      	mov	r4, r1
 8004fde:	6831      	ldr	r1, [r6, #0]
 8004fe0:	4605      	mov	r5, r0
 8004fe2:	b911      	cbnz	r1, 8004fea <sbrk_aligned+0x12>
 8004fe4:	f000 fe36 	bl	8005c54 <_sbrk_r>
 8004fe8:	6030      	str	r0, [r6, #0]
 8004fea:	4621      	mov	r1, r4
 8004fec:	4628      	mov	r0, r5
 8004fee:	f000 fe31 	bl	8005c54 <_sbrk_r>
 8004ff2:	1c43      	adds	r3, r0, #1
 8004ff4:	d103      	bne.n	8004ffe <sbrk_aligned+0x26>
 8004ff6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	bd70      	pop	{r4, r5, r6, pc}
 8004ffe:	1cc4      	adds	r4, r0, #3
 8005000:	f024 0403 	bic.w	r4, r4, #3
 8005004:	42a0      	cmp	r0, r4
 8005006:	d0f8      	beq.n	8004ffa <sbrk_aligned+0x22>
 8005008:	1a21      	subs	r1, r4, r0
 800500a:	4628      	mov	r0, r5
 800500c:	f000 fe22 	bl	8005c54 <_sbrk_r>
 8005010:	3001      	adds	r0, #1
 8005012:	d1f2      	bne.n	8004ffa <sbrk_aligned+0x22>
 8005014:	e7ef      	b.n	8004ff6 <sbrk_aligned+0x1e>
 8005016:	bf00      	nop
 8005018:	200003b0 	.word	0x200003b0

0800501c <_malloc_r>:
 800501c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005020:	1ccd      	adds	r5, r1, #3
 8005022:	f025 0503 	bic.w	r5, r5, #3
 8005026:	3508      	adds	r5, #8
 8005028:	2d0c      	cmp	r5, #12
 800502a:	bf38      	it	cc
 800502c:	250c      	movcc	r5, #12
 800502e:	2d00      	cmp	r5, #0
 8005030:	4606      	mov	r6, r0
 8005032:	db01      	blt.n	8005038 <_malloc_r+0x1c>
 8005034:	42a9      	cmp	r1, r5
 8005036:	d904      	bls.n	8005042 <_malloc_r+0x26>
 8005038:	230c      	movs	r3, #12
 800503a:	6033      	str	r3, [r6, #0]
 800503c:	2000      	movs	r0, #0
 800503e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005042:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005118 <_malloc_r+0xfc>
 8005046:	f000 f911 	bl	800526c <__malloc_lock>
 800504a:	f8d8 3000 	ldr.w	r3, [r8]
 800504e:	461c      	mov	r4, r3
 8005050:	bb44      	cbnz	r4, 80050a4 <_malloc_r+0x88>
 8005052:	4629      	mov	r1, r5
 8005054:	4630      	mov	r0, r6
 8005056:	f7ff ffbf 	bl	8004fd8 <sbrk_aligned>
 800505a:	1c43      	adds	r3, r0, #1
 800505c:	4604      	mov	r4, r0
 800505e:	d158      	bne.n	8005112 <_malloc_r+0xf6>
 8005060:	f8d8 4000 	ldr.w	r4, [r8]
 8005064:	4627      	mov	r7, r4
 8005066:	2f00      	cmp	r7, #0
 8005068:	d143      	bne.n	80050f2 <_malloc_r+0xd6>
 800506a:	2c00      	cmp	r4, #0
 800506c:	d04b      	beq.n	8005106 <_malloc_r+0xea>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	4639      	mov	r1, r7
 8005072:	4630      	mov	r0, r6
 8005074:	eb04 0903 	add.w	r9, r4, r3
 8005078:	f000 fdec 	bl	8005c54 <_sbrk_r>
 800507c:	4581      	cmp	r9, r0
 800507e:	d142      	bne.n	8005106 <_malloc_r+0xea>
 8005080:	6821      	ldr	r1, [r4, #0]
 8005082:	4630      	mov	r0, r6
 8005084:	1a6d      	subs	r5, r5, r1
 8005086:	4629      	mov	r1, r5
 8005088:	f7ff ffa6 	bl	8004fd8 <sbrk_aligned>
 800508c:	3001      	adds	r0, #1
 800508e:	d03a      	beq.n	8005106 <_malloc_r+0xea>
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	442b      	add	r3, r5
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	f8d8 3000 	ldr.w	r3, [r8]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	bb62      	cbnz	r2, 80050f8 <_malloc_r+0xdc>
 800509e:	f8c8 7000 	str.w	r7, [r8]
 80050a2:	e00f      	b.n	80050c4 <_malloc_r+0xa8>
 80050a4:	6822      	ldr	r2, [r4, #0]
 80050a6:	1b52      	subs	r2, r2, r5
 80050a8:	d420      	bmi.n	80050ec <_malloc_r+0xd0>
 80050aa:	2a0b      	cmp	r2, #11
 80050ac:	d917      	bls.n	80050de <_malloc_r+0xc2>
 80050ae:	1961      	adds	r1, r4, r5
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	6025      	str	r5, [r4, #0]
 80050b4:	bf18      	it	ne
 80050b6:	6059      	strne	r1, [r3, #4]
 80050b8:	6863      	ldr	r3, [r4, #4]
 80050ba:	bf08      	it	eq
 80050bc:	f8c8 1000 	streq.w	r1, [r8]
 80050c0:	5162      	str	r2, [r4, r5]
 80050c2:	604b      	str	r3, [r1, #4]
 80050c4:	4630      	mov	r0, r6
 80050c6:	f000 f8d7 	bl	8005278 <__malloc_unlock>
 80050ca:	f104 000b 	add.w	r0, r4, #11
 80050ce:	1d23      	adds	r3, r4, #4
 80050d0:	f020 0007 	bic.w	r0, r0, #7
 80050d4:	1ac2      	subs	r2, r0, r3
 80050d6:	bf1c      	itt	ne
 80050d8:	1a1b      	subne	r3, r3, r0
 80050da:	50a3      	strne	r3, [r4, r2]
 80050dc:	e7af      	b.n	800503e <_malloc_r+0x22>
 80050de:	6862      	ldr	r2, [r4, #4]
 80050e0:	42a3      	cmp	r3, r4
 80050e2:	bf0c      	ite	eq
 80050e4:	f8c8 2000 	streq.w	r2, [r8]
 80050e8:	605a      	strne	r2, [r3, #4]
 80050ea:	e7eb      	b.n	80050c4 <_malloc_r+0xa8>
 80050ec:	4623      	mov	r3, r4
 80050ee:	6864      	ldr	r4, [r4, #4]
 80050f0:	e7ae      	b.n	8005050 <_malloc_r+0x34>
 80050f2:	463c      	mov	r4, r7
 80050f4:	687f      	ldr	r7, [r7, #4]
 80050f6:	e7b6      	b.n	8005066 <_malloc_r+0x4a>
 80050f8:	461a      	mov	r2, r3
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	42a3      	cmp	r3, r4
 80050fe:	d1fb      	bne.n	80050f8 <_malloc_r+0xdc>
 8005100:	2300      	movs	r3, #0
 8005102:	6053      	str	r3, [r2, #4]
 8005104:	e7de      	b.n	80050c4 <_malloc_r+0xa8>
 8005106:	230c      	movs	r3, #12
 8005108:	4630      	mov	r0, r6
 800510a:	6033      	str	r3, [r6, #0]
 800510c:	f000 f8b4 	bl	8005278 <__malloc_unlock>
 8005110:	e794      	b.n	800503c <_malloc_r+0x20>
 8005112:	6005      	str	r5, [r0, #0]
 8005114:	e7d6      	b.n	80050c4 <_malloc_r+0xa8>
 8005116:	bf00      	nop
 8005118:	200003b4 	.word	0x200003b4

0800511c <__sflush_r>:
 800511c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	0716      	lsls	r6, r2, #28
 8005124:	4605      	mov	r5, r0
 8005126:	460c      	mov	r4, r1
 8005128:	d454      	bmi.n	80051d4 <__sflush_r+0xb8>
 800512a:	684b      	ldr	r3, [r1, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	dc02      	bgt.n	8005136 <__sflush_r+0x1a>
 8005130:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	dd48      	ble.n	80051c8 <__sflush_r+0xac>
 8005136:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005138:	2e00      	cmp	r6, #0
 800513a:	d045      	beq.n	80051c8 <__sflush_r+0xac>
 800513c:	2300      	movs	r3, #0
 800513e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005142:	682f      	ldr	r7, [r5, #0]
 8005144:	6a21      	ldr	r1, [r4, #32]
 8005146:	602b      	str	r3, [r5, #0]
 8005148:	d030      	beq.n	80051ac <__sflush_r+0x90>
 800514a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	0759      	lsls	r1, r3, #29
 8005150:	d505      	bpl.n	800515e <__sflush_r+0x42>
 8005152:	6863      	ldr	r3, [r4, #4]
 8005154:	1ad2      	subs	r2, r2, r3
 8005156:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005158:	b10b      	cbz	r3, 800515e <__sflush_r+0x42>
 800515a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800515c:	1ad2      	subs	r2, r2, r3
 800515e:	2300      	movs	r3, #0
 8005160:	4628      	mov	r0, r5
 8005162:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005164:	6a21      	ldr	r1, [r4, #32]
 8005166:	47b0      	blx	r6
 8005168:	1c43      	adds	r3, r0, #1
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	d106      	bne.n	800517c <__sflush_r+0x60>
 800516e:	6829      	ldr	r1, [r5, #0]
 8005170:	291d      	cmp	r1, #29
 8005172:	d82b      	bhi.n	80051cc <__sflush_r+0xb0>
 8005174:	4a28      	ldr	r2, [pc, #160]	@ (8005218 <__sflush_r+0xfc>)
 8005176:	40ca      	lsrs	r2, r1
 8005178:	07d6      	lsls	r6, r2, #31
 800517a:	d527      	bpl.n	80051cc <__sflush_r+0xb0>
 800517c:	2200      	movs	r2, #0
 800517e:	6062      	str	r2, [r4, #4]
 8005180:	6922      	ldr	r2, [r4, #16]
 8005182:	04d9      	lsls	r1, r3, #19
 8005184:	6022      	str	r2, [r4, #0]
 8005186:	d504      	bpl.n	8005192 <__sflush_r+0x76>
 8005188:	1c42      	adds	r2, r0, #1
 800518a:	d101      	bne.n	8005190 <__sflush_r+0x74>
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	b903      	cbnz	r3, 8005192 <__sflush_r+0x76>
 8005190:	6560      	str	r0, [r4, #84]	@ 0x54
 8005192:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005194:	602f      	str	r7, [r5, #0]
 8005196:	b1b9      	cbz	r1, 80051c8 <__sflush_r+0xac>
 8005198:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800519c:	4299      	cmp	r1, r3
 800519e:	d002      	beq.n	80051a6 <__sflush_r+0x8a>
 80051a0:	4628      	mov	r0, r5
 80051a2:	f000 fddb 	bl	8005d5c <_free_r>
 80051a6:	2300      	movs	r3, #0
 80051a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80051aa:	e00d      	b.n	80051c8 <__sflush_r+0xac>
 80051ac:	2301      	movs	r3, #1
 80051ae:	4628      	mov	r0, r5
 80051b0:	47b0      	blx	r6
 80051b2:	4602      	mov	r2, r0
 80051b4:	1c50      	adds	r0, r2, #1
 80051b6:	d1c9      	bne.n	800514c <__sflush_r+0x30>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0c6      	beq.n	800514c <__sflush_r+0x30>
 80051be:	2b1d      	cmp	r3, #29
 80051c0:	d001      	beq.n	80051c6 <__sflush_r+0xaa>
 80051c2:	2b16      	cmp	r3, #22
 80051c4:	d11d      	bne.n	8005202 <__sflush_r+0xe6>
 80051c6:	602f      	str	r7, [r5, #0]
 80051c8:	2000      	movs	r0, #0
 80051ca:	e021      	b.n	8005210 <__sflush_r+0xf4>
 80051cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051d0:	b21b      	sxth	r3, r3
 80051d2:	e01a      	b.n	800520a <__sflush_r+0xee>
 80051d4:	690f      	ldr	r7, [r1, #16]
 80051d6:	2f00      	cmp	r7, #0
 80051d8:	d0f6      	beq.n	80051c8 <__sflush_r+0xac>
 80051da:	0793      	lsls	r3, r2, #30
 80051dc:	bf18      	it	ne
 80051de:	2300      	movne	r3, #0
 80051e0:	680e      	ldr	r6, [r1, #0]
 80051e2:	bf08      	it	eq
 80051e4:	694b      	ldreq	r3, [r1, #20]
 80051e6:	1bf6      	subs	r6, r6, r7
 80051e8:	600f      	str	r7, [r1, #0]
 80051ea:	608b      	str	r3, [r1, #8]
 80051ec:	2e00      	cmp	r6, #0
 80051ee:	ddeb      	ble.n	80051c8 <__sflush_r+0xac>
 80051f0:	4633      	mov	r3, r6
 80051f2:	463a      	mov	r2, r7
 80051f4:	4628      	mov	r0, r5
 80051f6:	6a21      	ldr	r1, [r4, #32]
 80051f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80051fc:	47e0      	blx	ip
 80051fe:	2800      	cmp	r0, #0
 8005200:	dc07      	bgt.n	8005212 <__sflush_r+0xf6>
 8005202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800520a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800520e:	81a3      	strh	r3, [r4, #12]
 8005210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005212:	4407      	add	r7, r0
 8005214:	1a36      	subs	r6, r6, r0
 8005216:	e7e9      	b.n	80051ec <__sflush_r+0xd0>
 8005218:	20400001 	.word	0x20400001

0800521c <_fflush_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	690b      	ldr	r3, [r1, #16]
 8005220:	4605      	mov	r5, r0
 8005222:	460c      	mov	r4, r1
 8005224:	b913      	cbnz	r3, 800522c <_fflush_r+0x10>
 8005226:	2500      	movs	r5, #0
 8005228:	4628      	mov	r0, r5
 800522a:	bd38      	pop	{r3, r4, r5, pc}
 800522c:	b118      	cbz	r0, 8005236 <_fflush_r+0x1a>
 800522e:	6a03      	ldr	r3, [r0, #32]
 8005230:	b90b      	cbnz	r3, 8005236 <_fflush_r+0x1a>
 8005232:	f7fe fe9b 	bl	8003f6c <__sinit>
 8005236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0f3      	beq.n	8005226 <_fflush_r+0xa>
 800523e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005240:	07d0      	lsls	r0, r2, #31
 8005242:	d404      	bmi.n	800524e <_fflush_r+0x32>
 8005244:	0599      	lsls	r1, r3, #22
 8005246:	d402      	bmi.n	800524e <_fflush_r+0x32>
 8005248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800524a:	f7fe ff0a 	bl	8004062 <__retarget_lock_acquire_recursive>
 800524e:	4628      	mov	r0, r5
 8005250:	4621      	mov	r1, r4
 8005252:	f7ff ff63 	bl	800511c <__sflush_r>
 8005256:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005258:	4605      	mov	r5, r0
 800525a:	07da      	lsls	r2, r3, #31
 800525c:	d4e4      	bmi.n	8005228 <_fflush_r+0xc>
 800525e:	89a3      	ldrh	r3, [r4, #12]
 8005260:	059b      	lsls	r3, r3, #22
 8005262:	d4e1      	bmi.n	8005228 <_fflush_r+0xc>
 8005264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005266:	f7fe fefd 	bl	8004064 <__retarget_lock_release_recursive>
 800526a:	e7dd      	b.n	8005228 <_fflush_r+0xc>

0800526c <__malloc_lock>:
 800526c:	4801      	ldr	r0, [pc, #4]	@ (8005274 <__malloc_lock+0x8>)
 800526e:	f7fe bef8 	b.w	8004062 <__retarget_lock_acquire_recursive>
 8005272:	bf00      	nop
 8005274:	200003ac 	.word	0x200003ac

08005278 <__malloc_unlock>:
 8005278:	4801      	ldr	r0, [pc, #4]	@ (8005280 <__malloc_unlock+0x8>)
 800527a:	f7fe bef3 	b.w	8004064 <__retarget_lock_release_recursive>
 800527e:	bf00      	nop
 8005280:	200003ac 	.word	0x200003ac

08005284 <_Balloc>:
 8005284:	b570      	push	{r4, r5, r6, lr}
 8005286:	69c6      	ldr	r6, [r0, #28]
 8005288:	4604      	mov	r4, r0
 800528a:	460d      	mov	r5, r1
 800528c:	b976      	cbnz	r6, 80052ac <_Balloc+0x28>
 800528e:	2010      	movs	r0, #16
 8005290:	f7ff fe9a 	bl	8004fc8 <malloc>
 8005294:	4602      	mov	r2, r0
 8005296:	61e0      	str	r0, [r4, #28]
 8005298:	b920      	cbnz	r0, 80052a4 <_Balloc+0x20>
 800529a:	216b      	movs	r1, #107	@ 0x6b
 800529c:	4b17      	ldr	r3, [pc, #92]	@ (80052fc <_Balloc+0x78>)
 800529e:	4818      	ldr	r0, [pc, #96]	@ (8005300 <_Balloc+0x7c>)
 80052a0:	f000 fd2a 	bl	8005cf8 <__assert_func>
 80052a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052a8:	6006      	str	r6, [r0, #0]
 80052aa:	60c6      	str	r6, [r0, #12]
 80052ac:	69e6      	ldr	r6, [r4, #28]
 80052ae:	68f3      	ldr	r3, [r6, #12]
 80052b0:	b183      	cbz	r3, 80052d4 <_Balloc+0x50>
 80052b2:	69e3      	ldr	r3, [r4, #28]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80052ba:	b9b8      	cbnz	r0, 80052ec <_Balloc+0x68>
 80052bc:	2101      	movs	r1, #1
 80052be:	fa01 f605 	lsl.w	r6, r1, r5
 80052c2:	1d72      	adds	r2, r6, #5
 80052c4:	4620      	mov	r0, r4
 80052c6:	0092      	lsls	r2, r2, #2
 80052c8:	f000 fd34 	bl	8005d34 <_calloc_r>
 80052cc:	b160      	cbz	r0, 80052e8 <_Balloc+0x64>
 80052ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80052d2:	e00e      	b.n	80052f2 <_Balloc+0x6e>
 80052d4:	2221      	movs	r2, #33	@ 0x21
 80052d6:	2104      	movs	r1, #4
 80052d8:	4620      	mov	r0, r4
 80052da:	f000 fd2b 	bl	8005d34 <_calloc_r>
 80052de:	69e3      	ldr	r3, [r4, #28]
 80052e0:	60f0      	str	r0, [r6, #12]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e4      	bne.n	80052b2 <_Balloc+0x2e>
 80052e8:	2000      	movs	r0, #0
 80052ea:	bd70      	pop	{r4, r5, r6, pc}
 80052ec:	6802      	ldr	r2, [r0, #0]
 80052ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80052f2:	2300      	movs	r3, #0
 80052f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80052f8:	e7f7      	b.n	80052ea <_Balloc+0x66>
 80052fa:	bf00      	nop
 80052fc:	08005f9b 	.word	0x08005f9b
 8005300:	0800602c 	.word	0x0800602c

08005304 <_Bfree>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	69c6      	ldr	r6, [r0, #28]
 8005308:	4605      	mov	r5, r0
 800530a:	460c      	mov	r4, r1
 800530c:	b976      	cbnz	r6, 800532c <_Bfree+0x28>
 800530e:	2010      	movs	r0, #16
 8005310:	f7ff fe5a 	bl	8004fc8 <malloc>
 8005314:	4602      	mov	r2, r0
 8005316:	61e8      	str	r0, [r5, #28]
 8005318:	b920      	cbnz	r0, 8005324 <_Bfree+0x20>
 800531a:	218f      	movs	r1, #143	@ 0x8f
 800531c:	4b08      	ldr	r3, [pc, #32]	@ (8005340 <_Bfree+0x3c>)
 800531e:	4809      	ldr	r0, [pc, #36]	@ (8005344 <_Bfree+0x40>)
 8005320:	f000 fcea 	bl	8005cf8 <__assert_func>
 8005324:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005328:	6006      	str	r6, [r0, #0]
 800532a:	60c6      	str	r6, [r0, #12]
 800532c:	b13c      	cbz	r4, 800533e <_Bfree+0x3a>
 800532e:	69eb      	ldr	r3, [r5, #28]
 8005330:	6862      	ldr	r2, [r4, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005338:	6021      	str	r1, [r4, #0]
 800533a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	08005f9b 	.word	0x08005f9b
 8005344:	0800602c 	.word	0x0800602c

08005348 <__multadd>:
 8005348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800534c:	4607      	mov	r7, r0
 800534e:	460c      	mov	r4, r1
 8005350:	461e      	mov	r6, r3
 8005352:	2000      	movs	r0, #0
 8005354:	690d      	ldr	r5, [r1, #16]
 8005356:	f101 0c14 	add.w	ip, r1, #20
 800535a:	f8dc 3000 	ldr.w	r3, [ip]
 800535e:	3001      	adds	r0, #1
 8005360:	b299      	uxth	r1, r3
 8005362:	fb02 6101 	mla	r1, r2, r1, r6
 8005366:	0c1e      	lsrs	r6, r3, #16
 8005368:	0c0b      	lsrs	r3, r1, #16
 800536a:	fb02 3306 	mla	r3, r2, r6, r3
 800536e:	b289      	uxth	r1, r1
 8005370:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005374:	4285      	cmp	r5, r0
 8005376:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800537a:	f84c 1b04 	str.w	r1, [ip], #4
 800537e:	dcec      	bgt.n	800535a <__multadd+0x12>
 8005380:	b30e      	cbz	r6, 80053c6 <__multadd+0x7e>
 8005382:	68a3      	ldr	r3, [r4, #8]
 8005384:	42ab      	cmp	r3, r5
 8005386:	dc19      	bgt.n	80053bc <__multadd+0x74>
 8005388:	6861      	ldr	r1, [r4, #4]
 800538a:	4638      	mov	r0, r7
 800538c:	3101      	adds	r1, #1
 800538e:	f7ff ff79 	bl	8005284 <_Balloc>
 8005392:	4680      	mov	r8, r0
 8005394:	b928      	cbnz	r0, 80053a2 <__multadd+0x5a>
 8005396:	4602      	mov	r2, r0
 8005398:	21ba      	movs	r1, #186	@ 0xba
 800539a:	4b0c      	ldr	r3, [pc, #48]	@ (80053cc <__multadd+0x84>)
 800539c:	480c      	ldr	r0, [pc, #48]	@ (80053d0 <__multadd+0x88>)
 800539e:	f000 fcab 	bl	8005cf8 <__assert_func>
 80053a2:	6922      	ldr	r2, [r4, #16]
 80053a4:	f104 010c 	add.w	r1, r4, #12
 80053a8:	3202      	adds	r2, #2
 80053aa:	0092      	lsls	r2, r2, #2
 80053ac:	300c      	adds	r0, #12
 80053ae:	f000 fc95 	bl	8005cdc <memcpy>
 80053b2:	4621      	mov	r1, r4
 80053b4:	4638      	mov	r0, r7
 80053b6:	f7ff ffa5 	bl	8005304 <_Bfree>
 80053ba:	4644      	mov	r4, r8
 80053bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80053c0:	3501      	adds	r5, #1
 80053c2:	615e      	str	r6, [r3, #20]
 80053c4:	6125      	str	r5, [r4, #16]
 80053c6:	4620      	mov	r0, r4
 80053c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053cc:	0800600a 	.word	0x0800600a
 80053d0:	0800602c 	.word	0x0800602c

080053d4 <__hi0bits>:
 80053d4:	4603      	mov	r3, r0
 80053d6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80053da:	bf3a      	itte	cc
 80053dc:	0403      	lslcc	r3, r0, #16
 80053de:	2010      	movcc	r0, #16
 80053e0:	2000      	movcs	r0, #0
 80053e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053e6:	bf3c      	itt	cc
 80053e8:	021b      	lslcc	r3, r3, #8
 80053ea:	3008      	addcc	r0, #8
 80053ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053f0:	bf3c      	itt	cc
 80053f2:	011b      	lslcc	r3, r3, #4
 80053f4:	3004      	addcc	r0, #4
 80053f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fa:	bf3c      	itt	cc
 80053fc:	009b      	lslcc	r3, r3, #2
 80053fe:	3002      	addcc	r0, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	db05      	blt.n	8005410 <__hi0bits+0x3c>
 8005404:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005408:	f100 0001 	add.w	r0, r0, #1
 800540c:	bf08      	it	eq
 800540e:	2020      	moveq	r0, #32
 8005410:	4770      	bx	lr

08005412 <__lo0bits>:
 8005412:	6803      	ldr	r3, [r0, #0]
 8005414:	4602      	mov	r2, r0
 8005416:	f013 0007 	ands.w	r0, r3, #7
 800541a:	d00b      	beq.n	8005434 <__lo0bits+0x22>
 800541c:	07d9      	lsls	r1, r3, #31
 800541e:	d421      	bmi.n	8005464 <__lo0bits+0x52>
 8005420:	0798      	lsls	r0, r3, #30
 8005422:	bf49      	itett	mi
 8005424:	085b      	lsrmi	r3, r3, #1
 8005426:	089b      	lsrpl	r3, r3, #2
 8005428:	2001      	movmi	r0, #1
 800542a:	6013      	strmi	r3, [r2, #0]
 800542c:	bf5c      	itt	pl
 800542e:	2002      	movpl	r0, #2
 8005430:	6013      	strpl	r3, [r2, #0]
 8005432:	4770      	bx	lr
 8005434:	b299      	uxth	r1, r3
 8005436:	b909      	cbnz	r1, 800543c <__lo0bits+0x2a>
 8005438:	2010      	movs	r0, #16
 800543a:	0c1b      	lsrs	r3, r3, #16
 800543c:	b2d9      	uxtb	r1, r3
 800543e:	b909      	cbnz	r1, 8005444 <__lo0bits+0x32>
 8005440:	3008      	adds	r0, #8
 8005442:	0a1b      	lsrs	r3, r3, #8
 8005444:	0719      	lsls	r1, r3, #28
 8005446:	bf04      	itt	eq
 8005448:	091b      	lsreq	r3, r3, #4
 800544a:	3004      	addeq	r0, #4
 800544c:	0799      	lsls	r1, r3, #30
 800544e:	bf04      	itt	eq
 8005450:	089b      	lsreq	r3, r3, #2
 8005452:	3002      	addeq	r0, #2
 8005454:	07d9      	lsls	r1, r3, #31
 8005456:	d403      	bmi.n	8005460 <__lo0bits+0x4e>
 8005458:	085b      	lsrs	r3, r3, #1
 800545a:	f100 0001 	add.w	r0, r0, #1
 800545e:	d003      	beq.n	8005468 <__lo0bits+0x56>
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	4770      	bx	lr
 8005464:	2000      	movs	r0, #0
 8005466:	4770      	bx	lr
 8005468:	2020      	movs	r0, #32
 800546a:	4770      	bx	lr

0800546c <__i2b>:
 800546c:	b510      	push	{r4, lr}
 800546e:	460c      	mov	r4, r1
 8005470:	2101      	movs	r1, #1
 8005472:	f7ff ff07 	bl	8005284 <_Balloc>
 8005476:	4602      	mov	r2, r0
 8005478:	b928      	cbnz	r0, 8005486 <__i2b+0x1a>
 800547a:	f240 1145 	movw	r1, #325	@ 0x145
 800547e:	4b04      	ldr	r3, [pc, #16]	@ (8005490 <__i2b+0x24>)
 8005480:	4804      	ldr	r0, [pc, #16]	@ (8005494 <__i2b+0x28>)
 8005482:	f000 fc39 	bl	8005cf8 <__assert_func>
 8005486:	2301      	movs	r3, #1
 8005488:	6144      	str	r4, [r0, #20]
 800548a:	6103      	str	r3, [r0, #16]
 800548c:	bd10      	pop	{r4, pc}
 800548e:	bf00      	nop
 8005490:	0800600a 	.word	0x0800600a
 8005494:	0800602c 	.word	0x0800602c

08005498 <__multiply>:
 8005498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549c:	4617      	mov	r7, r2
 800549e:	690a      	ldr	r2, [r1, #16]
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4689      	mov	r9, r1
 80054a4:	429a      	cmp	r2, r3
 80054a6:	bfa2      	ittt	ge
 80054a8:	463b      	movge	r3, r7
 80054aa:	460f      	movge	r7, r1
 80054ac:	4699      	movge	r9, r3
 80054ae:	693d      	ldr	r5, [r7, #16]
 80054b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	eb05 060a 	add.w	r6, r5, sl
 80054bc:	42b3      	cmp	r3, r6
 80054be:	b085      	sub	sp, #20
 80054c0:	bfb8      	it	lt
 80054c2:	3101      	addlt	r1, #1
 80054c4:	f7ff fede 	bl	8005284 <_Balloc>
 80054c8:	b930      	cbnz	r0, 80054d8 <__multiply+0x40>
 80054ca:	4602      	mov	r2, r0
 80054cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80054d0:	4b40      	ldr	r3, [pc, #256]	@ (80055d4 <__multiply+0x13c>)
 80054d2:	4841      	ldr	r0, [pc, #260]	@ (80055d8 <__multiply+0x140>)
 80054d4:	f000 fc10 	bl	8005cf8 <__assert_func>
 80054d8:	f100 0414 	add.w	r4, r0, #20
 80054dc:	4623      	mov	r3, r4
 80054de:	2200      	movs	r2, #0
 80054e0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80054e4:	4573      	cmp	r3, lr
 80054e6:	d320      	bcc.n	800552a <__multiply+0x92>
 80054e8:	f107 0814 	add.w	r8, r7, #20
 80054ec:	f109 0114 	add.w	r1, r9, #20
 80054f0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80054f4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80054f8:	9302      	str	r3, [sp, #8]
 80054fa:	1beb      	subs	r3, r5, r7
 80054fc:	3b15      	subs	r3, #21
 80054fe:	f023 0303 	bic.w	r3, r3, #3
 8005502:	3304      	adds	r3, #4
 8005504:	3715      	adds	r7, #21
 8005506:	42bd      	cmp	r5, r7
 8005508:	bf38      	it	cc
 800550a:	2304      	movcc	r3, #4
 800550c:	9301      	str	r3, [sp, #4]
 800550e:	9b02      	ldr	r3, [sp, #8]
 8005510:	9103      	str	r1, [sp, #12]
 8005512:	428b      	cmp	r3, r1
 8005514:	d80c      	bhi.n	8005530 <__multiply+0x98>
 8005516:	2e00      	cmp	r6, #0
 8005518:	dd03      	ble.n	8005522 <__multiply+0x8a>
 800551a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800551e:	2b00      	cmp	r3, #0
 8005520:	d055      	beq.n	80055ce <__multiply+0x136>
 8005522:	6106      	str	r6, [r0, #16]
 8005524:	b005      	add	sp, #20
 8005526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800552a:	f843 2b04 	str.w	r2, [r3], #4
 800552e:	e7d9      	b.n	80054e4 <__multiply+0x4c>
 8005530:	f8b1 a000 	ldrh.w	sl, [r1]
 8005534:	f1ba 0f00 	cmp.w	sl, #0
 8005538:	d01f      	beq.n	800557a <__multiply+0xe2>
 800553a:	46c4      	mov	ip, r8
 800553c:	46a1      	mov	r9, r4
 800553e:	2700      	movs	r7, #0
 8005540:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005544:	f8d9 3000 	ldr.w	r3, [r9]
 8005548:	fa1f fb82 	uxth.w	fp, r2
 800554c:	b29b      	uxth	r3, r3
 800554e:	fb0a 330b 	mla	r3, sl, fp, r3
 8005552:	443b      	add	r3, r7
 8005554:	f8d9 7000 	ldr.w	r7, [r9]
 8005558:	0c12      	lsrs	r2, r2, #16
 800555a:	0c3f      	lsrs	r7, r7, #16
 800555c:	fb0a 7202 	mla	r2, sl, r2, r7
 8005560:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005564:	b29b      	uxth	r3, r3
 8005566:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800556a:	4565      	cmp	r5, ip
 800556c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005570:	f849 3b04 	str.w	r3, [r9], #4
 8005574:	d8e4      	bhi.n	8005540 <__multiply+0xa8>
 8005576:	9b01      	ldr	r3, [sp, #4]
 8005578:	50e7      	str	r7, [r4, r3]
 800557a:	9b03      	ldr	r3, [sp, #12]
 800557c:	3104      	adds	r1, #4
 800557e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005582:	f1b9 0f00 	cmp.w	r9, #0
 8005586:	d020      	beq.n	80055ca <__multiply+0x132>
 8005588:	4647      	mov	r7, r8
 800558a:	46a4      	mov	ip, r4
 800558c:	f04f 0a00 	mov.w	sl, #0
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	f8b7 b000 	ldrh.w	fp, [r7]
 8005596:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800559a:	b29b      	uxth	r3, r3
 800559c:	fb09 220b 	mla	r2, r9, fp, r2
 80055a0:	4452      	add	r2, sl
 80055a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055a6:	f84c 3b04 	str.w	r3, [ip], #4
 80055aa:	f857 3b04 	ldr.w	r3, [r7], #4
 80055ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055b2:	f8bc 3000 	ldrh.w	r3, [ip]
 80055b6:	42bd      	cmp	r5, r7
 80055b8:	fb09 330a 	mla	r3, r9, sl, r3
 80055bc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80055c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055c4:	d8e5      	bhi.n	8005592 <__multiply+0xfa>
 80055c6:	9a01      	ldr	r2, [sp, #4]
 80055c8:	50a3      	str	r3, [r4, r2]
 80055ca:	3404      	adds	r4, #4
 80055cc:	e79f      	b.n	800550e <__multiply+0x76>
 80055ce:	3e01      	subs	r6, #1
 80055d0:	e7a1      	b.n	8005516 <__multiply+0x7e>
 80055d2:	bf00      	nop
 80055d4:	0800600a 	.word	0x0800600a
 80055d8:	0800602c 	.word	0x0800602c

080055dc <__pow5mult>:
 80055dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055e0:	4615      	mov	r5, r2
 80055e2:	f012 0203 	ands.w	r2, r2, #3
 80055e6:	4607      	mov	r7, r0
 80055e8:	460e      	mov	r6, r1
 80055ea:	d007      	beq.n	80055fc <__pow5mult+0x20>
 80055ec:	4c25      	ldr	r4, [pc, #148]	@ (8005684 <__pow5mult+0xa8>)
 80055ee:	3a01      	subs	r2, #1
 80055f0:	2300      	movs	r3, #0
 80055f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80055f6:	f7ff fea7 	bl	8005348 <__multadd>
 80055fa:	4606      	mov	r6, r0
 80055fc:	10ad      	asrs	r5, r5, #2
 80055fe:	d03d      	beq.n	800567c <__pow5mult+0xa0>
 8005600:	69fc      	ldr	r4, [r7, #28]
 8005602:	b97c      	cbnz	r4, 8005624 <__pow5mult+0x48>
 8005604:	2010      	movs	r0, #16
 8005606:	f7ff fcdf 	bl	8004fc8 <malloc>
 800560a:	4602      	mov	r2, r0
 800560c:	61f8      	str	r0, [r7, #28]
 800560e:	b928      	cbnz	r0, 800561c <__pow5mult+0x40>
 8005610:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005614:	4b1c      	ldr	r3, [pc, #112]	@ (8005688 <__pow5mult+0xac>)
 8005616:	481d      	ldr	r0, [pc, #116]	@ (800568c <__pow5mult+0xb0>)
 8005618:	f000 fb6e 	bl	8005cf8 <__assert_func>
 800561c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005620:	6004      	str	r4, [r0, #0]
 8005622:	60c4      	str	r4, [r0, #12]
 8005624:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005628:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800562c:	b94c      	cbnz	r4, 8005642 <__pow5mult+0x66>
 800562e:	f240 2171 	movw	r1, #625	@ 0x271
 8005632:	4638      	mov	r0, r7
 8005634:	f7ff ff1a 	bl	800546c <__i2b>
 8005638:	2300      	movs	r3, #0
 800563a:	4604      	mov	r4, r0
 800563c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005640:	6003      	str	r3, [r0, #0]
 8005642:	f04f 0900 	mov.w	r9, #0
 8005646:	07eb      	lsls	r3, r5, #31
 8005648:	d50a      	bpl.n	8005660 <__pow5mult+0x84>
 800564a:	4631      	mov	r1, r6
 800564c:	4622      	mov	r2, r4
 800564e:	4638      	mov	r0, r7
 8005650:	f7ff ff22 	bl	8005498 <__multiply>
 8005654:	4680      	mov	r8, r0
 8005656:	4631      	mov	r1, r6
 8005658:	4638      	mov	r0, r7
 800565a:	f7ff fe53 	bl	8005304 <_Bfree>
 800565e:	4646      	mov	r6, r8
 8005660:	106d      	asrs	r5, r5, #1
 8005662:	d00b      	beq.n	800567c <__pow5mult+0xa0>
 8005664:	6820      	ldr	r0, [r4, #0]
 8005666:	b938      	cbnz	r0, 8005678 <__pow5mult+0x9c>
 8005668:	4622      	mov	r2, r4
 800566a:	4621      	mov	r1, r4
 800566c:	4638      	mov	r0, r7
 800566e:	f7ff ff13 	bl	8005498 <__multiply>
 8005672:	6020      	str	r0, [r4, #0]
 8005674:	f8c0 9000 	str.w	r9, [r0]
 8005678:	4604      	mov	r4, r0
 800567a:	e7e4      	b.n	8005646 <__pow5mult+0x6a>
 800567c:	4630      	mov	r0, r6
 800567e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005682:	bf00      	nop
 8005684:	080060cc 	.word	0x080060cc
 8005688:	08005f9b 	.word	0x08005f9b
 800568c:	0800602c 	.word	0x0800602c

08005690 <__lshift>:
 8005690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005694:	460c      	mov	r4, r1
 8005696:	4607      	mov	r7, r0
 8005698:	4691      	mov	r9, r2
 800569a:	6923      	ldr	r3, [r4, #16]
 800569c:	6849      	ldr	r1, [r1, #4]
 800569e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80056a2:	68a3      	ldr	r3, [r4, #8]
 80056a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80056a8:	f108 0601 	add.w	r6, r8, #1
 80056ac:	42b3      	cmp	r3, r6
 80056ae:	db0b      	blt.n	80056c8 <__lshift+0x38>
 80056b0:	4638      	mov	r0, r7
 80056b2:	f7ff fde7 	bl	8005284 <_Balloc>
 80056b6:	4605      	mov	r5, r0
 80056b8:	b948      	cbnz	r0, 80056ce <__lshift+0x3e>
 80056ba:	4602      	mov	r2, r0
 80056bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80056c0:	4b27      	ldr	r3, [pc, #156]	@ (8005760 <__lshift+0xd0>)
 80056c2:	4828      	ldr	r0, [pc, #160]	@ (8005764 <__lshift+0xd4>)
 80056c4:	f000 fb18 	bl	8005cf8 <__assert_func>
 80056c8:	3101      	adds	r1, #1
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	e7ee      	b.n	80056ac <__lshift+0x1c>
 80056ce:	2300      	movs	r3, #0
 80056d0:	f100 0114 	add.w	r1, r0, #20
 80056d4:	f100 0210 	add.w	r2, r0, #16
 80056d8:	4618      	mov	r0, r3
 80056da:	4553      	cmp	r3, sl
 80056dc:	db33      	blt.n	8005746 <__lshift+0xb6>
 80056de:	6920      	ldr	r0, [r4, #16]
 80056e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056e4:	f104 0314 	add.w	r3, r4, #20
 80056e8:	f019 091f 	ands.w	r9, r9, #31
 80056ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80056f4:	d02b      	beq.n	800574e <__lshift+0xbe>
 80056f6:	468a      	mov	sl, r1
 80056f8:	2200      	movs	r2, #0
 80056fa:	f1c9 0e20 	rsb	lr, r9, #32
 80056fe:	6818      	ldr	r0, [r3, #0]
 8005700:	fa00 f009 	lsl.w	r0, r0, r9
 8005704:	4310      	orrs	r0, r2
 8005706:	f84a 0b04 	str.w	r0, [sl], #4
 800570a:	f853 2b04 	ldr.w	r2, [r3], #4
 800570e:	459c      	cmp	ip, r3
 8005710:	fa22 f20e 	lsr.w	r2, r2, lr
 8005714:	d8f3      	bhi.n	80056fe <__lshift+0x6e>
 8005716:	ebac 0304 	sub.w	r3, ip, r4
 800571a:	3b15      	subs	r3, #21
 800571c:	f023 0303 	bic.w	r3, r3, #3
 8005720:	3304      	adds	r3, #4
 8005722:	f104 0015 	add.w	r0, r4, #21
 8005726:	4560      	cmp	r0, ip
 8005728:	bf88      	it	hi
 800572a:	2304      	movhi	r3, #4
 800572c:	50ca      	str	r2, [r1, r3]
 800572e:	b10a      	cbz	r2, 8005734 <__lshift+0xa4>
 8005730:	f108 0602 	add.w	r6, r8, #2
 8005734:	3e01      	subs	r6, #1
 8005736:	4638      	mov	r0, r7
 8005738:	4621      	mov	r1, r4
 800573a:	612e      	str	r6, [r5, #16]
 800573c:	f7ff fde2 	bl	8005304 <_Bfree>
 8005740:	4628      	mov	r0, r5
 8005742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005746:	f842 0f04 	str.w	r0, [r2, #4]!
 800574a:	3301      	adds	r3, #1
 800574c:	e7c5      	b.n	80056da <__lshift+0x4a>
 800574e:	3904      	subs	r1, #4
 8005750:	f853 2b04 	ldr.w	r2, [r3], #4
 8005754:	459c      	cmp	ip, r3
 8005756:	f841 2f04 	str.w	r2, [r1, #4]!
 800575a:	d8f9      	bhi.n	8005750 <__lshift+0xc0>
 800575c:	e7ea      	b.n	8005734 <__lshift+0xa4>
 800575e:	bf00      	nop
 8005760:	0800600a 	.word	0x0800600a
 8005764:	0800602c 	.word	0x0800602c

08005768 <__mcmp>:
 8005768:	4603      	mov	r3, r0
 800576a:	690a      	ldr	r2, [r1, #16]
 800576c:	6900      	ldr	r0, [r0, #16]
 800576e:	b530      	push	{r4, r5, lr}
 8005770:	1a80      	subs	r0, r0, r2
 8005772:	d10e      	bne.n	8005792 <__mcmp+0x2a>
 8005774:	3314      	adds	r3, #20
 8005776:	3114      	adds	r1, #20
 8005778:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800577c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005780:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005784:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005788:	4295      	cmp	r5, r2
 800578a:	d003      	beq.n	8005794 <__mcmp+0x2c>
 800578c:	d205      	bcs.n	800579a <__mcmp+0x32>
 800578e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005792:	bd30      	pop	{r4, r5, pc}
 8005794:	42a3      	cmp	r3, r4
 8005796:	d3f3      	bcc.n	8005780 <__mcmp+0x18>
 8005798:	e7fb      	b.n	8005792 <__mcmp+0x2a>
 800579a:	2001      	movs	r0, #1
 800579c:	e7f9      	b.n	8005792 <__mcmp+0x2a>
	...

080057a0 <__mdiff>:
 80057a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a4:	4689      	mov	r9, r1
 80057a6:	4606      	mov	r6, r0
 80057a8:	4611      	mov	r1, r2
 80057aa:	4648      	mov	r0, r9
 80057ac:	4614      	mov	r4, r2
 80057ae:	f7ff ffdb 	bl	8005768 <__mcmp>
 80057b2:	1e05      	subs	r5, r0, #0
 80057b4:	d112      	bne.n	80057dc <__mdiff+0x3c>
 80057b6:	4629      	mov	r1, r5
 80057b8:	4630      	mov	r0, r6
 80057ba:	f7ff fd63 	bl	8005284 <_Balloc>
 80057be:	4602      	mov	r2, r0
 80057c0:	b928      	cbnz	r0, 80057ce <__mdiff+0x2e>
 80057c2:	f240 2137 	movw	r1, #567	@ 0x237
 80057c6:	4b3e      	ldr	r3, [pc, #248]	@ (80058c0 <__mdiff+0x120>)
 80057c8:	483e      	ldr	r0, [pc, #248]	@ (80058c4 <__mdiff+0x124>)
 80057ca:	f000 fa95 	bl	8005cf8 <__assert_func>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80057d4:	4610      	mov	r0, r2
 80057d6:	b003      	add	sp, #12
 80057d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057dc:	bfbc      	itt	lt
 80057de:	464b      	movlt	r3, r9
 80057e0:	46a1      	movlt	r9, r4
 80057e2:	4630      	mov	r0, r6
 80057e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80057e8:	bfba      	itte	lt
 80057ea:	461c      	movlt	r4, r3
 80057ec:	2501      	movlt	r5, #1
 80057ee:	2500      	movge	r5, #0
 80057f0:	f7ff fd48 	bl	8005284 <_Balloc>
 80057f4:	4602      	mov	r2, r0
 80057f6:	b918      	cbnz	r0, 8005800 <__mdiff+0x60>
 80057f8:	f240 2145 	movw	r1, #581	@ 0x245
 80057fc:	4b30      	ldr	r3, [pc, #192]	@ (80058c0 <__mdiff+0x120>)
 80057fe:	e7e3      	b.n	80057c8 <__mdiff+0x28>
 8005800:	f100 0b14 	add.w	fp, r0, #20
 8005804:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005808:	f109 0310 	add.w	r3, r9, #16
 800580c:	60c5      	str	r5, [r0, #12]
 800580e:	f04f 0c00 	mov.w	ip, #0
 8005812:	f109 0514 	add.w	r5, r9, #20
 8005816:	46d9      	mov	r9, fp
 8005818:	6926      	ldr	r6, [r4, #16]
 800581a:	f104 0e14 	add.w	lr, r4, #20
 800581e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005822:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005826:	9301      	str	r3, [sp, #4]
 8005828:	9b01      	ldr	r3, [sp, #4]
 800582a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800582e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005832:	b281      	uxth	r1, r0
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	fa1f f38a 	uxth.w	r3, sl
 800583a:	1a5b      	subs	r3, r3, r1
 800583c:	0c00      	lsrs	r0, r0, #16
 800583e:	4463      	add	r3, ip
 8005840:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005844:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005848:	b29b      	uxth	r3, r3
 800584a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800584e:	4576      	cmp	r6, lr
 8005850:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005854:	f849 3b04 	str.w	r3, [r9], #4
 8005858:	d8e6      	bhi.n	8005828 <__mdiff+0x88>
 800585a:	1b33      	subs	r3, r6, r4
 800585c:	3b15      	subs	r3, #21
 800585e:	f023 0303 	bic.w	r3, r3, #3
 8005862:	3415      	adds	r4, #21
 8005864:	3304      	adds	r3, #4
 8005866:	42a6      	cmp	r6, r4
 8005868:	bf38      	it	cc
 800586a:	2304      	movcc	r3, #4
 800586c:	441d      	add	r5, r3
 800586e:	445b      	add	r3, fp
 8005870:	461e      	mov	r6, r3
 8005872:	462c      	mov	r4, r5
 8005874:	4544      	cmp	r4, r8
 8005876:	d30e      	bcc.n	8005896 <__mdiff+0xf6>
 8005878:	f108 0103 	add.w	r1, r8, #3
 800587c:	1b49      	subs	r1, r1, r5
 800587e:	f021 0103 	bic.w	r1, r1, #3
 8005882:	3d03      	subs	r5, #3
 8005884:	45a8      	cmp	r8, r5
 8005886:	bf38      	it	cc
 8005888:	2100      	movcc	r1, #0
 800588a:	440b      	add	r3, r1
 800588c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005890:	b199      	cbz	r1, 80058ba <__mdiff+0x11a>
 8005892:	6117      	str	r7, [r2, #16]
 8005894:	e79e      	b.n	80057d4 <__mdiff+0x34>
 8005896:	46e6      	mov	lr, ip
 8005898:	f854 1b04 	ldr.w	r1, [r4], #4
 800589c:	fa1f fc81 	uxth.w	ip, r1
 80058a0:	44f4      	add	ip, lr
 80058a2:	0c08      	lsrs	r0, r1, #16
 80058a4:	4471      	add	r1, lr
 80058a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80058aa:	b289      	uxth	r1, r1
 80058ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80058b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80058b4:	f846 1b04 	str.w	r1, [r6], #4
 80058b8:	e7dc      	b.n	8005874 <__mdiff+0xd4>
 80058ba:	3f01      	subs	r7, #1
 80058bc:	e7e6      	b.n	800588c <__mdiff+0xec>
 80058be:	bf00      	nop
 80058c0:	0800600a 	.word	0x0800600a
 80058c4:	0800602c 	.word	0x0800602c

080058c8 <__d2b>:
 80058c8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80058cc:	2101      	movs	r1, #1
 80058ce:	4690      	mov	r8, r2
 80058d0:	4699      	mov	r9, r3
 80058d2:	9e08      	ldr	r6, [sp, #32]
 80058d4:	f7ff fcd6 	bl	8005284 <_Balloc>
 80058d8:	4604      	mov	r4, r0
 80058da:	b930      	cbnz	r0, 80058ea <__d2b+0x22>
 80058dc:	4602      	mov	r2, r0
 80058de:	f240 310f 	movw	r1, #783	@ 0x30f
 80058e2:	4b23      	ldr	r3, [pc, #140]	@ (8005970 <__d2b+0xa8>)
 80058e4:	4823      	ldr	r0, [pc, #140]	@ (8005974 <__d2b+0xac>)
 80058e6:	f000 fa07 	bl	8005cf8 <__assert_func>
 80058ea:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80058ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058f2:	b10d      	cbz	r5, 80058f8 <__d2b+0x30>
 80058f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	f1b8 0300 	subs.w	r3, r8, #0
 80058fe:	d024      	beq.n	800594a <__d2b+0x82>
 8005900:	4668      	mov	r0, sp
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	f7ff fd85 	bl	8005412 <__lo0bits>
 8005908:	e9dd 1200 	ldrd	r1, r2, [sp]
 800590c:	b1d8      	cbz	r0, 8005946 <__d2b+0x7e>
 800590e:	f1c0 0320 	rsb	r3, r0, #32
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	430b      	orrs	r3, r1
 8005918:	40c2      	lsrs	r2, r0
 800591a:	6163      	str	r3, [r4, #20]
 800591c:	9201      	str	r2, [sp, #4]
 800591e:	9b01      	ldr	r3, [sp, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	bf0c      	ite	eq
 8005924:	2201      	moveq	r2, #1
 8005926:	2202      	movne	r2, #2
 8005928:	61a3      	str	r3, [r4, #24]
 800592a:	6122      	str	r2, [r4, #16]
 800592c:	b1ad      	cbz	r5, 800595a <__d2b+0x92>
 800592e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005932:	4405      	add	r5, r0
 8005934:	6035      	str	r5, [r6, #0]
 8005936:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800593a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800593c:	6018      	str	r0, [r3, #0]
 800593e:	4620      	mov	r0, r4
 8005940:	b002      	add	sp, #8
 8005942:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005946:	6161      	str	r1, [r4, #20]
 8005948:	e7e9      	b.n	800591e <__d2b+0x56>
 800594a:	a801      	add	r0, sp, #4
 800594c:	f7ff fd61 	bl	8005412 <__lo0bits>
 8005950:	9b01      	ldr	r3, [sp, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	6163      	str	r3, [r4, #20]
 8005956:	3020      	adds	r0, #32
 8005958:	e7e7      	b.n	800592a <__d2b+0x62>
 800595a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800595e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005962:	6030      	str	r0, [r6, #0]
 8005964:	6918      	ldr	r0, [r3, #16]
 8005966:	f7ff fd35 	bl	80053d4 <__hi0bits>
 800596a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800596e:	e7e4      	b.n	800593a <__d2b+0x72>
 8005970:	0800600a 	.word	0x0800600a
 8005974:	0800602c 	.word	0x0800602c

08005978 <__sread>:
 8005978:	b510      	push	{r4, lr}
 800597a:	460c      	mov	r4, r1
 800597c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005980:	f000 f956 	bl	8005c30 <_read_r>
 8005984:	2800      	cmp	r0, #0
 8005986:	bfab      	itete	ge
 8005988:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800598a:	89a3      	ldrhlt	r3, [r4, #12]
 800598c:	181b      	addge	r3, r3, r0
 800598e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005992:	bfac      	ite	ge
 8005994:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005996:	81a3      	strhlt	r3, [r4, #12]
 8005998:	bd10      	pop	{r4, pc}

0800599a <__swrite>:
 800599a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800599e:	461f      	mov	r7, r3
 80059a0:	898b      	ldrh	r3, [r1, #12]
 80059a2:	4605      	mov	r5, r0
 80059a4:	05db      	lsls	r3, r3, #23
 80059a6:	460c      	mov	r4, r1
 80059a8:	4616      	mov	r6, r2
 80059aa:	d505      	bpl.n	80059b8 <__swrite+0x1e>
 80059ac:	2302      	movs	r3, #2
 80059ae:	2200      	movs	r2, #0
 80059b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b4:	f000 f92a 	bl	8005c0c <_lseek_r>
 80059b8:	89a3      	ldrh	r3, [r4, #12]
 80059ba:	4632      	mov	r2, r6
 80059bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059c0:	81a3      	strh	r3, [r4, #12]
 80059c2:	4628      	mov	r0, r5
 80059c4:	463b      	mov	r3, r7
 80059c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059ce:	f000 b951 	b.w	8005c74 <_write_r>

080059d2 <__sseek>:
 80059d2:	b510      	push	{r4, lr}
 80059d4:	460c      	mov	r4, r1
 80059d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059da:	f000 f917 	bl	8005c0c <_lseek_r>
 80059de:	1c43      	adds	r3, r0, #1
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	bf15      	itete	ne
 80059e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059ee:	81a3      	strheq	r3, [r4, #12]
 80059f0:	bf18      	it	ne
 80059f2:	81a3      	strhne	r3, [r4, #12]
 80059f4:	bd10      	pop	{r4, pc}

080059f6 <__sclose>:
 80059f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059fa:	f000 b94d 	b.w	8005c98 <_close_r>

080059fe <__swbuf_r>:
 80059fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a00:	460e      	mov	r6, r1
 8005a02:	4614      	mov	r4, r2
 8005a04:	4605      	mov	r5, r0
 8005a06:	b118      	cbz	r0, 8005a10 <__swbuf_r+0x12>
 8005a08:	6a03      	ldr	r3, [r0, #32]
 8005a0a:	b90b      	cbnz	r3, 8005a10 <__swbuf_r+0x12>
 8005a0c:	f7fe faae 	bl	8003f6c <__sinit>
 8005a10:	69a3      	ldr	r3, [r4, #24]
 8005a12:	60a3      	str	r3, [r4, #8]
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	071a      	lsls	r2, r3, #28
 8005a18:	d501      	bpl.n	8005a1e <__swbuf_r+0x20>
 8005a1a:	6923      	ldr	r3, [r4, #16]
 8005a1c:	b943      	cbnz	r3, 8005a30 <__swbuf_r+0x32>
 8005a1e:	4621      	mov	r1, r4
 8005a20:	4628      	mov	r0, r5
 8005a22:	f000 f82b 	bl	8005a7c <__swsetup_r>
 8005a26:	b118      	cbz	r0, 8005a30 <__swbuf_r+0x32>
 8005a28:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005a2c:	4638      	mov	r0, r7
 8005a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	6922      	ldr	r2, [r4, #16]
 8005a34:	b2f6      	uxtb	r6, r6
 8005a36:	1a98      	subs	r0, r3, r2
 8005a38:	6963      	ldr	r3, [r4, #20]
 8005a3a:	4637      	mov	r7, r6
 8005a3c:	4283      	cmp	r3, r0
 8005a3e:	dc05      	bgt.n	8005a4c <__swbuf_r+0x4e>
 8005a40:	4621      	mov	r1, r4
 8005a42:	4628      	mov	r0, r5
 8005a44:	f7ff fbea 	bl	800521c <_fflush_r>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	d1ed      	bne.n	8005a28 <__swbuf_r+0x2a>
 8005a4c:	68a3      	ldr	r3, [r4, #8]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	60a3      	str	r3, [r4, #8]
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	6022      	str	r2, [r4, #0]
 8005a58:	701e      	strb	r6, [r3, #0]
 8005a5a:	6962      	ldr	r2, [r4, #20]
 8005a5c:	1c43      	adds	r3, r0, #1
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d004      	beq.n	8005a6c <__swbuf_r+0x6e>
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	07db      	lsls	r3, r3, #31
 8005a66:	d5e1      	bpl.n	8005a2c <__swbuf_r+0x2e>
 8005a68:	2e0a      	cmp	r6, #10
 8005a6a:	d1df      	bne.n	8005a2c <__swbuf_r+0x2e>
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f7ff fbd4 	bl	800521c <_fflush_r>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d0d9      	beq.n	8005a2c <__swbuf_r+0x2e>
 8005a78:	e7d6      	b.n	8005a28 <__swbuf_r+0x2a>
	...

08005a7c <__swsetup_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	4b29      	ldr	r3, [pc, #164]	@ (8005b24 <__swsetup_r+0xa8>)
 8005a80:	4605      	mov	r5, r0
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	460c      	mov	r4, r1
 8005a86:	b118      	cbz	r0, 8005a90 <__swsetup_r+0x14>
 8005a88:	6a03      	ldr	r3, [r0, #32]
 8005a8a:	b90b      	cbnz	r3, 8005a90 <__swsetup_r+0x14>
 8005a8c:	f7fe fa6e 	bl	8003f6c <__sinit>
 8005a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a94:	0719      	lsls	r1, r3, #28
 8005a96:	d422      	bmi.n	8005ade <__swsetup_r+0x62>
 8005a98:	06da      	lsls	r2, r3, #27
 8005a9a:	d407      	bmi.n	8005aac <__swsetup_r+0x30>
 8005a9c:	2209      	movs	r2, #9
 8005a9e:	602a      	str	r2, [r5, #0]
 8005aa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005aa8:	81a3      	strh	r3, [r4, #12]
 8005aaa:	e033      	b.n	8005b14 <__swsetup_r+0x98>
 8005aac:	0758      	lsls	r0, r3, #29
 8005aae:	d512      	bpl.n	8005ad6 <__swsetup_r+0x5a>
 8005ab0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ab2:	b141      	cbz	r1, 8005ac6 <__swsetup_r+0x4a>
 8005ab4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ab8:	4299      	cmp	r1, r3
 8005aba:	d002      	beq.n	8005ac2 <__swsetup_r+0x46>
 8005abc:	4628      	mov	r0, r5
 8005abe:	f000 f94d 	bl	8005d5c <_free_r>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ac6:	89a3      	ldrh	r3, [r4, #12]
 8005ac8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005acc:	81a3      	strh	r3, [r4, #12]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	6063      	str	r3, [r4, #4]
 8005ad2:	6923      	ldr	r3, [r4, #16]
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	89a3      	ldrh	r3, [r4, #12]
 8005ad8:	f043 0308 	orr.w	r3, r3, #8
 8005adc:	81a3      	strh	r3, [r4, #12]
 8005ade:	6923      	ldr	r3, [r4, #16]
 8005ae0:	b94b      	cbnz	r3, 8005af6 <__swsetup_r+0x7a>
 8005ae2:	89a3      	ldrh	r3, [r4, #12]
 8005ae4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aec:	d003      	beq.n	8005af6 <__swsetup_r+0x7a>
 8005aee:	4621      	mov	r1, r4
 8005af0:	4628      	mov	r0, r5
 8005af2:	f000 f83e 	bl	8005b72 <__smakebuf_r>
 8005af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005afa:	f013 0201 	ands.w	r2, r3, #1
 8005afe:	d00a      	beq.n	8005b16 <__swsetup_r+0x9a>
 8005b00:	2200      	movs	r2, #0
 8005b02:	60a2      	str	r2, [r4, #8]
 8005b04:	6962      	ldr	r2, [r4, #20]
 8005b06:	4252      	negs	r2, r2
 8005b08:	61a2      	str	r2, [r4, #24]
 8005b0a:	6922      	ldr	r2, [r4, #16]
 8005b0c:	b942      	cbnz	r2, 8005b20 <__swsetup_r+0xa4>
 8005b0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b12:	d1c5      	bne.n	8005aa0 <__swsetup_r+0x24>
 8005b14:	bd38      	pop	{r3, r4, r5, pc}
 8005b16:	0799      	lsls	r1, r3, #30
 8005b18:	bf58      	it	pl
 8005b1a:	6962      	ldrpl	r2, [r4, #20]
 8005b1c:	60a2      	str	r2, [r4, #8]
 8005b1e:	e7f4      	b.n	8005b0a <__swsetup_r+0x8e>
 8005b20:	2000      	movs	r0, #0
 8005b22:	e7f7      	b.n	8005b14 <__swsetup_r+0x98>
 8005b24:	20000018 	.word	0x20000018

08005b28 <__swhatbuf_r>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b30:	4615      	mov	r5, r2
 8005b32:	2900      	cmp	r1, #0
 8005b34:	461e      	mov	r6, r3
 8005b36:	b096      	sub	sp, #88	@ 0x58
 8005b38:	da0c      	bge.n	8005b54 <__swhatbuf_r+0x2c>
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b42:	bf14      	ite	ne
 8005b44:	2340      	movne	r3, #64	@ 0x40
 8005b46:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	6031      	str	r1, [r6, #0]
 8005b4e:	602b      	str	r3, [r5, #0]
 8005b50:	b016      	add	sp, #88	@ 0x58
 8005b52:	bd70      	pop	{r4, r5, r6, pc}
 8005b54:	466a      	mov	r2, sp
 8005b56:	f000 f8af 	bl	8005cb8 <_fstat_r>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	dbed      	blt.n	8005b3a <__swhatbuf_r+0x12>
 8005b5e:	9901      	ldr	r1, [sp, #4]
 8005b60:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b64:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b68:	4259      	negs	r1, r3
 8005b6a:	4159      	adcs	r1, r3
 8005b6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b70:	e7eb      	b.n	8005b4a <__swhatbuf_r+0x22>

08005b72 <__smakebuf_r>:
 8005b72:	898b      	ldrh	r3, [r1, #12]
 8005b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b76:	079d      	lsls	r5, r3, #30
 8005b78:	4606      	mov	r6, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	d507      	bpl.n	8005b8e <__smakebuf_r+0x1c>
 8005b7e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b82:	6023      	str	r3, [r4, #0]
 8005b84:	6123      	str	r3, [r4, #16]
 8005b86:	2301      	movs	r3, #1
 8005b88:	6163      	str	r3, [r4, #20]
 8005b8a:	b003      	add	sp, #12
 8005b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b8e:	466a      	mov	r2, sp
 8005b90:	ab01      	add	r3, sp, #4
 8005b92:	f7ff ffc9 	bl	8005b28 <__swhatbuf_r>
 8005b96:	9f00      	ldr	r7, [sp, #0]
 8005b98:	4605      	mov	r5, r0
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	f7ff fa3d 	bl	800501c <_malloc_r>
 8005ba2:	b948      	cbnz	r0, 8005bb8 <__smakebuf_r+0x46>
 8005ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba8:	059a      	lsls	r2, r3, #22
 8005baa:	d4ee      	bmi.n	8005b8a <__smakebuf_r+0x18>
 8005bac:	f023 0303 	bic.w	r3, r3, #3
 8005bb0:	f043 0302 	orr.w	r3, r3, #2
 8005bb4:	81a3      	strh	r3, [r4, #12]
 8005bb6:	e7e2      	b.n	8005b7e <__smakebuf_r+0xc>
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bc2:	81a3      	strh	r3, [r4, #12]
 8005bc4:	9b01      	ldr	r3, [sp, #4]
 8005bc6:	6020      	str	r0, [r4, #0]
 8005bc8:	b15b      	cbz	r3, 8005be2 <__smakebuf_r+0x70>
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bd0:	f000 f80c 	bl	8005bec <_isatty_r>
 8005bd4:	b128      	cbz	r0, 8005be2 <__smakebuf_r+0x70>
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	f023 0303 	bic.w	r3, r3, #3
 8005bdc:	f043 0301 	orr.w	r3, r3, #1
 8005be0:	81a3      	strh	r3, [r4, #12]
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	431d      	orrs	r5, r3
 8005be6:	81a5      	strh	r5, [r4, #12]
 8005be8:	e7cf      	b.n	8005b8a <__smakebuf_r+0x18>
	...

08005bec <_isatty_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	2300      	movs	r3, #0
 8005bf0:	4d05      	ldr	r5, [pc, #20]	@ (8005c08 <_isatty_r+0x1c>)
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	602b      	str	r3, [r5, #0]
 8005bf8:	f7fb fc8d 	bl	8001516 <_isatty>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	d102      	bne.n	8005c06 <_isatty_r+0x1a>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	b103      	cbz	r3, 8005c06 <_isatty_r+0x1a>
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	200003b8 	.word	0x200003b8

08005c0c <_lseek_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	4604      	mov	r4, r0
 8005c10:	4608      	mov	r0, r1
 8005c12:	4611      	mov	r1, r2
 8005c14:	2200      	movs	r2, #0
 8005c16:	4d05      	ldr	r5, [pc, #20]	@ (8005c2c <_lseek_r+0x20>)
 8005c18:	602a      	str	r2, [r5, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f7fb fc85 	bl	800152a <_lseek>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_lseek_r+0x1e>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_lseek_r+0x1e>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	200003b8 	.word	0x200003b8

08005c30 <_read_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4604      	mov	r4, r0
 8005c34:	4608      	mov	r0, r1
 8005c36:	4611      	mov	r1, r2
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4d05      	ldr	r5, [pc, #20]	@ (8005c50 <_read_r+0x20>)
 8005c3c:	602a      	str	r2, [r5, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f7fb fc16 	bl	8001470 <_read>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_read_r+0x1e>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_read_r+0x1e>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	200003b8 	.word	0x200003b8

08005c54 <_sbrk_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	2300      	movs	r3, #0
 8005c58:	4d05      	ldr	r5, [pc, #20]	@ (8005c70 <_sbrk_r+0x1c>)
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	4608      	mov	r0, r1
 8005c5e:	602b      	str	r3, [r5, #0]
 8005c60:	f7fb fc70 	bl	8001544 <_sbrk>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d102      	bne.n	8005c6e <_sbrk_r+0x1a>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	b103      	cbz	r3, 8005c6e <_sbrk_r+0x1a>
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	200003b8 	.word	0x200003b8

08005c74 <_write_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	4604      	mov	r4, r0
 8005c78:	4608      	mov	r0, r1
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	4d05      	ldr	r5, [pc, #20]	@ (8005c94 <_write_r+0x20>)
 8005c80:	602a      	str	r2, [r5, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	f7fb fc11 	bl	80014aa <_write>
 8005c88:	1c43      	adds	r3, r0, #1
 8005c8a:	d102      	bne.n	8005c92 <_write_r+0x1e>
 8005c8c:	682b      	ldr	r3, [r5, #0]
 8005c8e:	b103      	cbz	r3, 8005c92 <_write_r+0x1e>
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	bd38      	pop	{r3, r4, r5, pc}
 8005c94:	200003b8 	.word	0x200003b8

08005c98 <_close_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	4d05      	ldr	r5, [pc, #20]	@ (8005cb4 <_close_r+0x1c>)
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	4608      	mov	r0, r1
 8005ca2:	602b      	str	r3, [r5, #0]
 8005ca4:	f7fb fc1d 	bl	80014e2 <_close>
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	d102      	bne.n	8005cb2 <_close_r+0x1a>
 8005cac:	682b      	ldr	r3, [r5, #0]
 8005cae:	b103      	cbz	r3, 8005cb2 <_close_r+0x1a>
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
 8005cb4:	200003b8 	.word	0x200003b8

08005cb8 <_fstat_r>:
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	2300      	movs	r3, #0
 8005cbc:	4d06      	ldr	r5, [pc, #24]	@ (8005cd8 <_fstat_r+0x20>)
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	4608      	mov	r0, r1
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	602b      	str	r3, [r5, #0]
 8005cc6:	f7fb fc17 	bl	80014f8 <_fstat>
 8005cca:	1c43      	adds	r3, r0, #1
 8005ccc:	d102      	bne.n	8005cd4 <_fstat_r+0x1c>
 8005cce:	682b      	ldr	r3, [r5, #0]
 8005cd0:	b103      	cbz	r3, 8005cd4 <_fstat_r+0x1c>
 8005cd2:	6023      	str	r3, [r4, #0]
 8005cd4:	bd38      	pop	{r3, r4, r5, pc}
 8005cd6:	bf00      	nop
 8005cd8:	200003b8 	.word	0x200003b8

08005cdc <memcpy>:
 8005cdc:	440a      	add	r2, r1
 8005cde:	4291      	cmp	r1, r2
 8005ce0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005ce4:	d100      	bne.n	8005ce8 <memcpy+0xc>
 8005ce6:	4770      	bx	lr
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cee:	4291      	cmp	r1, r2
 8005cf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cf4:	d1f9      	bne.n	8005cea <memcpy+0xe>
 8005cf6:	bd10      	pop	{r4, pc}

08005cf8 <__assert_func>:
 8005cf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cfa:	4614      	mov	r4, r2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	4b09      	ldr	r3, [pc, #36]	@ (8005d24 <__assert_func+0x2c>)
 8005d00:	4605      	mov	r5, r0
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68d8      	ldr	r0, [r3, #12]
 8005d06:	b14c      	cbz	r4, 8005d1c <__assert_func+0x24>
 8005d08:	4b07      	ldr	r3, [pc, #28]	@ (8005d28 <__assert_func+0x30>)
 8005d0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d0e:	9100      	str	r1, [sp, #0]
 8005d10:	462b      	mov	r3, r5
 8005d12:	4906      	ldr	r1, [pc, #24]	@ (8005d2c <__assert_func+0x34>)
 8005d14:	f000 f87c 	bl	8005e10 <fiprintf>
 8005d18:	f000 f899 	bl	8005e4e <abort>
 8005d1c:	4b04      	ldr	r3, [pc, #16]	@ (8005d30 <__assert_func+0x38>)
 8005d1e:	461c      	mov	r4, r3
 8005d20:	e7f3      	b.n	8005d0a <__assert_func+0x12>
 8005d22:	bf00      	nop
 8005d24:	20000018 	.word	0x20000018
 8005d28:	0800608f 	.word	0x0800608f
 8005d2c:	0800609c 	.word	0x0800609c
 8005d30:	080060ca 	.word	0x080060ca

08005d34 <_calloc_r>:
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	fba1 5402 	umull	r5, r4, r1, r2
 8005d3a:	b934      	cbnz	r4, 8005d4a <_calloc_r+0x16>
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	f7ff f96d 	bl	800501c <_malloc_r>
 8005d42:	4606      	mov	r6, r0
 8005d44:	b928      	cbnz	r0, 8005d52 <_calloc_r+0x1e>
 8005d46:	4630      	mov	r0, r6
 8005d48:	bd70      	pop	{r4, r5, r6, pc}
 8005d4a:	220c      	movs	r2, #12
 8005d4c:	2600      	movs	r6, #0
 8005d4e:	6002      	str	r2, [r0, #0]
 8005d50:	e7f9      	b.n	8005d46 <_calloc_r+0x12>
 8005d52:	462a      	mov	r2, r5
 8005d54:	4621      	mov	r1, r4
 8005d56:	f7fe f951 	bl	8003ffc <memset>
 8005d5a:	e7f4      	b.n	8005d46 <_calloc_r+0x12>

08005d5c <_free_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	4605      	mov	r5, r0
 8005d60:	2900      	cmp	r1, #0
 8005d62:	d040      	beq.n	8005de6 <_free_r+0x8a>
 8005d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d68:	1f0c      	subs	r4, r1, #4
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	bfb8      	it	lt
 8005d6e:	18e4      	addlt	r4, r4, r3
 8005d70:	f7ff fa7c 	bl	800526c <__malloc_lock>
 8005d74:	4a1c      	ldr	r2, [pc, #112]	@ (8005de8 <_free_r+0x8c>)
 8005d76:	6813      	ldr	r3, [r2, #0]
 8005d78:	b933      	cbnz	r3, 8005d88 <_free_r+0x2c>
 8005d7a:	6063      	str	r3, [r4, #4]
 8005d7c:	6014      	str	r4, [r2, #0]
 8005d7e:	4628      	mov	r0, r5
 8005d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d84:	f7ff ba78 	b.w	8005278 <__malloc_unlock>
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	d908      	bls.n	8005d9e <_free_r+0x42>
 8005d8c:	6820      	ldr	r0, [r4, #0]
 8005d8e:	1821      	adds	r1, r4, r0
 8005d90:	428b      	cmp	r3, r1
 8005d92:	bf01      	itttt	eq
 8005d94:	6819      	ldreq	r1, [r3, #0]
 8005d96:	685b      	ldreq	r3, [r3, #4]
 8005d98:	1809      	addeq	r1, r1, r0
 8005d9a:	6021      	streq	r1, [r4, #0]
 8005d9c:	e7ed      	b.n	8005d7a <_free_r+0x1e>
 8005d9e:	461a      	mov	r2, r3
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	b10b      	cbz	r3, 8005da8 <_free_r+0x4c>
 8005da4:	42a3      	cmp	r3, r4
 8005da6:	d9fa      	bls.n	8005d9e <_free_r+0x42>
 8005da8:	6811      	ldr	r1, [r2, #0]
 8005daa:	1850      	adds	r0, r2, r1
 8005dac:	42a0      	cmp	r0, r4
 8005dae:	d10b      	bne.n	8005dc8 <_free_r+0x6c>
 8005db0:	6820      	ldr	r0, [r4, #0]
 8005db2:	4401      	add	r1, r0
 8005db4:	1850      	adds	r0, r2, r1
 8005db6:	4283      	cmp	r3, r0
 8005db8:	6011      	str	r1, [r2, #0]
 8005dba:	d1e0      	bne.n	8005d7e <_free_r+0x22>
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	4408      	add	r0, r1
 8005dc2:	6010      	str	r0, [r2, #0]
 8005dc4:	6053      	str	r3, [r2, #4]
 8005dc6:	e7da      	b.n	8005d7e <_free_r+0x22>
 8005dc8:	d902      	bls.n	8005dd0 <_free_r+0x74>
 8005dca:	230c      	movs	r3, #12
 8005dcc:	602b      	str	r3, [r5, #0]
 8005dce:	e7d6      	b.n	8005d7e <_free_r+0x22>
 8005dd0:	6820      	ldr	r0, [r4, #0]
 8005dd2:	1821      	adds	r1, r4, r0
 8005dd4:	428b      	cmp	r3, r1
 8005dd6:	bf01      	itttt	eq
 8005dd8:	6819      	ldreq	r1, [r3, #0]
 8005dda:	685b      	ldreq	r3, [r3, #4]
 8005ddc:	1809      	addeq	r1, r1, r0
 8005dde:	6021      	streq	r1, [r4, #0]
 8005de0:	6063      	str	r3, [r4, #4]
 8005de2:	6054      	str	r4, [r2, #4]
 8005de4:	e7cb      	b.n	8005d7e <_free_r+0x22>
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	200003b4 	.word	0x200003b4

08005dec <__ascii_mbtowc>:
 8005dec:	b082      	sub	sp, #8
 8005dee:	b901      	cbnz	r1, 8005df2 <__ascii_mbtowc+0x6>
 8005df0:	a901      	add	r1, sp, #4
 8005df2:	b142      	cbz	r2, 8005e06 <__ascii_mbtowc+0x1a>
 8005df4:	b14b      	cbz	r3, 8005e0a <__ascii_mbtowc+0x1e>
 8005df6:	7813      	ldrb	r3, [r2, #0]
 8005df8:	600b      	str	r3, [r1, #0]
 8005dfa:	7812      	ldrb	r2, [r2, #0]
 8005dfc:	1e10      	subs	r0, r2, #0
 8005dfe:	bf18      	it	ne
 8005e00:	2001      	movne	r0, #1
 8005e02:	b002      	add	sp, #8
 8005e04:	4770      	bx	lr
 8005e06:	4610      	mov	r0, r2
 8005e08:	e7fb      	b.n	8005e02 <__ascii_mbtowc+0x16>
 8005e0a:	f06f 0001 	mvn.w	r0, #1
 8005e0e:	e7f8      	b.n	8005e02 <__ascii_mbtowc+0x16>

08005e10 <fiprintf>:
 8005e10:	b40e      	push	{r1, r2, r3}
 8005e12:	b503      	push	{r0, r1, lr}
 8005e14:	4601      	mov	r1, r0
 8005e16:	ab03      	add	r3, sp, #12
 8005e18:	4805      	ldr	r0, [pc, #20]	@ (8005e30 <fiprintf+0x20>)
 8005e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e1e:	6800      	ldr	r0, [r0, #0]
 8005e20:	9301      	str	r3, [sp, #4]
 8005e22:	f7fe ffb9 	bl	8004d98 <_vfiprintf_r>
 8005e26:	b002      	add	sp, #8
 8005e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e2c:	b003      	add	sp, #12
 8005e2e:	4770      	bx	lr
 8005e30:	20000018 	.word	0x20000018

08005e34 <__ascii_wctomb>:
 8005e34:	4603      	mov	r3, r0
 8005e36:	4608      	mov	r0, r1
 8005e38:	b141      	cbz	r1, 8005e4c <__ascii_wctomb+0x18>
 8005e3a:	2aff      	cmp	r2, #255	@ 0xff
 8005e3c:	d904      	bls.n	8005e48 <__ascii_wctomb+0x14>
 8005e3e:	228a      	movs	r2, #138	@ 0x8a
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	4770      	bx	lr
 8005e48:	2001      	movs	r0, #1
 8005e4a:	700a      	strb	r2, [r1, #0]
 8005e4c:	4770      	bx	lr

08005e4e <abort>:
 8005e4e:	2006      	movs	r0, #6
 8005e50:	b508      	push	{r3, lr}
 8005e52:	f000 f82b 	bl	8005eac <raise>
 8005e56:	2001      	movs	r0, #1
 8005e58:	f7fb faff 	bl	800145a <_exit>

08005e5c <_raise_r>:
 8005e5c:	291f      	cmp	r1, #31
 8005e5e:	b538      	push	{r3, r4, r5, lr}
 8005e60:	4605      	mov	r5, r0
 8005e62:	460c      	mov	r4, r1
 8005e64:	d904      	bls.n	8005e70 <_raise_r+0x14>
 8005e66:	2316      	movs	r3, #22
 8005e68:	6003      	str	r3, [r0, #0]
 8005e6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e6e:	bd38      	pop	{r3, r4, r5, pc}
 8005e70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005e72:	b112      	cbz	r2, 8005e7a <_raise_r+0x1e>
 8005e74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e78:	b94b      	cbnz	r3, 8005e8e <_raise_r+0x32>
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f000 f830 	bl	8005ee0 <_getpid_r>
 8005e80:	4622      	mov	r2, r4
 8005e82:	4601      	mov	r1, r0
 8005e84:	4628      	mov	r0, r5
 8005e86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e8a:	f000 b817 	b.w	8005ebc <_kill_r>
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d00a      	beq.n	8005ea8 <_raise_r+0x4c>
 8005e92:	1c59      	adds	r1, r3, #1
 8005e94:	d103      	bne.n	8005e9e <_raise_r+0x42>
 8005e96:	2316      	movs	r3, #22
 8005e98:	6003      	str	r3, [r0, #0]
 8005e9a:	2001      	movs	r0, #1
 8005e9c:	e7e7      	b.n	8005e6e <_raise_r+0x12>
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005ea6:	4798      	blx	r3
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	e7e0      	b.n	8005e6e <_raise_r+0x12>

08005eac <raise>:
 8005eac:	4b02      	ldr	r3, [pc, #8]	@ (8005eb8 <raise+0xc>)
 8005eae:	4601      	mov	r1, r0
 8005eb0:	6818      	ldr	r0, [r3, #0]
 8005eb2:	f7ff bfd3 	b.w	8005e5c <_raise_r>
 8005eb6:	bf00      	nop
 8005eb8:	20000018 	.word	0x20000018

08005ebc <_kill_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	4d06      	ldr	r5, [pc, #24]	@ (8005edc <_kill_r+0x20>)
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	4608      	mov	r0, r1
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	f7fb fab6 	bl	800143a <_kill>
 8005ece:	1c43      	adds	r3, r0, #1
 8005ed0:	d102      	bne.n	8005ed8 <_kill_r+0x1c>
 8005ed2:	682b      	ldr	r3, [r5, #0]
 8005ed4:	b103      	cbz	r3, 8005ed8 <_kill_r+0x1c>
 8005ed6:	6023      	str	r3, [r4, #0]
 8005ed8:	bd38      	pop	{r3, r4, r5, pc}
 8005eda:	bf00      	nop
 8005edc:	200003b8 	.word	0x200003b8

08005ee0 <_getpid_r>:
 8005ee0:	f7fb baa4 	b.w	800142c <_getpid>

08005ee4 <_init>:
 8005ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee6:	bf00      	nop
 8005ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eea:	bc08      	pop	{r3}
 8005eec:	469e      	mov	lr, r3
 8005eee:	4770      	bx	lr

08005ef0 <_fini>:
 8005ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef2:	bf00      	nop
 8005ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef6:	bc08      	pop	{r3}
 8005ef8:	469e      	mov	lr, r3
 8005efa:	4770      	bx	lr
